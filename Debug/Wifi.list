
Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d00  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  08009eb0  08009eb0  00019eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4cc  0800a4cc  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4cc  0800a4cc  0001a4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4d4  0800a4d4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4d4  0800a4d4  0001a4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4d8  0800a4d8  0001a4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800a4dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          00001244  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200012e4  200012e4  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000253c7  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d98  00000000  00000000  00045497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d50  00000000  00000000  0004a230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ba0  00000000  00000000  0004bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a3e1  00000000  00000000  0004db20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000257cb  00000000  00000000  00077f01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebe45  00000000  00000000  0009d6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00189511  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000814c  00000000  00000000  00189564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009e98 	.word	0x08009e98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	08009e98 	.word	0x08009e98

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b098      	sub	sp, #96	; 0x60
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 80005ce:	f000 fa6f 	bl	8000ab0 <Ringbuf_init>
	Uart_sendstring("AT+RST\r\n", wifi_uart);
 80005d2:	4968      	ldr	r1, [pc, #416]	; (8000774 <ESP_Init+0x1b0>)
 80005d4:	4868      	ldr	r0, [pc, #416]	; (8000778 <ESP_Init+0x1b4>)
 80005d6:	f000 fcdc 	bl	8000f92 <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 80005da:	4968      	ldr	r1, [pc, #416]	; (800077c <ESP_Init+0x1b8>)
 80005dc:	4868      	ldr	r0, [pc, #416]	; (8000780 <ESP_Init+0x1bc>)
 80005de:	f000 fcd8 	bl	8000f92 <Uart_sendstring>
	for (int i=0; i<5; i++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005e6:	e00a      	b.n	80005fe <ESP_Init+0x3a>
	{
		Uart_sendstring(".", pc_uart);
 80005e8:	4964      	ldr	r1, [pc, #400]	; (800077c <ESP_Init+0x1b8>)
 80005ea:	4866      	ldr	r0, [pc, #408]	; (8000784 <ESP_Init+0x1c0>)
 80005ec:	f000 fcd1 	bl	8000f92 <Uart_sendstring>
		HAL_Delay(1000);
 80005f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f4:	f001 ff86 	bl	8002504 <HAL_Delay>
	for (int i=0; i<5; i++)
 80005f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005fa:	3301      	adds	r3, #1
 80005fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000600:	2b04      	cmp	r3, #4
 8000602:	ddf1      	ble.n	80005e8 <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_flush(wifi_uart);
 8000604:	485b      	ldr	r0, [pc, #364]	; (8000774 <ESP_Init+0x1b0>)
 8000606:	f000 fb11 	bl	8000c2c <Uart_flush>
	Uart_sendstring("AT\r\n", wifi_uart);
 800060a:	495a      	ldr	r1, [pc, #360]	; (8000774 <ESP_Init+0x1b0>)
 800060c:	485e      	ldr	r0, [pc, #376]	; (8000788 <ESP_Init+0x1c4>)
 800060e:	f000 fcc0 	bl	8000f92 <Uart_sendstring>
	while(!(Wait_for("OK\r\n", wifi_uart)));
 8000612:	bf00      	nop
 8000614:	4957      	ldr	r1, [pc, #348]	; (8000774 <ESP_Init+0x1b0>)
 8000616:	485d      	ldr	r0, [pc, #372]	; (800078c <ESP_Init+0x1c8>)
 8000618:	f000 fd50 	bl	80010bc <Wait_for>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d0f8      	beq.n	8000614 <ESP_Init+0x50>
	Uart_sendstring("AT---->OK\r\n", pc_uart);
 8000622:	4956      	ldr	r1, [pc, #344]	; (800077c <ESP_Init+0x1b8>)
 8000624:	485a      	ldr	r0, [pc, #360]	; (8000790 <ESP_Init+0x1cc>)
 8000626:	f000 fcb4 	bl	8000f92 <Uart_sendstring>


	/********* AT+CWMODE=1 **********/
	Uart_flush(wifi_uart);
 800062a:	4852      	ldr	r0, [pc, #328]	; (8000774 <ESP_Init+0x1b0>)
 800062c:	f000 fafe 	bl	8000c2c <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 8000630:	4950      	ldr	r1, [pc, #320]	; (8000774 <ESP_Init+0x1b0>)
 8000632:	4858      	ldr	r0, [pc, #352]	; (8000794 <ESP_Init+0x1d0>)
 8000634:	f000 fcad 	bl	8000f92 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000638:	bf00      	nop
 800063a:	494e      	ldr	r1, [pc, #312]	; (8000774 <ESP_Init+0x1b0>)
 800063c:	4853      	ldr	r0, [pc, #332]	; (800078c <ESP_Init+0x1c8>)
 800063e:	f000 fd3d 	bl	80010bc <Wait_for>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d0f8      	beq.n	800063a <ESP_Init+0x76>
	Uart_sendstring("CW MODE---->1\r\n", pc_uart);
 8000648:	494c      	ldr	r1, [pc, #304]	; (800077c <ESP_Init+0x1b8>)
 800064a:	4853      	ldr	r0, [pc, #332]	; (8000798 <ESP_Init+0x1d4>)
 800064c:	f000 fca1 	bl	8000f92 <Uart_sendstring>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	if(*SSID!=0 || *PASSWD!=0){
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d103      	bne.n	8000660 <ESP_Init+0x9c>
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d028      	beq.n	80006b2 <ESP_Init+0xee>
	Uart_flush(wifi_uart);
 8000660:	4844      	ldr	r0, [pc, #272]	; (8000774 <ESP_Init+0x1b0>)
 8000662:	f000 fae3 	bl	8000c2c <Uart_flush>
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 8000666:	4945      	ldr	r1, [pc, #276]	; (800077c <ESP_Init+0x1b8>)
 8000668:	484c      	ldr	r0, [pc, #304]	; (800079c <ESP_Init+0x1d8>)
 800066a:	f000 fc92 	bl	8000f92 <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800066e:	f107 0008 	add.w	r0, r7, #8
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	494a      	ldr	r1, [pc, #296]	; (80007a0 <ESP_Init+0x1dc>)
 8000678:	f009 f880 	bl	800977c <siprintf>
	Uart_sendstring(data, wifi_uart);
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	493c      	ldr	r1, [pc, #240]	; (8000774 <ESP_Init+0x1b0>)
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fc85 	bl	8000f92 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000688:	bf00      	nop
 800068a:	493a      	ldr	r1, [pc, #232]	; (8000774 <ESP_Init+0x1b0>)
 800068c:	483f      	ldr	r0, [pc, #252]	; (800078c <ESP_Init+0x1c8>)
 800068e:	f000 fd15 	bl	80010bc <Wait_for>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0f8      	beq.n	800068a <ESP_Init+0xc6>
	sprintf (data, "Connected to,\"%s\"\r\n", SSID);
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	4941      	ldr	r1, [pc, #260]	; (80007a4 <ESP_Init+0x1e0>)
 80006a0:	4618      	mov	r0, r3
 80006a2:	f009 f86b 	bl	800977c <siprintf>
	Uart_sendstring(data,pc_uart);
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	4934      	ldr	r1, [pc, #208]	; (800077c <ESP_Init+0x1b8>)
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fc70 	bl	8000f92 <Uart_sendstring>
	}

	/********* AT+CIFSR **********/
	Uart_flush(wifi_uart);
 80006b2:	4830      	ldr	r0, [pc, #192]	; (8000774 <ESP_Init+0x1b0>)
 80006b4:	f000 faba 	bl	8000c2c <Uart_flush>
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 80006b8:	492e      	ldr	r1, [pc, #184]	; (8000774 <ESP_Init+0x1b0>)
 80006ba:	483b      	ldr	r0, [pc, #236]	; (80007a8 <ESP_Init+0x1e4>)
 80006bc:	f000 fc69 	bl	8000f92 <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 80006c0:	bf00      	nop
 80006c2:	492c      	ldr	r1, [pc, #176]	; (8000774 <ESP_Init+0x1b0>)
 80006c4:	4839      	ldr	r0, [pc, #228]	; (80007ac <ESP_Init+0x1e8>)
 80006c6:	f000 fcf9 	bl	80010bc <Wait_for>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d0f8      	beq.n	80006c2 <ESP_Init+0xfe>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 80006d0:	bf00      	nop
 80006d2:	4a28      	ldr	r2, [pc, #160]	; (8000774 <ESP_Init+0x1b0>)
 80006d4:	4936      	ldr	r1, [pc, #216]	; (80007b0 <ESP_Init+0x1ec>)
 80006d6:	4837      	ldr	r0, [pc, #220]	; (80007b4 <ESP_Init+0x1f0>)
 80006d8:	f000 fc72 	bl	8000fc0 <Copy_upto>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0f7      	beq.n	80006d2 <ESP_Init+0x10e>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80006e2:	bf00      	nop
 80006e4:	4923      	ldr	r1, [pc, #140]	; (8000774 <ESP_Init+0x1b0>)
 80006e6:	4829      	ldr	r0, [pc, #164]	; (800078c <ESP_Init+0x1c8>)
 80006e8:	f000 fce8 	bl	80010bc <Wait_for>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f8      	beq.n	80006e4 <ESP_Init+0x120>
	int len = strlen (buffer);
 80006f2:	482f      	ldr	r0, [pc, #188]	; (80007b0 <ESP_Init+0x1ec>)
 80006f4:	f7ff fd86 	bl	8000204 <strlen>
 80006f8:	4603      	mov	r3, r0
 80006fa:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len-1] = '\0';
 80006fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006fe:	3b01      	subs	r3, #1
 8000700:	4a2b      	ldr	r2, [pc, #172]	; (80007b0 <ESP_Init+0x1ec>)
 8000702:	2100      	movs	r1, #0
 8000704:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\r\n", buffer);
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	4a29      	ldr	r2, [pc, #164]	; (80007b0 <ESP_Init+0x1ec>)
 800070c:	492a      	ldr	r1, [pc, #168]	; (80007b8 <ESP_Init+0x1f4>)
 800070e:	4618      	mov	r0, r3
 8000710:	f009 f834 	bl	800977c <siprintf>
	Uart_sendstring(data, pc_uart);
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	4918      	ldr	r1, [pc, #96]	; (800077c <ESP_Init+0x1b8>)
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fc39 	bl	8000f92 <Uart_sendstring>

	/********* AT+CIPMUX **********/
	Uart_flush(wifi_uart);
 8000720:	4814      	ldr	r0, [pc, #80]	; (8000774 <ESP_Init+0x1b0>)
 8000722:	f000 fa83 	bl	8000c2c <Uart_flush>
	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 8000726:	4913      	ldr	r1, [pc, #76]	; (8000774 <ESP_Init+0x1b0>)
 8000728:	4824      	ldr	r0, [pc, #144]	; (80007bc <ESP_Init+0x1f8>)
 800072a:	f000 fc32 	bl	8000f92 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 800072e:	bf00      	nop
 8000730:	4910      	ldr	r1, [pc, #64]	; (8000774 <ESP_Init+0x1b0>)
 8000732:	4816      	ldr	r0, [pc, #88]	; (800078c <ESP_Init+0x1c8>)
 8000734:	f000 fcc2 	bl	80010bc <Wait_for>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d0f8      	beq.n	8000730 <ESP_Init+0x16c>
	Uart_sendstring("CIPMUX---->OK\r\n", pc_uart);
 800073e:	490f      	ldr	r1, [pc, #60]	; (800077c <ESP_Init+0x1b8>)
 8000740:	481f      	ldr	r0, [pc, #124]	; (80007c0 <ESP_Init+0x1fc>)
 8000742:	f000 fc26 	bl	8000f92 <Uart_sendstring>

	/********* AT+CIPSERVER **********/
	Uart_flush(wifi_uart);
 8000746:	480b      	ldr	r0, [pc, #44]	; (8000774 <ESP_Init+0x1b0>)
 8000748:	f000 fa70 	bl	8000c2c <Uart_flush>
	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 800074c:	4909      	ldr	r1, [pc, #36]	; (8000774 <ESP_Init+0x1b0>)
 800074e:	481d      	ldr	r0, [pc, #116]	; (80007c4 <ESP_Init+0x200>)
 8000750:	f000 fc1f 	bl	8000f92 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000754:	bf00      	nop
 8000756:	4907      	ldr	r1, [pc, #28]	; (8000774 <ESP_Init+0x1b0>)
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <ESP_Init+0x1c8>)
 800075a:	f000 fcaf 	bl	80010bc <Wait_for>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d0f8      	beq.n	8000756 <ESP_Init+0x192>
	Uart_sendstring("CIPSERVER---->OK\r\n", pc_uart);
 8000764:	4905      	ldr	r1, [pc, #20]	; (800077c <ESP_Init+0x1b8>)
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <ESP_Init+0x204>)
 8000768:	f000 fc13 	bl	8000f92 <Uart_sendstring>

}
 800076c:	bf00      	nop
 800076e:	3760      	adds	r7, #96	; 0x60
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000b28 	.word	0x20000b28
 8000778:	0800a2f4 	.word	0x0800a2f4
 800077c:	20000ae4 	.word	0x20000ae4
 8000780:	0800a300 	.word	0x0800a300
 8000784:	0800a30c 	.word	0x0800a30c
 8000788:	0800a310 	.word	0x0800a310
 800078c:	0800a318 	.word	0x0800a318
 8000790:	0800a320 	.word	0x0800a320
 8000794:	0800a32c 	.word	0x0800a32c
 8000798:	0800a33c 	.word	0x0800a33c
 800079c:	0800a34c 	.word	0x0800a34c
 80007a0:	0800a370 	.word	0x0800a370
 80007a4:	0800a388 	.word	0x0800a388
 80007a8:	0800a39c 	.word	0x0800a39c
 80007ac:	0800a3a8 	.word	0x0800a3a8
 80007b0:	200000bc 	.word	0x200000bc
 80007b4:	0800a3b8 	.word	0x0800a3b8
 80007b8:	0800a3bc 	.word	0x0800a3bc
 80007bc:	0800a3cc 	.word	0x0800a3cc
 80007c0:	0800a3dc 	.word	0x0800a3dc
 80007c4:	0800a3ec 	.word	0x0800a3ec
 80007c8:	0800a400 	.word	0x0800a400

080007cc <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b098      	sub	sp, #96	; 0x60
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f7ff fd14 	bl	8000204 <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 80007e0:	f107 000c 	add.w	r0, r7, #12
 80007e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	491a      	ldr	r1, [pc, #104]	; (8000854 <Server_Send+0x88>)
 80007ea:	f008 ffc7 	bl	800977c <siprintf>
	Uart_sendstring(data, wifi_uart);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4919      	ldr	r1, [pc, #100]	; (8000858 <Server_Send+0x8c>)
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 fbcc 	bl	8000f92 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 80007fa:	bf00      	nop
 80007fc:	4916      	ldr	r1, [pc, #88]	; (8000858 <Server_Send+0x8c>)
 80007fe:	4817      	ldr	r0, [pc, #92]	; (800085c <Server_Send+0x90>)
 8000800:	f000 fc5c 	bl	80010bc <Wait_for>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d0f8      	beq.n	80007fc <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 800080a:	4913      	ldr	r1, [pc, #76]	; (8000858 <Server_Send+0x8c>)
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f000 fbc0 	bl	8000f92 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 8000812:	bf00      	nop
 8000814:	4910      	ldr	r1, [pc, #64]	; (8000858 <Server_Send+0x8c>)
 8000816:	4812      	ldr	r0, [pc, #72]	; (8000860 <Server_Send+0x94>)
 8000818:	f000 fc50 	bl	80010bc <Wait_for>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d0f8      	beq.n	8000814 <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	490f      	ldr	r1, [pc, #60]	; (8000864 <Server_Send+0x98>)
 8000828:	4618      	mov	r0, r3
 800082a:	f008 ffa7 	bl	800977c <siprintf>
	Uart_sendstring(data, wifi_uart);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4909      	ldr	r1, [pc, #36]	; (8000858 <Server_Send+0x8c>)
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fbac 	bl	8000f92 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 800083a:	bf00      	nop
 800083c:	4906      	ldr	r1, [pc, #24]	; (8000858 <Server_Send+0x8c>)
 800083e:	480a      	ldr	r0, [pc, #40]	; (8000868 <Server_Send+0x9c>)
 8000840:	f000 fc3c 	bl	80010bc <Wait_for>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0f8      	beq.n	800083c <Server_Send+0x70>
	return 1;
 800084a:	2301      	movs	r3, #1
}
 800084c:	4618      	mov	r0, r3
 800084e:	3760      	adds	r7, #96	; 0x60
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	0800a414 	.word	0x0800a414
 8000858:	20000b28 	.word	0x20000b28
 800085c:	0800a428 	.word	0x0800a428
 8000860:	0800a42c 	.word	0x0800a42c
 8000864:	0800a434 	.word	0x0800a434
 8000868:	0800a318 	.word	0x0800a318

0800086c <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000872:	af00      	add	r7, sp, #0
 8000874:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000878:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800087c:	6018      	str	r0, [r3, #0]
 800087e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000882:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000886:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 8000888:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800088c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	3304      	adds	r3, #4
 8000896:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f008 fe75 	bl	800958c <memset>
	if (!(strcmp (str, "/ledon")))
 80008a2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80008a6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80008aa:	493f      	ldr	r1, [pc, #252]	; (80009a8 <Server_Handle+0x13c>)
 80008ac:	6818      	ldr	r0, [r3, #0]
 80008ae:	f7ff fc9f 	bl	80001f0 <strcmp>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d122      	bne.n	80008fe <Server_Handle+0x92>
	{
		sprintf (datatosend, Basic_inclusion);
 80008b8:	4b3c      	ldr	r3, [pc, #240]	; (80009ac <Server_Handle+0x140>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f008 ff5a 	bl	800977c <siprintf>
		strcat(datatosend, LED_ON);
 80008c8:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <Server_Handle+0x144>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	4611      	mov	r1, r2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f008 ff72 	bl	80097bc <strcat>
		strcat(datatosend, Terminate);
 80008d8:	4b36      	ldr	r3, [pc, #216]	; (80009b4 <Server_Handle+0x148>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	f107 0308 	add.w	r3, r7, #8
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f008 ff6a 	bl	80097bc <strcat>
		Server_Send(datatosend, Link_ID);
 80008e8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80008ec:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80008f0:	f107 0208 	add.w	r2, r7, #8
 80008f4:	6819      	ldr	r1, [r3, #0]
 80008f6:	4610      	mov	r0, r2
 80008f8:	f7ff ff68 	bl	80007cc <Server_Send>
		strcat(datatosend, LED_OFF);
		strcat(datatosend, Terminate);
		Server_Send(datatosend, Link_ID);
	}

}
 80008fc:	e04f      	b.n	800099e <Server_Handle+0x132>
	else if (!(strcmp (str, "/ledoff")))
 80008fe:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000902:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000906:	492c      	ldr	r1, [pc, #176]	; (80009b8 <Server_Handle+0x14c>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	f7ff fc71 	bl	80001f0 <strcmp>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d122      	bne.n	800095a <Server_Handle+0xee>
		sprintf (datatosend, Basic_inclusion);
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <Server_Handle+0x140>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f008 ff2c 	bl	800977c <siprintf>
		strcat(datatosend, LED_OFF);
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <Server_Handle+0x150>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f008 ff44 	bl	80097bc <strcat>
		strcat(datatosend, Terminate);
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <Server_Handle+0x148>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f008 ff3c 	bl	80097bc <strcat>
		Server_Send(datatosend, Link_ID);
 8000944:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000948:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800094c:	f107 0208 	add.w	r2, r7, #8
 8000950:	6819      	ldr	r1, [r3, #0]
 8000952:	4610      	mov	r0, r2
 8000954:	f7ff ff3a 	bl	80007cc <Server_Send>
}
 8000958:	e021      	b.n	800099e <Server_Handle+0x132>
		sprintf (datatosend, Basic_inclusion);
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <Server_Handle+0x140>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f008 ff09 	bl	800977c <siprintf>
		strcat(datatosend, LED_OFF);
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <Server_Handle+0x150>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f008 ff21 	bl	80097bc <strcat>
		strcat(datatosend, Terminate);
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <Server_Handle+0x148>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f008 ff19 	bl	80097bc <strcat>
		Server_Send(datatosend, Link_ID);
 800098a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800098e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000992:	f107 0208 	add.w	r2, r7, #8
 8000996:	6819      	ldr	r1, [r3, #0]
 8000998:	4610      	mov	r0, r2
 800099a:	f7ff ff17 	bl	80007cc <Server_Send>
}
 800099e:	bf00      	nop
 80009a0:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	0800a444 	.word	0x0800a444
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000004 	.word	0x20000004
 80009b4:	2000000c 	.word	0x2000000c
 80009b8:	0800a44c 	.word	0x0800a44c
 80009bc:	20000008 	.word	0x20000008

080009c0 <Server_Start>:

void Server_Start (void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b092      	sub	sp, #72	; 0x48
 80009c4:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	223c      	movs	r2, #60	; 0x3c
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f008 fdda 	bl	800958c <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 80009d8:	bf00      	nop
 80009da:	1dfa      	adds	r2, r7, #7
 80009dc:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <Server_Start+0xd0>)
 80009de:	2101      	movs	r1, #1
 80009e0:	482c      	ldr	r0, [pc, #176]	; (8000a94 <Server_Start+0xd4>)
 80009e2:	f000 faa7 	bl	8000f34 <Get_after>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0f6      	beq.n	80009da <Server_Start+0x1a>
	Link_ID -= 48;
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	3b30      	subs	r3, #48	; 0x30
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 80009f4:	bf00      	nop
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	4a25      	ldr	r2, [pc, #148]	; (8000a90 <Server_Start+0xd0>)
 80009fc:	4619      	mov	r1, r3
 80009fe:	4826      	ldr	r0, [pc, #152]	; (8000a98 <Server_Start+0xd8>)
 8000a00:	f000 fade 	bl	8000fc0 <Copy_upto>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0f5      	beq.n	80009f6 <Server_Start+0x36>
	if (Look_for("/ledon", buftocopyinto) == 1)
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4822      	ldr	r0, [pc, #136]	; (8000a9c <Server_Start+0xdc>)
 8000a12:	f000 f8b8 	bl	8000b86 <Look_for>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d10b      	bne.n	8000a34 <Server_Start+0x74>
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a22:	481f      	ldr	r0, [pc, #124]	; (8000aa0 <Server_Start+0xe0>)
 8000a24:	f002 fa28 	bl	8002e78 <HAL_GPIO_WritePin>
		Server_Handle("/ledon",Link_ID);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	481b      	ldr	r0, [pc, #108]	; (8000a9c <Server_Start+0xdc>)
 8000a2e:	f7ff ff1d 	bl	800086c <Server_Handle>
	else
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
		Server_Handle("/ ", Link_ID);
	}
}
 8000a32:	e028      	b.n	8000a86 <Server_Start+0xc6>
	else if (Look_for("/ledoff", buftocopyinto) == 1)
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	4619      	mov	r1, r3
 8000a3a:	481a      	ldr	r0, [pc, #104]	; (8000aa4 <Server_Start+0xe4>)
 8000a3c:	f000 f8a3 	bl	8000b86 <Look_for>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d10b      	bne.n	8000a5e <Server_Start+0x9e>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a4c:	4814      	ldr	r0, [pc, #80]	; (8000aa0 <Server_Start+0xe0>)
 8000a4e:	f002 fa13 	bl	8002e78 <HAL_GPIO_WritePin>
		Server_Handle("/ledoff",Link_ID);
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	4619      	mov	r1, r3
 8000a56:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <Server_Start+0xe4>)
 8000a58:	f7ff ff08 	bl	800086c <Server_Handle>
}
 8000a5c:	e013      	b.n	8000a86 <Server_Start+0xc6>
	else if (Look_for("/favicon.ico", buftocopyinto) == 1);
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	4619      	mov	r1, r3
 8000a64:	4810      	ldr	r0, [pc, #64]	; (8000aa8 <Server_Start+0xe8>)
 8000a66:	f000 f88e 	bl	8000b86 <Look_for>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d00a      	beq.n	8000a86 <Server_Start+0xc6>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a76:	480a      	ldr	r0, [pc, #40]	; (8000aa0 <Server_Start+0xe0>)
 8000a78:	f002 f9fe 	bl	8002e78 <HAL_GPIO_WritePin>
		Server_Handle("/ ", Link_ID);
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480a      	ldr	r0, [pc, #40]	; (8000aac <Server_Start+0xec>)
 8000a82:	f7ff fef3 	bl	800086c <Server_Handle>
}
 8000a86:	bf00      	nop
 8000a88:	3748      	adds	r7, #72	; 0x48
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000b28 	.word	0x20000b28
 8000a94:	0800a454 	.word	0x0800a454
 8000a98:	0800a45c 	.word	0x0800a45c
 8000a9c:	0800a444 	.word	0x0800a444
 8000aa0:	40021800 	.word	0x40021800
 8000aa4:	0800a44c 	.word	0x0800a44c
 8000aa8:	0800a468 	.word	0x0800a468
 8000aac:	0800a478 	.word	0x0800a478

08000ab0 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <Ringbuf_init+0x68>)
 8000ab6:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <Ringbuf_init+0x6c>)
 8000ab8:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <Ringbuf_init+0x70>)
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <Ringbuf_init+0x74>)
 8000abe:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <Ringbuf_init+0x78>)
 8000ac2:	4a1a      	ldr	r2, [pc, #104]	; (8000b2c <Ringbuf_init+0x7c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <Ringbuf_init+0x80>)
 8000ac8:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <Ringbuf_init+0x84>)
 8000aca:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <Ringbuf_init+0x88>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	695a      	ldr	r2, [r3, #20]
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <Ringbuf_init+0x88>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f042 0201 	orr.w	r2, r2, #1
 8000ada:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <Ringbuf_init+0x8c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	695a      	ldr	r2, [r3, #20]
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <Ringbuf_init+0x8c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f042 0201 	orr.w	r2, r2, #1
 8000aea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <Ringbuf_init+0x88>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68da      	ldr	r2, [r3, #12]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <Ringbuf_init+0x88>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f042 0220 	orr.w	r2, r2, #32
 8000afa:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <Ringbuf_init+0x8c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	68da      	ldr	r2, [r3, #12]
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <Ringbuf_init+0x8c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f042 0220 	orr.w	r2, r2, #32
 8000b0a:	60da      	str	r2, [r3, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	200008f0 	.word	0x200008f0
 8000b1c:	200000d0 	.word	0x200000d0
 8000b20:	200008f4 	.word	0x200008f4
 8000b24:	200002d8 	.word	0x200002d8
 8000b28:	200008f8 	.word	0x200008f8
 8000b2c:	200004e0 	.word	0x200004e0
 8000b30:	200008fc 	.word	0x200008fc
 8000b34:	200006e8 	.word	0x200006e8
 8000b38:	20000b28 	.word	0x20000b28
 8000b3c:	20000ae4 	.word	0x20000ae4

08000b40 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b52:	3301      	adds	r3, #1
 8000b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b58:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d009      	beq.n	8000b7a <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	79f9      	ldrb	r1, [r7, #7]
 8000b70:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff fb37 	bl	8000204 <strlen>
 8000b96:	4603      	mov	r3, r0
 8000b98:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f7ff fb32 	bl	8000204 <strlen>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000bac:	e002      	b.n	8000bb4 <Look_for+0x2e>
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	6839      	ldr	r1, [r7, #0]
 8000bc0:	440b      	add	r3, r1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d1f2      	bne.n	8000bae <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	440b      	add	r3, r1
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d111      	bne.n	8000c00 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8000bdc:	e005      	b.n	8000bea <Look_for+0x64>
	{
		so_far++;
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
		indx++;
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	3301      	adds	r3, #1
 8000be8:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	6839      	ldr	r1, [r7, #0]
 8000bf6:	440b      	add	r3, r1
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d0ef      	beq.n	8000bde <Look_for+0x58>
 8000bfe:	e008      	b.n	8000c12 <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	dbcf      	blt.n	8000bac <Look_for+0x26>
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	e007      	b.n	8000c22 <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d101      	bne.n	8000c1e <Look_for+0x98>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e001      	b.n	8000c22 <Look_for+0x9c>
	else return -1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <Uart_flush>:
	}
}


void Uart_flush (UART_HandleTypeDef *uart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <Uart_flush+0x54>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d10c      	bne.n	8000c56 <Uart_flush+0x2a>
	{
		memset(_rx_buffer1->buffer,'\0', UART_BUFFER_SIZE);
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <Uart_flush+0x58>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f008 fca0 	bl	800958c <memset>
		_rx_buffer1->head = 0;
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <Uart_flush+0x58>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2200      	movs	r2, #0
 8000c52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	if (uart == pc_uart)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <Uart_flush+0x5c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d10c      	bne.n	8000c78 <Uart_flush+0x4c>
	{
		memset(_rx_buffer2->buffer,'\0', UART_BUFFER_SIZE);
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <Uart_flush+0x60>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f008 fc8f 	bl	800958c <memset>
		_rx_buffer2->head = 0;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <Uart_flush+0x60>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000b28 	.word	0x20000b28
 8000c84:	200008f0 	.word	0x200008f0
 8000c88:	20000ae4 	.word	0x20000ae4
 8000c8c:	200008f8 	.word	0x200008f8

08000c90 <Uart_peek>:


int Uart_peek(UART_HandleTypeDef *uart)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <Uart_peek+0x7c>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d114      	bne.n	8000cca <Uart_peek+0x3a>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <Uart_peek+0x80>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <Uart_peek+0x80>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d102      	bne.n	8000cba <Uart_peek+0x2a>
		  {
		    return -1;
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb8:	e022      	b.n	8000d00 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <Uart_peek+0x80>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <Uart_peek+0x80>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cc6:	5cd3      	ldrb	r3, [r2, r3]
 8000cc8:	e01a      	b.n	8000d00 <Uart_peek+0x70>
		  }
	}

	else if (uart == pc_uart)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a11      	ldr	r2, [pc, #68]	; (8000d14 <Uart_peek+0x84>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d114      	bne.n	8000cfc <Uart_peek+0x6c>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <Uart_peek+0x88>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <Uart_peek+0x88>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d102      	bne.n	8000cec <Uart_peek+0x5c>
		  {
		    return -1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e009      	b.n	8000d00 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000cec:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <Uart_peek+0x88>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <Uart_peek+0x88>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000cf8:	5cd3      	ldrb	r3, [r2, r3]
 8000cfa:	e001      	b.n	8000d00 <Uart_peek+0x70>
		  }
	}

	return -1;
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	20000b28 	.word	0x20000b28
 8000d10:	200008f0 	.word	0x200008f0
 8000d14:	20000ae4 	.word	0x20000ae4
 8000d18:	200008f8 	.word	0x200008f8

08000d1c <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a29      	ldr	r2, [pc, #164]	; (8000dcc <Uart_read+0xb0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d121      	bne.n	8000d70 <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000d2c:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <Uart_read+0xb4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d34:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <Uart_read+0xb4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d102      	bne.n	8000d46 <Uart_read+0x2a>
		  {
		    return -1;
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295
 8000d44:	e03c      	b.n	8000dc0 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000d46:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <Uart_read+0xb4>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <Uart_read+0xb4>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d52:	5cd3      	ldrb	r3, [r2, r3]
 8000d54:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <Uart_read+0xb4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <Uart_read+0xb4>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000d6c:	7bbb      	ldrb	r3, [r7, #14]
 8000d6e:	e027      	b.n	8000dc0 <Uart_read+0xa4>
		  }
	}

	else if (uart == pc_uart)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <Uart_read+0xb8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d121      	bne.n	8000dbc <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <Uart_read+0xbc>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <Uart_read+0xbc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d102      	bne.n	8000d92 <Uart_read+0x76>
		  {
		    return -1;
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d90:	e016      	b.n	8000dc0 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <Uart_read+0xbc>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <Uart_read+0xbc>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d9e:	5cd3      	ldrb	r3, [r2, r3]
 8000da0:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <Uart_read+0xbc>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <Uart_read+0xbc>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000db4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	e001      	b.n	8000dc0 <Uart_read+0xa4>
		  }
	}

	else return -1;
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	20000b28 	.word	0x20000b28
 8000dd0:	200008f0 	.word	0x200008f0
 8000dd4:	20000ae4 	.word	0x20000ae4
 8000dd8:	200008f8 	.word	0x200008f8

08000ddc <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db54      	blt.n	8000e96 <Uart_write+0xba>
	{
		if (uart == device_uart){
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	4a2d      	ldr	r2, [pc, #180]	; (8000ea4 <Uart_write+0xc8>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d126      	bne.n	8000e42 <Uart_write+0x66>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000df4:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <Uart_write+0xcc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e02:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8000e04:	bf00      	nop
 8000e06:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <Uart_write+0xcc>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d0f8      	beq.n	8000e06 <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <Uart_write+0xcc>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <Uart_write+0xcc>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	b2c9      	uxtb	r1, r1
 8000e24:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8000e26:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <Uart_write+0xcc>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <Uart_write+0xc8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <Uart_write+0xc8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e3e:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8000e40:	e029      	b.n	8000e96 <Uart_write+0xba>
		else if (uart == pc_uart){
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	4a19      	ldr	r2, [pc, #100]	; (8000eac <Uart_write+0xd0>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d125      	bne.n	8000e96 <Uart_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <Uart_write+0xd4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e52:	3301      	adds	r3, #1
 8000e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e58:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8000e5a:	bf00      	nop
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <Uart_write+0xd4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d0f8      	beq.n	8000e5c <Uart_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <Uart_write+0xd4>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <Uart_write+0xd4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	b2c9      	uxtb	r1, r1
 8000e7a:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <Uart_write+0xd4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <Uart_write+0xd0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <Uart_write+0xd0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e94:	60da      	str	r2, [r3, #12]
}
 8000e96:	bf00      	nop
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000b28 	.word	0x20000b28
 8000ea8:	200008f4 	.word	0x200008f4
 8000eac:	20000ae4 	.word	0x20000ae4
 8000eb0:	200008fc 	.word	0x200008fc

08000eb4 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a19      	ldr	r2, [pc, #100]	; (8000f24 <IsDataAvailable+0x70>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d111      	bne.n	8000ee8 <IsDataAvailable+0x34>
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <IsDataAvailable+0x74>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <IsDataAvailable+0x74>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ee6:	e017      	b.n	8000f18 <IsDataAvailable+0x64>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a10      	ldr	r2, [pc, #64]	; (8000f2c <IsDataAvailable+0x78>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d111      	bne.n	8000f14 <IsDataAvailable+0x60>
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <IsDataAvailable+0x7c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <IsDataAvailable+0x7c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f12:	e001      	b.n	8000f18 <IsDataAvailable+0x64>
	return -1;
 8000f14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	20000b28 	.word	0x20000b28
 8000f28:	200008f0 	.word	0x200008f0
 8000f2c:	20000ae4 	.word	0x20000ae4
 8000f30:	200008f8 	.word	0x200008f8

08000f34 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	460b      	mov	r3, r1
 8000f42:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8000f44:	bf00      	nop
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f000 f8b7 	bl	80010bc <Wait_for>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d1f8      	bne.n	8000f46 <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e012      	b.n	8000f80 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 8000f5a:	bf00      	nop
 8000f5c:	6838      	ldr	r0, [r7, #0]
 8000f5e:	f7ff ffa9 	bl	8000eb4 <IsDataAvailable>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f9      	beq.n	8000f5c <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8000f68:	6838      	ldr	r0, [r7, #0]
 8000f6a:	f7ff fed7 	bl	8000d1c <Uart_read>
 8000f6e:	4601      	mov	r1, r0
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	b2ca      	uxtb	r2, r1
 8000f78:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	7afb      	ldrb	r3, [r7, #11]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbe8      	blt.n	8000f5a <Get_after+0x26>
	}
	return 1;
 8000f88:	2301      	movs	r3, #1
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8000f9c:	e007      	b.n	8000fae <Uart_sendstring+0x1c>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	1c5a      	adds	r2, r3, #1
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	6839      	ldr	r1, [r7, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff17 	bl	8000ddc <Uart_write>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f3      	bne.n	8000f9e <Uart_sendstring+0xc>
}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f7ff f917 	bl	8000204 <strlen>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8000fde:	bf00      	nop
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff67 	bl	8000eb4 <IsDataAvailable>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0f9      	beq.n	8000fe0 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8000fec:	e01f      	b.n	800102e <Copy_upto+0x6e>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <Copy_upto+0xf8>)
 8000ff0:	6819      	ldr	r1, [r3, #0]
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <Copy_upto+0xf8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	68b8      	ldr	r0, [r7, #8]
 8000ffe:	4403      	add	r3, r0
 8001000:	5c8a      	ldrb	r2, [r1, r2]
 8001002:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001004:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <Copy_upto+0xf8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	4b2a      	ldr	r3, [pc, #168]	; (80010b8 <Copy_upto+0xf8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001016:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	3301      	adds	r3, #1
 800101e:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8001020:	bf00      	nop
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff46 	bl	8000eb4 <IsDataAvailable>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f9      	beq.n	8001022 <Copy_upto+0x62>
	while (Uart_peek(uart) != string[so_far])
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fe2e 	bl	8000c90 <Uart_peek>
 8001034:	4601      	mov	r1, r0
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	4299      	cmp	r1, r3
 8001040:	d1d5      	bne.n	8000fee <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8001042:	e01b      	b.n	800107c <Copy_upto+0xbc>
	{
		so_far++;
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	3301      	adds	r3, #1
 8001048:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff fe66 	bl	8000d1c <Uart_read>
 8001050:	4601      	mov	r1, r0
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	61ba      	str	r2, [r7, #24]
 8001058:	461a      	mov	r2, r3
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	4413      	add	r3, r2
 800105e:	b2ca      	uxtb	r2, r1
 8001060:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001062:	69fa      	ldr	r2, [r7, #28]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	429a      	cmp	r2, r3
 8001068:	d101      	bne.n	800106e <Copy_upto+0xae>
 800106a:	2301      	movs	r3, #1
 800106c:	e01f      	b.n	80010ae <Copy_upto+0xee>
		while (!IsDataAvailable(uart));
 800106e:	bf00      	nop
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff1f 	bl	8000eb4 <IsDataAvailable>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f9      	beq.n	8001070 <Copy_upto+0xb0>
	while (Uart_peek(uart) == string [so_far])
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff fe07 	bl	8000c90 <Uart_peek>
 8001082:	4601      	mov	r1, r0
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4299      	cmp	r1, r3
 800108e:	d0d9      	beq.n	8001044 <Copy_upto+0x84>
	}

	if (so_far != len)
 8001090:	69fa      	ldr	r2, [r7, #28]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	d002      	beq.n	800109e <Copy_upto+0xde>
	{
		so_far = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
		goto again;
 800109c:	e79f      	b.n	8000fde <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d101      	bne.n	80010aa <Copy_upto+0xea>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e001      	b.n	80010ae <Copy_upto+0xee>
	else return -1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295

}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200008f0 	.word	0x200008f0

080010bc <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff f89a 	bl	8000204 <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 80010d4:	bf00      	nop
 80010d6:	6838      	ldr	r0, [r7, #0]
 80010d8:	f7ff feec 	bl	8000eb4 <IsDataAvailable>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0f9      	beq.n	80010d6 <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 80010e2:	6838      	ldr	r0, [r7, #0]
 80010e4:	f7ff fdd4 	bl	8000c90 <Uart_peek>
 80010e8:	4601      	mov	r1, r0
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	4413      	add	r3, r2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4299      	cmp	r1, r3
 80010f4:	d01e      	beq.n	8001134 <Wait_for+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 80010f6:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <Wait_for+0xb4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <Wait_for+0xb4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001108:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 800110c:	e7e2      	b.n	80010d4 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	3301      	adds	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8001114:	6838      	ldr	r0, [r7, #0]
 8001116:	f7ff fe01 	bl	8000d1c <Uart_read>
		if (so_far == len) return 1;
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	429a      	cmp	r2, r3
 8001120:	d101      	bne.n	8001126 <Wait_for+0x6a>
 8001122:	2301      	movs	r3, #1
 8001124:	e01f      	b.n	8001166 <Wait_for+0xaa>
		while (!IsDataAvailable(uart));
 8001126:	bf00      	nop
 8001128:	6838      	ldr	r0, [r7, #0]
 800112a:	f7ff fec3 	bl	8000eb4 <IsDataAvailable>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f9      	beq.n	8001128 <Wait_for+0x6c>
	while (Uart_peek(uart) == string [so_far])
 8001134:	6838      	ldr	r0, [r7, #0]
 8001136:	f7ff fdab 	bl	8000c90 <Uart_peek>
 800113a:	4601      	mov	r1, r0
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4299      	cmp	r1, r3
 8001146:	d0e2      	beq.n	800110e <Wait_for+0x52>
	}

	if (so_far != len)
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	429a      	cmp	r2, r3
 800114e:	d002      	beq.n	8001156 <Wait_for+0x9a>
	{
		so_far = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8001154:	e7be      	b.n	80010d4 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	429a      	cmp	r2, r3
 800115c:	d101      	bne.n	8001162 <Wait_for+0xa6>
 800115e:	2301      	movs	r3, #1
 8001160:	e001      	b.n	8001166 <Wait_for+0xaa>
	else return -1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200008f0 	.word	0x200008f0

08001174 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	2b00      	cmp	r3, #0
 8001194:	d023      	beq.n	80011de <Uart_isr+0x6a>
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d01e      	beq.n	80011de <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a3f      	ldr	r2, [pc, #252]	; (80012b0 <Uart_isr+0x13c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d107      	bne.n	80011c6 <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 80011b6:	4b3f      	ldr	r3, [pc, #252]	; (80012b4 <Uart_isr+0x140>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fcbe 	bl	8000b40 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 80011c4:	e06d      	b.n	80012a2 <Uart_isr+0x12e>
        else if (huart == pc_uart)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a3b      	ldr	r2, [pc, #236]	; (80012b8 <Uart_isr+0x144>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d169      	bne.n	80012a2 <Uart_isr+0x12e>
           	store_char (c, _rx_buffer2);  // store data in buffer
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <Uart_isr+0x148>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fcb2 	bl	8000b40 <store_char>
        return;
 80011dc:	e061      	b.n	80012a2 <Uart_isr+0x12e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d05f      	beq.n	80012a8 <Uart_isr+0x134>
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d05a      	beq.n	80012a8 <Uart_isr+0x134>
    {
    	if (huart == device_uart){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a2e      	ldr	r2, [pc, #184]	; (80012b0 <Uart_isr+0x13c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d127      	bne.n	800124a <Uart_isr+0xd6>
    	if(tx_buffer1.head == tx_buffer1.tail)
 80011fa:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <Uart_isr+0x14c>)
 80011fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <Uart_isr+0x14c>)
 8001202:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001206:	429a      	cmp	r2, r3
 8001208:	d108      	bne.n	800121c <Uart_isr+0xa8>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001218:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 800121a:	e044      	b.n	80012a6 <Uart_isr+0x132>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <Uart_isr+0x14c>)
 800121e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001222:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <Uart_isr+0x14c>)
 8001224:	5cd3      	ldrb	r3, [r2, r3]
 8001226:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <Uart_isr+0x14c>)
 800122a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800122e:	3301      	adds	r3, #1
 8001230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001234:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <Uart_isr+0x14c>)
 8001236:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	7b7a      	ldrb	r2, [r7, #13]
 8001246:	605a      	str	r2, [r3, #4]
    	return;
 8001248:	e02d      	b.n	80012a6 <Uart_isr+0x132>
    	else if (huart == pc_uart){
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a1a      	ldr	r2, [pc, #104]	; (80012b8 <Uart_isr+0x144>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d129      	bne.n	80012a6 <Uart_isr+0x132>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <Uart_isr+0x150>)
 8001254:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <Uart_isr+0x150>)
 800125a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800125e:	429a      	cmp	r2, r3
 8001260:	d108      	bne.n	8001274 <Uart_isr+0x100>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001270:	60da      	str	r2, [r3, #12]
    	return;
 8001272:	e018      	b.n	80012a6 <Uart_isr+0x132>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <Uart_isr+0x150>)
 8001276:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <Uart_isr+0x150>)
 800127c:	5cd3      	ldrb	r3, [r2, r3]
 800127e:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <Uart_isr+0x150>)
 8001282:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001286:	3301      	adds	r3, #1
 8001288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <Uart_isr+0x150>)
 800128e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	7bba      	ldrb	r2, [r7, #14]
 800129e:	605a      	str	r2, [r3, #4]
    	return;
 80012a0:	e001      	b.n	80012a6 <Uart_isr+0x132>
        return;
 80012a2:	bf00      	nop
 80012a4:	e000      	b.n	80012a8 <Uart_isr+0x134>
    	return;
 80012a6:	bf00      	nop
    }
}
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000b28 	.word	0x20000b28
 80012b4:	200008f0 	.word	0x200008f0
 80012b8:	20000ae4 	.word	0x20000ae4
 80012bc:	200008f8 	.word	0x200008f8
 80012c0:	200002d8 	.word	0x200002d8
 80012c4:	200006e8 	.word	0x200006e8

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012cc:	f001 f8d8 	bl	8002480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d0:	f000 f81e 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d4:	f000 fab6 	bl	8001844 <MX_GPIO_Init>
  MX_CRC_Init();
 80012d8:	f000 f884 	bl	80013e4 <MX_CRC_Init>
  MX_DMA2D_Init();
 80012dc:	f000 f896 	bl	800140c <MX_DMA2D_Init>
  MX_FMC_Init();
 80012e0:	f000 fa60 	bl	80017a4 <MX_FMC_Init>
  MX_I2C3_Init();
 80012e4:	f000 f8c4 	bl	8001470 <MX_I2C3_Init>
  MX_LTDC_Init();
 80012e8:	f000 f902 	bl	80014f0 <MX_LTDC_Init>
  MX_SPI5_Init();
 80012ec:	f000 f980 	bl	80015f0 <MX_SPI5_Init>
  MX_TIM1_Init();
 80012f0:	f000 f9b4 	bl	800165c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80012f4:	f000 fa02 	bl	80016fc <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80012f8:	f007 fe58 	bl	8008fac <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80012fc:	f000 fa28 	bl	8001750 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  Ringbuf_init();

  ESP_Init(0,0);
 8001300:	2100      	movs	r1, #0
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff f95e 	bl	80005c4 <ESP_Init>
//		Uart_write(data, pc_uart);
//	}


    /* USER CODE END WHILE */
	  Server_Start();
 8001308:	f7ff fb5a 	bl	80009c0 <Server_Start>
 800130c:	e7fc      	b.n	8001308 <main+0x40>
	...

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b094      	sub	sp, #80	; 0x50
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0320 	add.w	r3, r7, #32
 800131a:	2230      	movs	r2, #48	; 0x30
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f008 f934 	bl	800958c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <SystemClock_Config+0xcc>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	4a27      	ldr	r2, [pc, #156]	; (80013dc <SystemClock_Config+0xcc>)
 800133e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001342:	6413      	str	r3, [r2, #64]	; 0x40
 8001344:	4b25      	ldr	r3, [pc, #148]	; (80013dc <SystemClock_Config+0xcc>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001350:	2300      	movs	r3, #0
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <SystemClock_Config+0xd0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800135c:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <SystemClock_Config+0xd0>)
 800135e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <SystemClock_Config+0xd0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001370:	2301      	movs	r3, #1
 8001372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800137a:	2302      	movs	r3, #2
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800137e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001382:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001384:	2304      	movs	r3, #4
 8001386:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001388:	2348      	movs	r3, #72	; 0x48
 800138a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800138c:	2302      	movs	r3, #2
 800138e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001390:	2303      	movs	r3, #3
 8001392:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	4618      	mov	r0, r3
 800139a:	f003 fe9d 	bl	80050d8 <HAL_RCC_OscConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013a4:	f000 fb70 	bl	8001a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a8:	230f      	movs	r3, #15
 80013aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ac:	2302      	movs	r3, #2
 80013ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2102      	movs	r1, #2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f004 f8ff 	bl	80055c8 <HAL_RCC_ClockConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013d0:	f000 fb5a 	bl	8001a88 <Error_Handler>
  }
}
 80013d4:	bf00      	nop
 80013d6:	3750      	adds	r7, #80	; 0x50
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40007000 	.word	0x40007000

080013e4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_CRC_Init+0x20>)
 80013ea:	4a07      	ldr	r2, [pc, #28]	; (8001408 <MX_CRC_Init+0x24>)
 80013ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_CRC_Init+0x20>)
 80013f0:	f001 f98e 	bl	8002710 <HAL_CRC_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80013fa:	f000 fb45 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000900 	.word	0x20000900
 8001408:	40023000 	.word	0x40023000

0800140c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <MX_DMA2D_Init+0x5c>)
 8001412:	4a16      	ldr	r2, [pc, #88]	; (800146c <MX_DMA2D_Init+0x60>)
 8001414:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_DMA2D_Init+0x5c>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_DMA2D_Init+0x5c>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_DMA2D_Init+0x5c>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_DMA2D_Init+0x5c>)
 800142a:	2200      	movs	r2, #0
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_DMA2D_Init+0x5c>)
 8001430:	2200      	movs	r2, #0
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_DMA2D_Init+0x5c>)
 8001436:	2200      	movs	r2, #0
 8001438:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <MX_DMA2D_Init+0x5c>)
 800143c:	2200      	movs	r2, #0
 800143e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001440:	4809      	ldr	r0, [pc, #36]	; (8001468 <MX_DMA2D_Init+0x5c>)
 8001442:	f001 f981 	bl	8002748 <HAL_DMA2D_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800144c:	f000 fb1c 	bl	8001a88 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001450:	2101      	movs	r1, #1
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_DMA2D_Init+0x5c>)
 8001454:	f001 fad2 	bl	80029fc <HAL_DMA2D_ConfigLayer>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800145e:	f000 fb13 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000908 	.word	0x20000908
 800146c:	4002b000 	.word	0x4002b000

08001470 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MX_I2C3_Init+0x74>)
 8001476:	4a1c      	ldr	r2, [pc, #112]	; (80014e8 <MX_I2C3_Init+0x78>)
 8001478:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_I2C3_Init+0x74>)
 800147c:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <MX_I2C3_Init+0x7c>)
 800147e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <MX_I2C3_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_I2C3_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <MX_I2C3_Init+0x74>)
 800148e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001492:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_I2C3_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <MX_I2C3_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <MX_I2C3_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_I2C3_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_I2C3_Init+0x74>)
 80014ae:	f003 f8eb 	bl	8004688 <HAL_I2C_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014b8:	f000 fae6 	bl	8001a88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014bc:	2100      	movs	r1, #0
 80014be:	4809      	ldr	r0, [pc, #36]	; (80014e4 <MX_I2C3_Init+0x74>)
 80014c0:	f003 fa26 	bl	8004910 <HAL_I2CEx_ConfigAnalogFilter>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80014ca:	f000 fadd 	bl	8001a88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014ce:	2100      	movs	r1, #0
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_I2C3_Init+0x74>)
 80014d2:	f003 fa59 	bl	8004988 <HAL_I2CEx_ConfigDigitalFilter>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80014dc:	f000 fad4 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000948 	.word	0x20000948
 80014e8:	40005c00 	.word	0x40005c00
 80014ec:	000186a0 	.word	0x000186a0

080014f0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	; 0x38
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2234      	movs	r2, #52	; 0x34
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f008 f845 	bl	800958c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001502:	4b39      	ldr	r3, [pc, #228]	; (80015e8 <MX_LTDC_Init+0xf8>)
 8001504:	4a39      	ldr	r2, [pc, #228]	; (80015ec <MX_LTDC_Init+0xfc>)
 8001506:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001508:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <MX_LTDC_Init+0xf8>)
 800150a:	2200      	movs	r2, #0
 800150c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800150e:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <MX_LTDC_Init+0xf8>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001514:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <MX_LTDC_Init+0xf8>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800151a:	4b33      	ldr	r3, [pc, #204]	; (80015e8 <MX_LTDC_Init+0xf8>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001520:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <MX_LTDC_Init+0xf8>)
 8001522:	2209      	movs	r2, #9
 8001524:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001526:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <MX_LTDC_Init+0xf8>)
 8001528:	2201      	movs	r2, #1
 800152a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800152c:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <MX_LTDC_Init+0xf8>)
 800152e:	221d      	movs	r2, #29
 8001530:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001532:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <MX_LTDC_Init+0xf8>)
 8001534:	2203      	movs	r2, #3
 8001536:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <MX_LTDC_Init+0xf8>)
 800153a:	f240 120d 	movw	r2, #269	; 0x10d
 800153e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001540:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <MX_LTDC_Init+0xf8>)
 8001542:	f240 1243 	movw	r2, #323	; 0x143
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001548:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <MX_LTDC_Init+0xf8>)
 800154a:	f240 1217 	movw	r2, #279	; 0x117
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <MX_LTDC_Init+0xf8>)
 8001552:	f240 1247 	movw	r2, #327	; 0x147
 8001556:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001558:	4b23      	ldr	r3, [pc, #140]	; (80015e8 <MX_LTDC_Init+0xf8>)
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <MX_LTDC_Init+0xf8>)
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <MX_LTDC_Init+0xf8>)
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001570:	481d      	ldr	r0, [pc, #116]	; (80015e8 <MX_LTDC_Init+0xf8>)
 8001572:	f003 fa49 	bl	8004a08 <HAL_LTDC_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800157c:	f000 fa84 	bl	8001a88 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001584:	23f0      	movs	r3, #240	; 0xf0
 8001586:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800158c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001590:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001592:	2302      	movs	r3, #2
 8001594:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001596:	23ff      	movs	r3, #255	; 0xff
 8001598:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800159e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015a2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80015a4:	2307      	movs	r3, #7
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80015a8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80015ae:	23f0      	movs	r3, #240	; 0xf0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80015b2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_LTDC_Init+0xf8>)
 80015d2:	f003 fbab 	bl	8004d2c <HAL_LTDC_ConfigLayer>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80015dc:	f000 fa54 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	3738      	adds	r7, #56	; 0x38
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000099c 	.word	0x2000099c
 80015ec:	40016800 	.word	0x40016800

080015f0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <MX_SPI5_Init+0x64>)
 80015f6:	4a18      	ldr	r2, [pc, #96]	; (8001658 <MX_SPI5_Init+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_SPI5_Init+0x64>)
 80015fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001600:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_SPI5_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_SPI5_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_SPI5_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_SPI5_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_SPI5_Init+0x64>)
 800161c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001620:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_SPI5_Init+0x64>)
 8001624:	2218      	movs	r2, #24
 8001626:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <MX_SPI5_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_SPI5_Init+0x64>)
 8001630:	2200      	movs	r2, #0
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <MX_SPI5_Init+0x64>)
 8001636:	2200      	movs	r2, #0
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_SPI5_Init+0x64>)
 800163c:	220a      	movs	r2, #10
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_SPI5_Init+0x64>)
 8001642:	f004 fc07 	bl	8005e54 <HAL_SPI_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800164c:	f000 fa1c 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000a44 	.word	0x20000a44
 8001658:	40015000 	.word	0x40015000

0800165c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	463b      	mov	r3, r7
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001678:	4b1e      	ldr	r3, [pc, #120]	; (80016f4 <MX_TIM1_Init+0x98>)
 800167a:	4a1f      	ldr	r2, [pc, #124]	; (80016f8 <MX_TIM1_Init+0x9c>)
 800167c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800167e:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <MX_TIM1_Init+0x98>)
 8001680:	2200      	movs	r2, #0
 8001682:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <MX_TIM1_Init+0x98>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_TIM1_Init+0x98>)
 800168c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001690:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_TIM1_Init+0x98>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <MX_TIM1_Init+0x98>)
 800169a:	2200      	movs	r2, #0
 800169c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_TIM1_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016a4:	4813      	ldr	r0, [pc, #76]	; (80016f4 <MX_TIM1_Init+0x98>)
 80016a6:	f004 fc5e 	bl	8005f66 <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016b0:	f000 f9ea 	bl	8001a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016ba:	f107 0308 	add.w	r3, r7, #8
 80016be:	4619      	mov	r1, r3
 80016c0:	480c      	ldr	r0, [pc, #48]	; (80016f4 <MX_TIM1_Init+0x98>)
 80016c2:	f004 fe17 	bl	80062f4 <HAL_TIM_ConfigClockSource>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016cc:	f000 f9dc 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016d8:	463b      	mov	r3, r7
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_TIM1_Init+0x98>)
 80016de:	f005 f833 	bl	8006748 <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016e8:	f000 f9ce 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000a9c 	.word	0x20000a9c
 80016f8:	40010000 	.word	0x40010000

080016fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <MX_USART1_UART_Init+0x50>)
 8001704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800170c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USART1_UART_Init+0x4c>)
 8001734:	f005 f898 	bl	8006868 <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800173e:	f000 f9a3 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000ae4 	.word	0x20000ae4
 800174c:	40011000 	.word	0x40011000

08001750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_USART2_UART_Init+0x4c>)
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <MX_USART2_UART_Init+0x50>)
 8001758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <MX_USART2_UART_Init+0x4c>)
 800175c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_USART2_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_USART2_UART_Init+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_USART2_UART_Init+0x4c>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_USART2_UART_Init+0x4c>)
 8001776:	220c      	movs	r2, #12
 8001778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <MX_USART2_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_USART2_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_USART2_UART_Init+0x4c>)
 8001788:	f005 f86e 	bl	8006868 <HAL_UART_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001792:	f000 f979 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000b28 	.word	0x20000b28
 80017a0:	40004400 	.word	0x40004400

080017a4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
 80017b8:	615a      	str	r2, [r3, #20]
 80017ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <MX_FMC_Init+0x98>)
 80017be:	4a20      	ldr	r2, [pc, #128]	; (8001840 <MX_FMC_Init+0x9c>)
 80017c0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <MX_FMC_Init+0x98>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80017c8:	4b1c      	ldr	r3, [pc, #112]	; (800183c <MX_FMC_Init+0x98>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80017ce:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_FMC_Init+0x98>)
 80017d0:	2204      	movs	r2, #4
 80017d2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <MX_FMC_Init+0x98>)
 80017d6:	2210      	movs	r2, #16
 80017d8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_FMC_Init+0x98>)
 80017dc:	2240      	movs	r2, #64	; 0x40
 80017de:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <MX_FMC_Init+0x98>)
 80017e2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80017e6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_FMC_Init+0x98>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_FMC_Init+0x98>)
 80017f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017f4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_FMC_Init+0x98>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_FMC_Init+0x98>)
 80017fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001802:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001804:	2302      	movs	r3, #2
 8001806:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001808:	2307      	movs	r3, #7
 800180a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800180c:	2304      	movs	r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001810:	2307      	movs	r3, #7
 8001812:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001814:	2303      	movs	r3, #3
 8001816:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800181c:	2302      	movs	r3, #2
 800181e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_FMC_Init+0x98>)
 8001826:	f004 fae1 	bl	8005dec <HAL_SDRAM_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001830:	f000 f92a 	bl	8001a88 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001834:	bf00      	nop
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000b6c 	.word	0x20000b6c
 8001840:	a0000140 	.word	0xa0000140

08001844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08e      	sub	sp, #56	; 0x38
 8001848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
 800185e:	4b7b      	ldr	r3, [pc, #492]	; (8001a4c <MX_GPIO_Init+0x208>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a7a      	ldr	r2, [pc, #488]	; (8001a4c <MX_GPIO_Init+0x208>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b78      	ldr	r3, [pc, #480]	; (8001a4c <MX_GPIO_Init+0x208>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	623b      	str	r3, [r7, #32]
 8001874:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	4b74      	ldr	r3, [pc, #464]	; (8001a4c <MX_GPIO_Init+0x208>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a73      	ldr	r2, [pc, #460]	; (8001a4c <MX_GPIO_Init+0x208>)
 8001880:	f043 0320 	orr.w	r3, r3, #32
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b71      	ldr	r3, [pc, #452]	; (8001a4c <MX_GPIO_Init+0x208>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	4b6d      	ldr	r3, [pc, #436]	; (8001a4c <MX_GPIO_Init+0x208>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a6c      	ldr	r2, [pc, #432]	; (8001a4c <MX_GPIO_Init+0x208>)
 800189c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b6a      	ldr	r3, [pc, #424]	; (8001a4c <MX_GPIO_Init+0x208>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018aa:	61bb      	str	r3, [r7, #24]
 80018ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	4b66      	ldr	r3, [pc, #408]	; (8001a4c <MX_GPIO_Init+0x208>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a65      	ldr	r2, [pc, #404]	; (8001a4c <MX_GPIO_Init+0x208>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b63      	ldr	r3, [pc, #396]	; (8001a4c <MX_GPIO_Init+0x208>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <MX_GPIO_Init+0x208>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a5e      	ldr	r2, [pc, #376]	; (8001a4c <MX_GPIO_Init+0x208>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b5c      	ldr	r3, [pc, #368]	; (8001a4c <MX_GPIO_Init+0x208>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b58      	ldr	r3, [pc, #352]	; (8001a4c <MX_GPIO_Init+0x208>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a57      	ldr	r2, [pc, #348]	; (8001a4c <MX_GPIO_Init+0x208>)
 80018f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b55      	ldr	r3, [pc, #340]	; (8001a4c <MX_GPIO_Init+0x208>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b51      	ldr	r3, [pc, #324]	; (8001a4c <MX_GPIO_Init+0x208>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a50      	ldr	r2, [pc, #320]	; (8001a4c <MX_GPIO_Init+0x208>)
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b4e      	ldr	r3, [pc, #312]	; (8001a4c <MX_GPIO_Init+0x208>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <MX_GPIO_Init+0x208>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a49      	ldr	r2, [pc, #292]	; (8001a4c <MX_GPIO_Init+0x208>)
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <MX_GPIO_Init+0x208>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	2116      	movs	r1, #22
 800193e:	4844      	ldr	r0, [pc, #272]	; (8001a50 <MX_GPIO_Init+0x20c>)
 8001940:	f001 fa9a 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	4842      	ldr	r0, [pc, #264]	; (8001a54 <MX_GPIO_Init+0x210>)
 800194a:	f001 fa95 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001954:	4840      	ldr	r0, [pc, #256]	; (8001a58 <MX_GPIO_Init+0x214>)
 8001956:	f001 fa8f 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001960:	483e      	ldr	r0, [pc, #248]	; (8001a5c <MX_GPIO_Init+0x218>)
 8001962:	f001 fa89 	bl	8002e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001966:	2316      	movs	r3, #22
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197a:	4619      	mov	r1, r3
 800197c:	4834      	ldr	r0, [pc, #208]	; (8001a50 <MX_GPIO_Init+0x20c>)
 800197e:	f001 f8cf 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001982:	f248 0307 	movw	r3, #32775	; 0x8007
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001988:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800198c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001996:	4619      	mov	r1, r3
 8001998:	482e      	ldr	r0, [pc, #184]	; (8001a54 <MX_GPIO_Init+0x210>)
 800199a:	f001 f8c1 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b2:	4619      	mov	r1, r3
 80019b4:	4827      	ldr	r0, [pc, #156]	; (8001a54 <MX_GPIO_Init+0x210>)
 80019b6:	f001 f8b3 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80019ba:	2320      	movs	r3, #32
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	4619      	mov	r1, r3
 80019ce:	4820      	ldr	r0, [pc, #128]	; (8001a50 <MX_GPIO_Init+0x20c>)
 80019d0:	f001 f8a6 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80019d4:	2304      	movs	r3, #4
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d8:	2300      	movs	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e4:	4619      	mov	r1, r3
 80019e6:	481e      	ldr	r0, [pc, #120]	; (8001a60 <MX_GPIO_Init+0x21c>)
 80019e8:	f001 f89a 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80019ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fe:	4619      	mov	r1, r3
 8001a00:	4815      	ldr	r0, [pc, #84]	; (8001a58 <MX_GPIO_Init+0x214>)
 8001a02:	f001 f88d 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001a06:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480e      	ldr	r0, [pc, #56]	; (8001a58 <MX_GPIO_Init+0x214>)
 8001a20:	f001 f87e 	bl	8002b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001a24:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4807      	ldr	r0, [pc, #28]	; (8001a5c <MX_GPIO_Init+0x218>)
 8001a3e:	f001 f86f 	bl	8002b20 <HAL_GPIO_Init>

}
 8001a42:	bf00      	nop
 8001a44:	3738      	adds	r7, #56	; 0x38
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40020c00 	.word	0x40020c00
 8001a5c:	40021800 	.word	0x40021800
 8001a60:	40020400 	.word	0x40020400

08001a64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a76:	f000 fd25 	bl	80024c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40001000 	.word	0x40001000

08001a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <Error_Handler+0x8>
	...

08001a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <HAL_MspInit+0x4c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <HAL_MspInit+0x4c>)
 8001aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <HAL_MspInit+0x4c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_MspInit+0x4c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <HAL_MspInit+0x4c>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_MspInit+0x4c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0b      	ldr	r2, [pc, #44]	; (8001b20 <HAL_CRC_MspInit+0x3c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10d      	bne.n	8001b12 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_CRC_MspInit+0x40>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_CRC_MspInit+0x40>)
 8001b00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_CRC_MspInit+0x40>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40023000 	.word	0x40023000
 8001b24:	40023800 	.word	0x40023800

08001b28 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <HAL_DMA2D_MspInit+0x48>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d115      	bne.n	8001b66 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_DMA2D_MspInit+0x4c>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a0c      	ldr	r2, [pc, #48]	; (8001b74 <HAL_DMA2D_MspInit+0x4c>)
 8001b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_DMA2D_MspInit+0x4c>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2105      	movs	r1, #5
 8001b5a:	205a      	movs	r0, #90	; 0x5a
 8001b5c:	f000 fdae 	bl	80026bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001b60:	205a      	movs	r0, #90	; 0x5a
 8001b62:	f000 fdc7 	bl	80026f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	4002b000 	.word	0x4002b000
 8001b74:	40023800 	.word	0x40023800

08001b78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a29      	ldr	r2, [pc, #164]	; (8001c3c <HAL_I2C_MspInit+0xc4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d14b      	bne.n	8001c32 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <HAL_I2C_MspInit+0xc8>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a27      	ldr	r2, [pc, #156]	; (8001c40 <HAL_I2C_MspInit+0xc8>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <HAL_I2C_MspInit+0xc8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <HAL_I2C_MspInit+0xc8>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <HAL_I2C_MspInit+0xc8>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <HAL_I2C_MspInit+0xc8>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd8:	2312      	movs	r3, #18
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001be4:	2304      	movs	r3, #4
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4815      	ldr	r0, [pc, #84]	; (8001c44 <HAL_I2C_MspInit+0xcc>)
 8001bf0:	f000 ff96 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfa:	2312      	movs	r3, #18
 8001bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c06:	2304      	movs	r3, #4
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480d      	ldr	r0, [pc, #52]	; (8001c48 <HAL_I2C_MspInit+0xd0>)
 8001c12:	f000 ff85 	bl	8002b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_I2C_MspInit+0xc8>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_I2C_MspInit+0xc8>)
 8001c20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_I2C_MspInit+0xc8>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c32:	bf00      	nop
 8001c34:	3728      	adds	r7, #40	; 0x28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40005c00 	.word	0x40005c00
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020000 	.word	0x40020000

08001c4c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b09a      	sub	sp, #104	; 0x68
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	2230      	movs	r2, #48	; 0x30
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f007 fc8d 	bl	800958c <memset>
  if(hltdc->Instance==LTDC)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a85      	ldr	r2, [pc, #532]	; (8001e8c <HAL_LTDC_MspInit+0x240>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	f040 8102 	bne.w	8001e82 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c7e:	2308      	movs	r3, #8
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001c82:	2332      	movs	r3, #50	; 0x32
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001c86:	2302      	movs	r3, #2
 8001c88:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 feea 	bl	8005a6c <HAL_RCCEx_PeriphCLKConfig>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001c9e:	f7ff fef3 	bl	8001a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
 8001ca6:	4b7a      	ldr	r3, [pc, #488]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a79      	ldr	r2, [pc, #484]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001cac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b77      	ldr	r3, [pc, #476]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cba:	623b      	str	r3, [r7, #32]
 8001cbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a72      	ldr	r2, [pc, #456]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001cc8:	f043 0320 	orr.w	r3, r3, #32
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b70      	ldr	r3, [pc, #448]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	4b6c      	ldr	r3, [pc, #432]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a6b      	ldr	r2, [pc, #428]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b69      	ldr	r3, [pc, #420]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	4b65      	ldr	r3, [pc, #404]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a64      	ldr	r2, [pc, #400]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b62      	ldr	r3, [pc, #392]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b5e      	ldr	r3, [pc, #376]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a5d      	ldr	r2, [pc, #372]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b5b      	ldr	r3, [pc, #364]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a56      	ldr	r2, [pc, #344]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001d38:	f043 0304 	orr.w	r3, r3, #4
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b54      	ldr	r3, [pc, #336]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b50      	ldr	r3, [pc, #320]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a4f      	ldr	r2, [pc, #316]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b4d      	ldr	r3, [pc, #308]	; (8001e90 <HAL_LTDC_MspInit+0x244>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d78:	230e      	movs	r3, #14
 8001d7a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d80:	4619      	mov	r1, r3
 8001d82:	4844      	ldr	r0, [pc, #272]	; (8001e94 <HAL_LTDC_MspInit+0x248>)
 8001d84:	f000 fecc 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001d88:	f641 0358 	movw	r3, #6232	; 0x1858
 8001d8c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d9a:	230e      	movs	r3, #14
 8001d9c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001da2:	4619      	mov	r1, r3
 8001da4:	483c      	ldr	r0, [pc, #240]	; (8001e98 <HAL_LTDC_MspInit+0x24c>)
 8001da6:	f000 febb 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001daa:	2303      	movs	r3, #3
 8001dac:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001dba:	2309      	movs	r3, #9
 8001dbc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4835      	ldr	r0, [pc, #212]	; (8001e9c <HAL_LTDC_MspInit+0x250>)
 8001dc6:	f000 feab 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001dca:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001dce:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ddc:	230e      	movs	r3, #14
 8001dde:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001de4:	4619      	mov	r1, r3
 8001de6:	482d      	ldr	r0, [pc, #180]	; (8001e9c <HAL_LTDC_MspInit+0x250>)
 8001de8:	f000 fe9a 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001dec:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001df0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dfe:	230e      	movs	r3, #14
 8001e00:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e06:	4619      	mov	r1, r3
 8001e08:	4825      	ldr	r0, [pc, #148]	; (8001ea0 <HAL_LTDC_MspInit+0x254>)
 8001e0a:	f000 fe89 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001e0e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001e12:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e20:	230e      	movs	r3, #14
 8001e22:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e28:	4619      	mov	r1, r3
 8001e2a:	481e      	ldr	r0, [pc, #120]	; (8001ea4 <HAL_LTDC_MspInit+0x258>)
 8001e2c:	f000 fe78 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin;
 8001e30:	2308      	movs	r3, #8
 8001e32:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e40:	230e      	movs	r3, #14
 8001e42:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4817      	ldr	r0, [pc, #92]	; (8001ea8 <HAL_LTDC_MspInit+0x25c>)
 8001e4c:	f000 fe68 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001e50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e54:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e62:	2309      	movs	r3, #9
 8001e64:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <HAL_LTDC_MspInit+0x254>)
 8001e6e:	f000 fe57 	bl	8002b20 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2105      	movs	r1, #5
 8001e76:	2058      	movs	r0, #88	; 0x58
 8001e78:	f000 fc20 	bl	80026bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e7c:	2058      	movs	r0, #88	; 0x58
 8001e7e:	f000 fc39 	bl	80026f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001e82:	bf00      	nop
 8001e84:	3768      	adds	r7, #104	; 0x68
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40016800 	.word	0x40016800
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40021400 	.word	0x40021400
 8001e98:	40020000 	.word	0x40020000
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	40021800 	.word	0x40021800
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	40020c00 	.word	0x40020c00

08001eac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_SPI_MspInit+0x84>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d12c      	bne.n	8001f28 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001ef4:	f043 0320 	orr.w	r3, r3, #32
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_SPI_MspInit+0x88>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001f06:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001f18:	2305      	movs	r3, #5
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	4619      	mov	r1, r3
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <HAL_SPI_MspInit+0x8c>)
 8001f24:	f000 fdfc 	bl	8002b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001f28:	bf00      	nop
 8001f2a:	3728      	adds	r7, #40	; 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40015000 	.word	0x40015000
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40021400 	.word	0x40021400

08001f3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <HAL_TIM_Base_MspInit+0x3c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10d      	bne.n	8001f6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <HAL_TIM_Base_MspInit+0x40>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <HAL_TIM_Base_MspInit+0x40>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <HAL_TIM_Base_MspInit+0x40>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	; 0x30
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a3a      	ldr	r2, [pc, #232]	; (8002088 <HAL_UART_MspInit+0x108>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d135      	bne.n	800200e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_UART_MspInit+0x10c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a38      	ldr	r2, [pc, #224]	; (800208c <HAL_UART_MspInit+0x10c>)
 8001fac:	f043 0310 	orr.w	r3, r3, #16
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b36      	ldr	r3, [pc, #216]	; (800208c <HAL_UART_MspInit+0x10c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	4b32      	ldr	r3, [pc, #200]	; (800208c <HAL_UART_MspInit+0x10c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a31      	ldr	r2, [pc, #196]	; (800208c <HAL_UART_MspInit+0x10c>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b2f      	ldr	r3, [pc, #188]	; (800208c <HAL_UART_MspInit+0x10c>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001fda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fec:	2307      	movs	r3, #7
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4826      	ldr	r0, [pc, #152]	; (8002090 <HAL_UART_MspInit+0x110>)
 8001ff8:	f000 fd92 	bl	8002b20 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	2025      	movs	r0, #37	; 0x25
 8002002:	f000 fb5b 	bl	80026bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002006:	2025      	movs	r0, #37	; 0x25
 8002008:	f000 fb74 	bl	80026f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800200c:	e038      	b.n	8002080 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a20      	ldr	r2, [pc, #128]	; (8002094 <HAL_UART_MspInit+0x114>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d133      	bne.n	8002080 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_UART_MspInit+0x10c>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	4a1a      	ldr	r2, [pc, #104]	; (800208c <HAL_UART_MspInit+0x10c>)
 8002022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002026:	6413      	str	r3, [r2, #64]	; 0x40
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_UART_MspInit+0x10c>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_UART_MspInit+0x10c>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a13      	ldr	r2, [pc, #76]	; (800208c <HAL_UART_MspInit+0x10c>)
 800203e:	f043 0308 	orr.w	r3, r3, #8
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <HAL_UART_MspInit+0x10c>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002050:	2360      	movs	r3, #96	; 0x60
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002060:	2307      	movs	r3, #7
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	480b      	ldr	r0, [pc, #44]	; (8002098 <HAL_UART_MspInit+0x118>)
 800206c:	f000 fd58 	bl	8002b20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002070:	2200      	movs	r2, #0
 8002072:	2100      	movs	r1, #0
 8002074:	2026      	movs	r0, #38	; 0x26
 8002076:	f000 fb21 	bl	80026bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800207a:	2026      	movs	r0, #38	; 0x26
 800207c:	f000 fb3a 	bl	80026f4 <HAL_NVIC_EnableIRQ>
}
 8002080:	bf00      	nop
 8002082:	3730      	adds	r7, #48	; 0x30
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40011000 	.word	0x40011000
 800208c:	40023800 	.word	0x40023800
 8002090:	40020000 	.word	0x40020000
 8002094:	40004400 	.word	0x40004400
 8002098:	40020c00 	.word	0x40020c00

0800209c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80020b0:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <HAL_FMC_MspInit+0x104>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d16f      	bne.n	8002198 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80020b8:	4b39      	ldr	r3, [pc, #228]	; (80021a0 <HAL_FMC_MspInit+0x104>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <HAL_FMC_MspInit+0x108>)
 80020c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c6:	4a37      	ldr	r2, [pc, #220]	; (80021a4 <HAL_FMC_MspInit+0x108>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6393      	str	r3, [r2, #56]	; 0x38
 80020ce:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <HAL_FMC_MspInit+0x108>)
 80020d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80020da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80020de:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020ec:	230c      	movs	r3, #12
 80020ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	4619      	mov	r1, r3
 80020f4:	482c      	ldr	r0, [pc, #176]	; (80021a8 <HAL_FMC_MspInit+0x10c>)
 80020f6:	f000 fd13 	bl	8002b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80020fa:	2301      	movs	r3, #1
 80020fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800210a:	230c      	movs	r3, #12
 800210c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	4619      	mov	r1, r3
 8002112:	4826      	ldr	r0, [pc, #152]	; (80021ac <HAL_FMC_MspInit+0x110>)
 8002114:	f000 fd04 	bl	8002b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002118:	f248 1333 	movw	r3, #33075	; 0x8133
 800211c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002126:	2303      	movs	r3, #3
 8002128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800212a:	230c      	movs	r3, #12
 800212c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	4619      	mov	r1, r3
 8002132:	481f      	ldr	r0, [pc, #124]	; (80021b0 <HAL_FMC_MspInit+0x114>)
 8002134:	f000 fcf4 	bl	8002b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002138:	f64f 7383 	movw	r3, #65411	; 0xff83
 800213c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800214a:	230c      	movs	r3, #12
 800214c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	4619      	mov	r1, r3
 8002152:	4818      	ldr	r0, [pc, #96]	; (80021b4 <HAL_FMC_MspInit+0x118>)
 8002154:	f000 fce4 	bl	8002b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002158:	f24c 7303 	movw	r3, #50947	; 0xc703
 800215c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002166:	2303      	movs	r3, #3
 8002168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800216a:	230c      	movs	r3, #12
 800216c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4811      	ldr	r0, [pc, #68]	; (80021b8 <HAL_FMC_MspInit+0x11c>)
 8002174:	f000 fcd4 	bl	8002b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002178:	2360      	movs	r3, #96	; 0x60
 800217a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002184:	2303      	movs	r3, #3
 8002186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002188:	230c      	movs	r3, #12
 800218a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	4619      	mov	r1, r3
 8002190:	480a      	ldr	r0, [pc, #40]	; (80021bc <HAL_FMC_MspInit+0x120>)
 8002192:	f000 fcc5 	bl	8002b20 <HAL_GPIO_Init>
 8002196:	e000      	b.n	800219a <HAL_FMC_MspInit+0xfe>
    return;
 8002198:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000ba0 	.word	0x20000ba0
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40021400 	.word	0x40021400
 80021ac:	40020800 	.word	0x40020800
 80021b0:	40021800 	.word	0x40021800
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40020c00 	.word	0x40020c00
 80021bc:	40020400 	.word	0x40020400

080021c0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80021c8:	f7ff ff68 	bl	800209c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08e      	sub	sp, #56	; 0x38
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <HAL_InitTick+0xe4>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	4a32      	ldr	r2, [pc, #200]	; (80022b8 <HAL_InitTick+0xe4>)
 80021ee:	f043 0310 	orr.w	r3, r3, #16
 80021f2:	6413      	str	r3, [r2, #64]	; 0x40
 80021f4:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HAL_InitTick+0xe4>)
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002200:	f107 0210 	add.w	r2, r7, #16
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f003 fbfc 	bl	8005a08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800221a:	f003 fbcd 	bl	80059b8 <HAL_RCC_GetPCLK1Freq>
 800221e:	6378      	str	r0, [r7, #52]	; 0x34
 8002220:	e004      	b.n	800222c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002222:	f003 fbc9 	bl	80059b8 <HAL_RCC_GetPCLK1Freq>
 8002226:	4603      	mov	r3, r0
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222e:	4a23      	ldr	r2, [pc, #140]	; (80022bc <HAL_InitTick+0xe8>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	0c9b      	lsrs	r3, r3, #18
 8002236:	3b01      	subs	r3, #1
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <HAL_InitTick+0xec>)
 800223c:	4a21      	ldr	r2, [pc, #132]	; (80022c4 <HAL_InitTick+0xf0>)
 800223e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <HAL_InitTick+0xec>)
 8002242:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002246:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002248:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <HAL_InitTick+0xec>)
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_InitTick+0xec>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_InitTick+0xec>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_InitTick+0xec>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002260:	4817      	ldr	r0, [pc, #92]	; (80022c0 <HAL_InitTick+0xec>)
 8002262:	f003 fe80 	bl	8005f66 <HAL_TIM_Base_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800226c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002270:	2b00      	cmp	r3, #0
 8002272:	d11b      	bne.n	80022ac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002274:	4812      	ldr	r0, [pc, #72]	; (80022c0 <HAL_InitTick+0xec>)
 8002276:	f003 fec5 	bl	8006004 <HAL_TIM_Base_Start_IT>
 800227a:	4603      	mov	r3, r0
 800227c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002280:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002284:	2b00      	cmp	r3, #0
 8002286:	d111      	bne.n	80022ac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002288:	2036      	movs	r0, #54	; 0x36
 800228a:	f000 fa33 	bl	80026f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b0f      	cmp	r3, #15
 8002292:	d808      	bhi.n	80022a6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002294:	2200      	movs	r2, #0
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	2036      	movs	r0, #54	; 0x36
 800229a:	f000 fa0f 	bl	80026bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <HAL_InitTick+0xf4>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	e002      	b.n	80022ac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80022ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3738      	adds	r7, #56	; 0x38
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	431bde83 	.word	0x431bde83
 80022c0:	20000ba4 	.word	0x20000ba4
 80022c4:	40001000 	.word	0x40001000
 80022c8:	20000014 	.word	0x20000014

080022cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <NMI_Handler+0x4>

080022d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <HardFault_Handler+0x4>

080022d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <MemManage_Handler+0x4>

080022de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <BusFault_Handler+0x4>

080022e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <UsageFault_Handler+0x4>

080022ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <USART1_IRQHandler+0x10>)
 800232a:	f7fe ff23 	bl	8001174 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000ae4 	.word	0x20000ae4

08002338 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <USART2_IRQHandler+0x10>)
 800233e:	f7fe ff19 	bl	8001174 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
//  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000b28 	.word	0x20000b28

0800234c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <TIM6_DAC_IRQHandler+0x10>)
 8002352:	f003 fec7 	bl	80060e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000ba4 	.word	0x20000ba4

08002360 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <OTG_HS_IRQHandler+0x10>)
 8002366:	f001 f80b 	bl	8003380 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000fd0 	.word	0x20000fd0

08002374 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <LTDC_IRQHandler+0x10>)
 800237a:	f002 fc15 	bl	8004ba8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000099c 	.word	0x2000099c

08002388 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <DMA2D_IRQHandler+0x10>)
 800238e:	f000 fa24 	bl	80027da <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000908 	.word	0x20000908

0800239c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a4:	4a14      	ldr	r2, [pc, #80]	; (80023f8 <_sbrk+0x5c>)
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <_sbrk+0x60>)
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <_sbrk+0x64>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	; (8002404 <_sbrk+0x68>)
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d207      	bcs.n	80023dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023cc:	f007 f8a4 	bl	8009518 <__errno>
 80023d0:	4603      	mov	r3, r0
 80023d2:	220c      	movs	r2, #12
 80023d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	e009      	b.n	80023f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023dc:	4b08      	ldr	r3, [pc, #32]	; (8002400 <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <_sbrk+0x64>)
 80023ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20030000 	.word	0x20030000
 80023fc:	00000400 	.word	0x00000400
 8002400:	20000bec 	.word	0x20000bec
 8002404:	200012e8 	.word	0x200012e8

08002408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <SystemInit+0x20>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	4a05      	ldr	r2, [pc, #20]	; (8002428 <SystemInit+0x20>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800242c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002464 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002430:	480d      	ldr	r0, [pc, #52]	; (8002468 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002432:	490e      	ldr	r1, [pc, #56]	; (800246c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002434:	4a0e      	ldr	r2, [pc, #56]	; (8002470 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002438:	e002      	b.n	8002440 <LoopCopyDataInit>

0800243a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800243c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800243e:	3304      	adds	r3, #4

08002440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002444:	d3f9      	bcc.n	800243a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002446:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002448:	4c0b      	ldr	r4, [pc, #44]	; (8002478 <LoopFillZerobss+0x26>)
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800244c:	e001      	b.n	8002452 <LoopFillZerobss>

0800244e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800244e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002450:	3204      	adds	r2, #4

08002452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002454:	d3fb      	bcc.n	800244e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002456:	f7ff ffd7 	bl	8002408 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800245a:	f007 f863 	bl	8009524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800245e:	f7fe ff33 	bl	80012c8 <main>
  bx  lr    
 8002462:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002464:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800246c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002470:	0800a4dc 	.word	0x0800a4dc
  ldr r2, =_sbss
 8002474:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002478:	200012e4 	.word	0x200012e4

0800247c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800247c:	e7fe      	b.n	800247c <ADC_IRQHandler>
	...

08002480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_Init+0x40>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <HAL_Init+0x40>)
 800248a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_Init+0x40>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <HAL_Init+0x40>)
 8002496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800249a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_Init+0x40>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <HAL_Init+0x40>)
 80024a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a8:	2003      	movs	r0, #3
 80024aa:	f000 f8fc 	bl	80026a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ae:	200f      	movs	r0, #15
 80024b0:	f7ff fe90 	bl	80021d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b4:	f7ff faee 	bl	8001a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023c00 	.word	0x40023c00

080024c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_IncTick+0x20>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_IncTick+0x24>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <HAL_IncTick+0x24>)
 80024d6:	6013      	str	r3, [r2, #0]
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000018 	.word	0x20000018
 80024e8:	20000bf0 	.word	0x20000bf0

080024ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return uwTick;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_GetTick+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000bf0 	.word	0x20000bf0

08002504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff ffee 	bl	80024ec <HAL_GetTick>
 8002510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d005      	beq.n	800252a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_Delay+0x44>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800252a:	bf00      	nop
 800252c:	f7ff ffde 	bl	80024ec <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	429a      	cmp	r2, r3
 800253a:	d8f7      	bhi.n	800252c <HAL_Delay+0x28>
  {
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000018 	.word	0x20000018

0800254c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	60d3      	str	r3, [r2, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <__NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0b      	blt.n	80025da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <__NVIC_EnableIRQ+0x38>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2001      	movs	r0, #1
 80025d2:	fa00 f202 	lsl.w	r2, r0, r2
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100

080025ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db0a      	blt.n	8002616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	490c      	ldr	r1, [pc, #48]	; (8002638 <__NVIC_SetPriority+0x4c>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	440b      	add	r3, r1
 8002610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002614:	e00a      	b.n	800262c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4908      	ldr	r1, [pc, #32]	; (800263c <__NVIC_SetPriority+0x50>)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	3b04      	subs	r3, #4
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	440b      	add	r3, r1
 800262a:	761a      	strb	r2, [r3, #24]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f1c3 0307 	rsb	r3, r3, #7
 800265a:	2b04      	cmp	r3, #4
 800265c:	bf28      	it	cs
 800265e:	2304      	movcs	r3, #4
 8002660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3304      	adds	r3, #4
 8002666:	2b06      	cmp	r3, #6
 8002668:	d902      	bls.n	8002670 <NVIC_EncodePriority+0x30>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3b03      	subs	r3, #3
 800266e:	e000      	b.n	8002672 <NVIC_EncodePriority+0x32>
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	f04f 32ff 	mov.w	r2, #4294967295
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	401a      	ands	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002688:	f04f 31ff 	mov.w	r1, #4294967295
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	43d9      	mvns	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	4313      	orrs	r3, r2
         );
}
 800269a:	4618      	mov	r0, r3
 800269c:	3724      	adds	r7, #36	; 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ff4c 	bl	800254c <__NVIC_SetPriorityGrouping>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ce:	f7ff ff61 	bl	8002594 <__NVIC_GetPriorityGrouping>
 80026d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	6978      	ldr	r0, [r7, #20]
 80026da:	f7ff ffb1 	bl	8002640 <NVIC_EncodePriority>
 80026de:	4602      	mov	r2, r0
 80026e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ff80 	bl	80025ec <__NVIC_SetPriority>
}
 80026ec:	bf00      	nop
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ff54 	bl	80025b0 <__NVIC_EnableIRQ>
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e00e      	b.n	8002740 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	795b      	ldrb	r3, [r3, #5]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff f9d6 	bl	8001ae4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e03b      	b.n	80027d2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff f9da 	bl	8001b28 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002798:	f023 0107 	bic.w	r1, r3, #7
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68d1      	ldr	r1, [r2, #12]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	430b      	orrs	r3, r1
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d026      	beq.n	800284a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d021      	beq.n	800284a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002814:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281a:	f043 0201 	orr.w	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2201      	movs	r2, #1
 8002828:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2204      	movs	r2, #4
 800282e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d026      	beq.n	80028a2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d021      	beq.n	80028a2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800286c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2220      	movs	r2, #32
 8002874:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	f043 0202 	orr.w	r2, r3, #2
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2204      	movs	r2, #4
 8002886:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d026      	beq.n	80028fa <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d021      	beq.n	80028fa <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2208      	movs	r2, #8
 80028cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	f043 0204 	orr.w	r2, r3, #4
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2204      	movs	r2, #4
 80028de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00e      	beq.n	800292c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2204      	movs	r2, #4
 8002924:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f853 	bl	80029d2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d024      	beq.n	8002980 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01f      	beq.n	8002980 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800294e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2202      	movs	r2, #2
 8002956:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0310 	and.w	r3, r3, #16
 8002986:	2b00      	cmp	r3, #0
 8002988:	d01f      	beq.n	80029ca <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01a      	beq.n	80029ca <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029a2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2210      	movs	r2, #16
 80029aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f80e 	bl	80029e6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_DMA2D_ConfigLayer+0x20>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e079      	b.n	8002b10 <HAL_DMA2D_ConfigLayer+0x114>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	3318      	adds	r3, #24
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002a46:	4b35      	ldr	r3, [pc, #212]	; (8002b1c <HAL_DMA2D_ConfigLayer+0x120>)
 8002a48:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b0a      	cmp	r3, #10
 8002a50:	d003      	beq.n	8002a5a <HAL_DMA2D_ConfigLayer+0x5e>
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b09      	cmp	r3, #9
 8002a58:	d107      	bne.n	8002a6a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e005      	b.n	8002a76 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	061b      	lsls	r3, r3, #24
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d120      	bne.n	8002abe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	ea02 0103 	and.w	r1, r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b0a      	cmp	r3, #10
 8002aa4:	d003      	beq.n	8002aae <HAL_DMA2D_ConfigLayer+0xb2>
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b09      	cmp	r3, #9
 8002aac:	d127      	bne.n	8002afe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
 8002abc:	e01f      	b.n	8002afe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	ea02 0103 	and.w	r1, r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b0a      	cmp	r3, #10
 8002ae6:	d003      	beq.n	8002af0 <HAL_DMA2D_ConfigLayer+0xf4>
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b09      	cmp	r3, #9
 8002aee:	d106      	bne.n	8002afe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002afc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	ff03000f 	.word	0xff03000f

08002b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	e177      	b.n	8002e2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	f040 8166 	bne.w	8002e26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d005      	beq.n	8002b72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d130      	bne.n	8002bd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4013      	ands	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba8:	2201      	movs	r2, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 0201 	and.w	r2, r3, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d017      	beq.n	8002c10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	2203      	movs	r2, #3
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d123      	bne.n	8002c64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	08da      	lsrs	r2, r3, #3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3208      	adds	r2, #8
 8002c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	220f      	movs	r2, #15
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	08da      	lsrs	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3208      	adds	r2, #8
 8002c5e:	69b9      	ldr	r1, [r7, #24]
 8002c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0203 	and.w	r2, r3, #3
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80c0 	beq.w	8002e26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	4b66      	ldr	r3, [pc, #408]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	4a65      	ldr	r2, [pc, #404]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_GPIO_Init+0x324>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cc2:	4a61      	ldr	r2, [pc, #388]	; (8002e48 <HAL_GPIO_Init+0x328>)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	220f      	movs	r2, #15
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <HAL_GPIO_Init+0x32c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d037      	beq.n	8002d5e <HAL_GPIO_Init+0x23e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a57      	ldr	r2, [pc, #348]	; (8002e50 <HAL_GPIO_Init+0x330>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d031      	beq.n	8002d5a <HAL_GPIO_Init+0x23a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a56      	ldr	r2, [pc, #344]	; (8002e54 <HAL_GPIO_Init+0x334>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02b      	beq.n	8002d56 <HAL_GPIO_Init+0x236>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a55      	ldr	r2, [pc, #340]	; (8002e58 <HAL_GPIO_Init+0x338>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d025      	beq.n	8002d52 <HAL_GPIO_Init+0x232>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a54      	ldr	r2, [pc, #336]	; (8002e5c <HAL_GPIO_Init+0x33c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01f      	beq.n	8002d4e <HAL_GPIO_Init+0x22e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a53      	ldr	r2, [pc, #332]	; (8002e60 <HAL_GPIO_Init+0x340>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d019      	beq.n	8002d4a <HAL_GPIO_Init+0x22a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a52      	ldr	r2, [pc, #328]	; (8002e64 <HAL_GPIO_Init+0x344>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0x226>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a51      	ldr	r2, [pc, #324]	; (8002e68 <HAL_GPIO_Init+0x348>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00d      	beq.n	8002d42 <HAL_GPIO_Init+0x222>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a50      	ldr	r2, [pc, #320]	; (8002e6c <HAL_GPIO_Init+0x34c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <HAL_GPIO_Init+0x21e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4f      	ldr	r2, [pc, #316]	; (8002e70 <HAL_GPIO_Init+0x350>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_GPIO_Init+0x21a>
 8002d36:	2309      	movs	r3, #9
 8002d38:	e012      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d3a:	230a      	movs	r3, #10
 8002d3c:	e010      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	e00e      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d42:	2307      	movs	r3, #7
 8002d44:	e00c      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d46:	2306      	movs	r3, #6
 8002d48:	e00a      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d4a:	2305      	movs	r3, #5
 8002d4c:	e008      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d4e:	2304      	movs	r3, #4
 8002d50:	e006      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d52:	2303      	movs	r3, #3
 8002d54:	e004      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e002      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <HAL_GPIO_Init+0x240>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	f002 0203 	and.w	r2, r2, #3
 8002d66:	0092      	lsls	r2, r2, #2
 8002d68:	4093      	lsls	r3, r2
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d70:	4935      	ldr	r1, [pc, #212]	; (8002e48 <HAL_GPIO_Init+0x328>)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	089b      	lsrs	r3, r3, #2
 8002d76:	3302      	adds	r3, #2
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d7e:	4b3d      	ldr	r3, [pc, #244]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002da2:	4a34      	ldr	r2, [pc, #208]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da8:	4b32      	ldr	r3, [pc, #200]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dcc:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dd2:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002df6:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dfc:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <HAL_GPIO_Init+0x354>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b0f      	cmp	r3, #15
 8002e30:	f67f ae84 	bls.w	8002b3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3724      	adds	r7, #36	; 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40013800 	.word	0x40013800
 8002e4c:	40020000 	.word	0x40020000
 8002e50:	40020400 	.word	0x40020400
 8002e54:	40020800 	.word	0x40020800
 8002e58:	40020c00 	.word	0x40020c00
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	40021400 	.word	0x40021400
 8002e64:	40021800 	.word	0x40021800
 8002e68:	40021c00 	.word	0x40021c00
 8002e6c:	40022000 	.word	0x40022000
 8002e70:	40022400 	.word	0x40022400
 8002e74:	40013c00 	.word	0x40013c00

08002e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]
 8002e84:	4613      	mov	r3, r2
 8002e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e94:	e003      	b.n	8002e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	041a      	lsls	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	619a      	str	r2, [r3, #24]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eac:	b08f      	sub	sp, #60	; 0x3c
 8002eae:	af0a      	add	r7, sp, #40	; 0x28
 8002eb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e054      	b.n	8002f66 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f006 f8bc 	bl	8009054 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2203      	movs	r2, #3
 8002ee0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f004 f8ae 	bl	800705c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	687e      	ldr	r6, [r7, #4]
 8002f08:	466d      	mov	r5, sp
 8002f0a:	f106 0410 	add.w	r4, r6, #16
 8002f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f1e:	1d33      	adds	r3, r6, #4
 8002f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f22:	6838      	ldr	r0, [r7, #0]
 8002f24:	f004 f828 	bl	8006f78 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f004 f8a5 	bl	800707e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	687e      	ldr	r6, [r7, #4]
 8002f3c:	466d      	mov	r5, sp
 8002f3e:	f106 0410 	add.w	r4, r6, #16
 8002f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f52:	1d33      	adds	r3, r6, #4
 8002f54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f56:	6838      	ldr	r0, [r7, #0]
 8002f58:	f004 fa2e 	bl	80073b8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f6e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002f6e:	b590      	push	{r4, r7, lr}
 8002f70:	b089      	sub	sp, #36	; 0x24
 8002f72:	af04      	add	r7, sp, #16
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	4608      	mov	r0, r1
 8002f78:	4611      	mov	r1, r2
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	70fb      	strb	r3, [r7, #3]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70bb      	strb	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_HCD_HC_Init+0x28>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e076      	b.n	8003084 <HAL_HCD_HC_Init+0x116>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	333d      	adds	r3, #61	; 0x3d
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3338      	adds	r3, #56	; 0x38
 8002fbe:	787a      	ldrb	r2, [r7, #1]
 8002fc0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3340      	adds	r3, #64	; 0x40
 8002fd0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002fd2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	212c      	movs	r1, #44	; 0x2c
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	3339      	adds	r3, #57	; 0x39
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	333f      	adds	r3, #63	; 0x3f
 8002ff4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ff8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	78ba      	ldrb	r2, [r7, #2]
 8002ffe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003002:	b2d0      	uxtb	r0, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	212c      	movs	r1, #44	; 0x2c
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	333a      	adds	r3, #58	; 0x3a
 8003010:	4602      	mov	r2, r0
 8003012:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003014:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003018:	2b00      	cmp	r3, #0
 800301a:	da09      	bge.n	8003030 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	333b      	adds	r3, #59	; 0x3b
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	e008      	b.n	8003042 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	333b      	adds	r3, #59	; 0x3b
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	333c      	adds	r3, #60	; 0x3c
 8003050:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003054:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	787c      	ldrb	r4, [r7, #1]
 800305c:	78ba      	ldrb	r2, [r7, #2]
 800305e:	78f9      	ldrb	r1, [r7, #3]
 8003060:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003062:	9302      	str	r3, [sp, #8]
 8003064:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	4623      	mov	r3, r4
 8003072:	f004 fafd 	bl	8007670 <USB_HC_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003082:	7bfb      	ldrb	r3, [r7, #15]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3714      	adds	r7, #20
 8003088:	46bd      	mov	sp, r7
 800308a:	bd90      	pop	{r4, r7, pc}

0800308c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_HCD_HC_Halt+0x1e>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e00f      	b.n	80030ca <HAL_HCD_HC_Halt+0x3e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f004 fd4d 	bl	8007b5a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	4608      	mov	r0, r1
 80030de:	4611      	mov	r1, r2
 80030e0:	461a      	mov	r2, r3
 80030e2:	4603      	mov	r3, r0
 80030e4:	70fb      	strb	r3, [r7, #3]
 80030e6:	460b      	mov	r3, r1
 80030e8:	70bb      	strb	r3, [r7, #2]
 80030ea:	4613      	mov	r3, r2
 80030ec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	333b      	adds	r3, #59	; 0x3b
 80030fc:	78ba      	ldrb	r2, [r7, #2]
 80030fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	333f      	adds	r3, #63	; 0x3f
 800310e:	787a      	ldrb	r2, [r7, #1]
 8003110:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003112:	7c3b      	ldrb	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d112      	bne.n	800313e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	3342      	adds	r3, #66	; 0x42
 8003126:	2203      	movs	r2, #3
 8003128:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	212c      	movs	r1, #44	; 0x2c
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	4413      	add	r3, r2
 8003136:	333d      	adds	r3, #61	; 0x3d
 8003138:	7f3a      	ldrb	r2, [r7, #28]
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e008      	b.n	8003150 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3342      	adds	r3, #66	; 0x42
 800314c:	2202      	movs	r2, #2
 800314e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003150:	787b      	ldrb	r3, [r7, #1]
 8003152:	2b03      	cmp	r3, #3
 8003154:	f200 80c6 	bhi.w	80032e4 <HAL_HCD_HC_SubmitRequest+0x210>
 8003158:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003171 	.word	0x08003171
 8003164:	080032d1 	.word	0x080032d1
 8003168:	080031d5 	.word	0x080031d5
 800316c:	08003253 	.word	0x08003253
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003170:	7c3b      	ldrb	r3, [r7, #16]
 8003172:	2b01      	cmp	r3, #1
 8003174:	f040 80b8 	bne.w	80032e8 <HAL_HCD_HC_SubmitRequest+0x214>
 8003178:	78bb      	ldrb	r3, [r7, #2]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f040 80b4 	bne.w	80032e8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003180:	8b3b      	ldrh	r3, [r7, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d108      	bne.n	8003198 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	3355      	adds	r3, #85	; 0x55
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	3355      	adds	r3, #85	; 0x55
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	3342      	adds	r3, #66	; 0x42
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80031be:	e093      	b.n	80032e8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	3342      	adds	r3, #66	; 0x42
 80031ce:	2202      	movs	r2, #2
 80031d0:	701a      	strb	r2, [r3, #0]
      break;
 80031d2:	e089      	b.n	80032e8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80031d4:	78bb      	ldrb	r3, [r7, #2]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d11d      	bne.n	8003216 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	3355      	adds	r3, #85	; 0x55
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031ee:	78fb      	ldrb	r3, [r7, #3]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	3342      	adds	r3, #66	; 0x42
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003200:	e073      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3342      	adds	r3, #66	; 0x42
 8003210:	2202      	movs	r2, #2
 8003212:	701a      	strb	r2, [r3, #0]
      break;
 8003214:	e069      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	212c      	movs	r1, #44	; 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	3354      	adds	r3, #84	; 0x54
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	212c      	movs	r1, #44	; 0x2c
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	4413      	add	r3, r2
 8003236:	3342      	adds	r3, #66	; 0x42
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]
      break;
 800323c:	e055      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	212c      	movs	r1, #44	; 0x2c
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	3342      	adds	r3, #66	; 0x42
 800324c:	2202      	movs	r2, #2
 800324e:	701a      	strb	r2, [r3, #0]
      break;
 8003250:	e04b      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003252:	78bb      	ldrb	r3, [r7, #2]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d11d      	bne.n	8003294 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	3355      	adds	r3, #85	; 0x55
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d109      	bne.n	8003280 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800326c:	78fb      	ldrb	r3, [r7, #3]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	3342      	adds	r3, #66	; 0x42
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800327e:	e034      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	3342      	adds	r3, #66	; 0x42
 800328e:	2202      	movs	r2, #2
 8003290:	701a      	strb	r2, [r3, #0]
      break;
 8003292:	e02a      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	3354      	adds	r3, #84	; 0x54
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d109      	bne.n	80032bc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	212c      	movs	r1, #44	; 0x2c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	3342      	adds	r3, #66	; 0x42
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
      break;
 80032ba:	e016      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	212c      	movs	r1, #44	; 0x2c
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	4413      	add	r3, r2
 80032c8:	3342      	adds	r3, #66	; 0x42
 80032ca:	2202      	movs	r2, #2
 80032cc:	701a      	strb	r2, [r3, #0]
      break;
 80032ce:	e00c      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80032d0:	78fb      	ldrb	r3, [r7, #3]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	212c      	movs	r1, #44	; 0x2c
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	4413      	add	r3, r2
 80032dc:	3342      	adds	r3, #66	; 0x42
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
      break;
 80032e2:	e002      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80032e4:	bf00      	nop
 80032e6:	e000      	b.n	80032ea <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80032e8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	212c      	movs	r1, #44	; 0x2c
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	4413      	add	r3, r2
 80032f6:	3344      	adds	r3, #68	; 0x44
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	8b3a      	ldrh	r2, [r7, #24]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	202c      	movs	r0, #44	; 0x2c
 8003304:	fb00 f303 	mul.w	r3, r0, r3
 8003308:	440b      	add	r3, r1
 800330a:	334c      	adds	r3, #76	; 0x4c
 800330c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	212c      	movs	r1, #44	; 0x2c
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	4413      	add	r3, r2
 800331a:	3360      	adds	r3, #96	; 0x60
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	212c      	movs	r1, #44	; 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	3350      	adds	r3, #80	; 0x50
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	212c      	movs	r1, #44	; 0x2c
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	4413      	add	r3, r2
 800333e:	3339      	adds	r3, #57	; 0x39
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	212c      	movs	r1, #44	; 0x2c
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	4413      	add	r3, r2
 8003350:	3361      	adds	r3, #97	; 0x61
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	78fb      	ldrb	r3, [r7, #3]
 800335c:	222c      	movs	r2, #44	; 0x2c
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	3338      	adds	r3, #56	; 0x38
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	18d1      	adds	r1, r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	f004 faa0 	bl	80078b4 <USB_HC_StartXfer>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop

08003380 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f003 ffcb 	bl	8007332 <USB_GetMode>
 800339c:	4603      	mov	r3, r0
 800339e:	2b01      	cmp	r3, #1
 80033a0:	f040 80f6 	bne.w	8003590 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f003 ffaf 	bl	800730c <USB_ReadInterrupts>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80ec 	beq.w	800358e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 ffa6 	bl	800730c <USB_ReadInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ca:	d104      	bne.n	80033d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80033d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f003 ff96 	bl	800730c <USB_ReadInterrupts>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ea:	d104      	bne.n	80033f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 ff86 	bl	800730c <USB_ReadInterrupts>
 8003400:	4603      	mov	r3, r0
 8003402:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800340a:	d104      	bne.n	8003416 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003414:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f003 ff76 	bl	800730c <USB_ReadInterrupts>
 8003420:	4603      	mov	r3, r0
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d103      	bne.n	8003432 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2202      	movs	r2, #2
 8003430:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f003 ff68 	bl	800730c <USB_ReadInterrupts>
 800343c:	4603      	mov	r3, r0
 800343e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003442:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003446:	d11c      	bne.n	8003482 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003450:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10f      	bne.n	8003482 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003462:	2110      	movs	r1, #16
 8003464:	6938      	ldr	r0, [r7, #16]
 8003466:	f003 fe57 	bl	8007118 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800346a:	6938      	ldr	r0, [r7, #16]
 800346c:	f003 fe88 	bl	8007180 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2101      	movs	r1, #1
 8003476:	4618      	mov	r0, r3
 8003478:	f004 f85e 	bl	8007538 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f005 fe63 	bl	8009148 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f003 ff40 	bl	800730c <USB_ReadInterrupts>
 800348c:	4603      	mov	r3, r0
 800348e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003492:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003496:	d102      	bne.n	800349e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f001 f882 	bl	80045a2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f003 ff32 	bl	800730c <USB_ReadInterrupts>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d106      	bne.n	80034c0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f005 fe2c 	bl	8009110 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2208      	movs	r2, #8
 80034be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f003 ff21 	bl	800730c <USB_ReadInterrupts>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d101      	bne.n	80034d8 <HAL_HCD_IRQHandler+0x158>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <HAL_HCD_IRQHandler+0x15a>
 80034d8:	2300      	movs	r3, #0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d012      	beq.n	8003504 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0210 	bic.w	r2, r2, #16
 80034ec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 ff85 	bl	80043fe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0210 	orr.w	r2, r2, #16
 8003502:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f003 feff 	bl	800730c <USB_ReadInterrupts>
 800350e:	4603      	mov	r3, r0
 8003510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003514:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003518:	d13a      	bne.n	8003590 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f004 fb0a 	bl	8007b38 <USB_HC_ReadInterrupt>
 8003524:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	e025      	b.n	8003578 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d018      	beq.n	8003572 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003556:	d106      	bne.n	8003566 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	4619      	mov	r1, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f88f 	bl	8003682 <HCD_HC_IN_IRQHandler>
 8003564:	e005      	b.n	8003572 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	4619      	mov	r1, r3
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fbdd 	bl	8003d2c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	3301      	adds	r3, #1
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	429a      	cmp	r2, r3
 8003580:	d3d4      	bcc.n	800352c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800358a:	615a      	str	r2, [r3, #20]
 800358c:	e000      	b.n	8003590 <HAL_HCD_IRQHandler+0x210>
      return;
 800358e:	bf00      	nop
    }
  }
}
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_HCD_Start+0x16>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e013      	b.n	80035d4 <HAL_HCD_Start+0x3e>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2101      	movs	r1, #1
 80035ba:	4618      	mov	r0, r3
 80035bc:	f003 fff6 	bl	80075ac <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f003 fd38 	bl	800703a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_HCD_Stop+0x16>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e00d      	b.n	800360e <HAL_HCD_Stop+0x32>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f004 fbe4 	bl	8007dcc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	460b      	mov	r3, r1
 8003620:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003622:	78fb      	ldrb	r3, [r7, #3]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	212c      	movs	r1, #44	; 0x2c
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	4413      	add	r3, r2
 800362e:	3360      	adds	r3, #96	; 0x60
 8003630:	781b      	ldrb	r3, [r3, #0]
}
 8003632:	4618      	mov	r0, r3
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	460b      	mov	r3, r1
 8003648:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800364a:	78fb      	ldrb	r3, [r7, #3]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	212c      	movs	r1, #44	; 0x2c
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	4413      	add	r3, r2
 8003656:	3350      	adds	r3, #80	; 0x50
 8003658:	681b      	ldr	r3, [r3, #0]
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f003 ffea 	bl	800764c <USB_GetCurrentFrame>
 8003678:	4603      	mov	r3, r0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b086      	sub	sp, #24
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d11a      	bne.n	80036e8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036be:	461a      	mov	r2, r3
 80036c0:	2304      	movs	r3, #4
 80036c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	212c      	movs	r1, #44	; 0x2c
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	3361      	adds	r3, #97	; 0x61
 80036d2:	2206      	movs	r2, #6
 80036d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	4611      	mov	r1, r2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f004 fa3a 	bl	8007b5a <USB_HC_Halt>
 80036e6:	e0af      	b.n	8003848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036fe:	d11b      	bne.n	8003738 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370c:	461a      	mov	r2, r3
 800370e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003712:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	212c      	movs	r1, #44	; 0x2c
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3361      	adds	r3, #97	; 0x61
 8003722:	2207      	movs	r2, #7
 8003724:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f004 fa12 	bl	8007b5a <USB_HC_Halt>
 8003736:	e087      	b.n	8003848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4413      	add	r3, r2
 8003740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b20      	cmp	r3, #32
 800374c:	d109      	bne.n	8003762 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4413      	add	r3, r2
 8003756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375a:	461a      	mov	r2, r3
 800375c:	2320      	movs	r3, #32
 800375e:	6093      	str	r3, [r2, #8]
 8003760:	e072      	b.n	8003848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4413      	add	r3, r2
 800376a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b08      	cmp	r3, #8
 8003776:	d11a      	bne.n	80037ae <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4413      	add	r3, r2
 8003780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003784:	461a      	mov	r2, r3
 8003786:	2308      	movs	r3, #8
 8003788:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	212c      	movs	r1, #44	; 0x2c
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	4413      	add	r3, r2
 8003796:	3361      	adds	r3, #97	; 0x61
 8003798:	2205      	movs	r2, #5
 800379a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f004 f9d7 	bl	8007b5a <USB_HC_Halt>
 80037ac:	e04c      	b.n	8003848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c4:	d11b      	bne.n	80037fe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d2:	461a      	mov	r2, r3
 80037d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	212c      	movs	r1, #44	; 0x2c
 80037e0:	fb01 f303 	mul.w	r3, r1, r3
 80037e4:	4413      	add	r3, r2
 80037e6:	3361      	adds	r3, #97	; 0x61
 80037e8:	2208      	movs	r2, #8
 80037ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f004 f9af 	bl	8007b5a <USB_HC_Halt>
 80037fc:	e024      	b.n	8003848 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003810:	2b80      	cmp	r3, #128	; 0x80
 8003812:	d119      	bne.n	8003848 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003820:	461a      	mov	r2, r3
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	212c      	movs	r1, #44	; 0x2c
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	3361      	adds	r3, #97	; 0x61
 8003834:	2206      	movs	r2, #6
 8003836:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f004 f989 	bl	8007b5a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4413      	add	r3, r2
 8003850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800385a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385e:	d112      	bne.n	8003886 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	4611      	mov	r1, r2
 800386a:	4618      	mov	r0, r3
 800386c:	f004 f975 	bl	8007b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4413      	add	r3, r2
 8003878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387c:	461a      	mov	r2, r3
 800387e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003882:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003884:	e24e      	b.n	8003d24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4413      	add	r3, r2
 800388e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	f040 80df 	bne.w	8003a5c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d019      	beq.n	80038da <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	212c      	movs	r1, #44	; 0x2c
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	3348      	adds	r3, #72	; 0x48
 80038b4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	0159      	lsls	r1, r3, #5
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	440b      	add	r3, r1
 80038be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038c8:	1ad2      	subs	r2, r2, r3
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	202c      	movs	r0, #44	; 0x2c
 80038d0:	fb00 f303 	mul.w	r3, r0, r3
 80038d4:	440b      	add	r3, r1
 80038d6:	3350      	adds	r3, #80	; 0x50
 80038d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	3361      	adds	r3, #97	; 0x61
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	212c      	movs	r1, #44	; 0x2c
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	335c      	adds	r3, #92	; 0x5c
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4413      	add	r3, r2
 8003906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390a:	461a      	mov	r2, r3
 800390c:	2301      	movs	r3, #1
 800390e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	333f      	adds	r3, #63	; 0x3f
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d009      	beq.n	8003938 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	333f      	adds	r3, #63	; 0x3f
 8003932:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003934:	2b02      	cmp	r3, #2
 8003936:	d111      	bne.n	800395c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	4611      	mov	r1, r2
 8003942:	4618      	mov	r0, r3
 8003944:	f004 f909 	bl	8007b5a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003954:	461a      	mov	r2, r3
 8003956:	2310      	movs	r3, #16
 8003958:	6093      	str	r3, [r2, #8]
 800395a:	e03a      	b.n	80039d2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	212c      	movs	r1, #44	; 0x2c
 8003962:	fb01 f303 	mul.w	r3, r1, r3
 8003966:	4413      	add	r3, r2
 8003968:	333f      	adds	r3, #63	; 0x3f
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b03      	cmp	r3, #3
 800396e:	d009      	beq.n	8003984 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	333f      	adds	r3, #63	; 0x3f
 800397e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003980:	2b01      	cmp	r3, #1
 8003982:	d126      	bne.n	80039d2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4413      	add	r3, r2
 800398c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	0151      	lsls	r1, r2, #5
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	440a      	add	r2, r1
 800399a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800399e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039a2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	212c      	movs	r1, #44	; 0x2c
 80039aa:	fb01 f303 	mul.w	r3, r1, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	3360      	adds	r3, #96	; 0x60
 80039b2:	2201      	movs	r2, #1
 80039b4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	b2d9      	uxtb	r1, r3
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	202c      	movs	r0, #44	; 0x2c
 80039c0:	fb00 f303 	mul.w	r3, r0, r3
 80039c4:	4413      	add	r3, r2
 80039c6:	3360      	adds	r3, #96	; 0x60
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f005 fbc9 	bl	8009164 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d12b      	bne.n	8003a32 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	3348      	adds	r3, #72	; 0x48
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	202c      	movs	r0, #44	; 0x2c
 80039f0:	fb00 f202 	mul.w	r2, r0, r2
 80039f4:	440a      	add	r2, r1
 80039f6:	3240      	adds	r2, #64	; 0x40
 80039f8:	8812      	ldrh	r2, [r2, #0]
 80039fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 818e 	beq.w	8003d24 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	212c      	movs	r1, #44	; 0x2c
 8003a0e:	fb01 f303 	mul.w	r3, r1, r3
 8003a12:	4413      	add	r3, r2
 8003a14:	3354      	adds	r3, #84	; 0x54
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	f083 0301 	eor.w	r3, r3, #1
 8003a1c:	b2d8      	uxtb	r0, r3
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	212c      	movs	r1, #44	; 0x2c
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	3354      	adds	r3, #84	; 0x54
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	701a      	strb	r2, [r3, #0]
}
 8003a30:	e178      	b.n	8003d24 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	212c      	movs	r1, #44	; 0x2c
 8003a38:	fb01 f303 	mul.w	r3, r1, r3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3354      	adds	r3, #84	; 0x54
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	f083 0301 	eor.w	r3, r3, #1
 8003a46:	b2d8      	uxtb	r0, r3
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	212c      	movs	r1, #44	; 0x2c
 8003a4e:	fb01 f303 	mul.w	r3, r1, r3
 8003a52:	4413      	add	r3, r2
 8003a54:	3354      	adds	r3, #84	; 0x54
 8003a56:	4602      	mov	r2, r0
 8003a58:	701a      	strb	r2, [r3, #0]
}
 8003a5a:	e163      	b.n	8003d24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	f040 80f6 	bne.w	8003c60 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	212c      	movs	r1, #44	; 0x2c
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	3361      	adds	r3, #97	; 0x61
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d109      	bne.n	8003a9c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	212c      	movs	r1, #44	; 0x2c
 8003a8e:	fb01 f303 	mul.w	r3, r1, r3
 8003a92:	4413      	add	r3, r2
 8003a94:	3360      	adds	r3, #96	; 0x60
 8003a96:	2201      	movs	r2, #1
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	e0c9      	b.n	8003c30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	212c      	movs	r1, #44	; 0x2c
 8003aa2:	fb01 f303 	mul.w	r3, r1, r3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3361      	adds	r3, #97	; 0x61
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b05      	cmp	r3, #5
 8003aae:	d109      	bne.n	8003ac4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	212c      	movs	r1, #44	; 0x2c
 8003ab6:	fb01 f303 	mul.w	r3, r1, r3
 8003aba:	4413      	add	r3, r2
 8003abc:	3360      	adds	r3, #96	; 0x60
 8003abe:	2205      	movs	r2, #5
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	e0b5      	b.n	8003c30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	212c      	movs	r1, #44	; 0x2c
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	4413      	add	r3, r2
 8003ad0:	3361      	adds	r3, #97	; 0x61
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b06      	cmp	r3, #6
 8003ad6:	d009      	beq.n	8003aec <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	212c      	movs	r1, #44	; 0x2c
 8003ade:	fb01 f303 	mul.w	r3, r1, r3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3361      	adds	r3, #97	; 0x61
 8003ae6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d150      	bne.n	8003b8e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	212c      	movs	r1, #44	; 0x2c
 8003af2:	fb01 f303 	mul.w	r3, r1, r3
 8003af6:	4413      	add	r3, r2
 8003af8:	335c      	adds	r3, #92	; 0x5c
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	202c      	movs	r0, #44	; 0x2c
 8003b04:	fb00 f303 	mul.w	r3, r0, r3
 8003b08:	440b      	add	r3, r1
 8003b0a:	335c      	adds	r3, #92	; 0x5c
 8003b0c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	335c      	adds	r3, #92	; 0x5c
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d912      	bls.n	8003b48 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	335c      	adds	r3, #92	; 0x5c
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	212c      	movs	r1, #44	; 0x2c
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	3360      	adds	r3, #96	; 0x60
 8003b42:	2204      	movs	r2, #4
 8003b44:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b46:	e073      	b.n	8003c30 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	212c      	movs	r1, #44	; 0x2c
 8003b4e:	fb01 f303 	mul.w	r3, r1, r3
 8003b52:	4413      	add	r3, r2
 8003b54:	3360      	adds	r3, #96	; 0x60
 8003b56:	2202      	movs	r2, #2
 8003b58:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b70:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b78:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b86:	461a      	mov	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b8c:	e050      	b.n	8003c30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	212c      	movs	r1, #44	; 0x2c
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	4413      	add	r3, r2
 8003b9a:	3361      	adds	r3, #97	; 0x61
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d122      	bne.n	8003be8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	212c      	movs	r1, #44	; 0x2c
 8003ba8:	fb01 f303 	mul.w	r3, r1, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	3360      	adds	r3, #96	; 0x60
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bd2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be0:	461a      	mov	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e023      	b.n	8003c30 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	212c      	movs	r1, #44	; 0x2c
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3361      	adds	r3, #97	; 0x61
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b07      	cmp	r3, #7
 8003bfa:	d119      	bne.n	8003c30 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	212c      	movs	r1, #44	; 0x2c
 8003c02:	fb01 f303 	mul.w	r3, r1, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	335c      	adds	r3, #92	; 0x5c
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	202c      	movs	r0, #44	; 0x2c
 8003c14:	fb00 f303 	mul.w	r3, r0, r3
 8003c18:	440b      	add	r3, r1
 8003c1a:	335c      	adds	r3, #92	; 0x5c
 8003c1c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	212c      	movs	r1, #44	; 0x2c
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	4413      	add	r3, r2
 8003c2a:	3360      	adds	r3, #96	; 0x60
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2302      	movs	r3, #2
 8003c40:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	b2d9      	uxtb	r1, r3
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	202c      	movs	r0, #44	; 0x2c
 8003c4c:	fb00 f303 	mul.w	r3, r0, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	3360      	adds	r3, #96	; 0x60
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f005 fa83 	bl	8009164 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c5e:	e061      	b.n	8003d24 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d156      	bne.n	8003d24 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	212c      	movs	r1, #44	; 0x2c
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	4413      	add	r3, r2
 8003c82:	333f      	adds	r3, #63	; 0x3f
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d111      	bne.n	8003cae <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	212c      	movs	r1, #44	; 0x2c
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	4413      	add	r3, r2
 8003c96:	335c      	adds	r3, #92	; 0x5c
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f003 ff57 	bl	8007b5a <USB_HC_Halt>
 8003cac:	e031      	b.n	8003d12 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	212c      	movs	r1, #44	; 0x2c
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	333f      	adds	r3, #63	; 0x3f
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	212c      	movs	r1, #44	; 0x2c
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	333f      	adds	r3, #63	; 0x3f
 8003cd0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d11d      	bne.n	8003d12 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	212c      	movs	r1, #44	; 0x2c
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	335c      	adds	r3, #92	; 0x5c
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d110      	bne.n	8003d12 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	212c      	movs	r1, #44	; 0x2c
 8003cf6:	fb01 f303 	mul.w	r3, r1, r3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3361      	adds	r3, #97	; 0x61
 8003cfe:	2203      	movs	r2, #3
 8003d00:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f003 ff24 	bl	8007b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1e:	461a      	mov	r2, r3
 8003d20:	2310      	movs	r3, #16
 8003d22:	6093      	str	r3, [r2, #8]
}
 8003d24:	bf00      	nop
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d11a      	bne.n	8003d92 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d68:	461a      	mov	r2, r3
 8003d6a:	2304      	movs	r3, #4
 8003d6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	212c      	movs	r1, #44	; 0x2c
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	3361      	adds	r3, #97	; 0x61
 8003d7c:	2206      	movs	r2, #6
 8003d7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f003 fee5 	bl	8007b5a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003d90:	e331      	b.n	80043f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d12e      	bne.n	8003e06 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db4:	461a      	mov	r2, r3
 8003db6:	2320      	movs	r3, #32
 8003db8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	212c      	movs	r1, #44	; 0x2c
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	333d      	adds	r3, #61	; 0x3d
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	f040 8313 	bne.w	80043f6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	212c      	movs	r1, #44	; 0x2c
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	333d      	adds	r3, #61	; 0x3d
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	212c      	movs	r1, #44	; 0x2c
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	4413      	add	r3, r2
 8003dee:	3360      	adds	r3, #96	; 0x60
 8003df0:	2202      	movs	r2, #2
 8003df2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	4611      	mov	r1, r2
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f003 feab 	bl	8007b5a <USB_HC_Halt>
}
 8003e04:	e2f7      	b.n	80043f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e1c:	d112      	bne.n	8003e44 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e30:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f003 fe8c 	bl	8007b5a <USB_HC_Halt>
}
 8003e42:	e2d8      	b.n	80043f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d140      	bne.n	8003edc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	212c      	movs	r1, #44	; 0x2c
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	335c      	adds	r3, #92	; 0x5c
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d111      	bne.n	8003ea6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	212c      	movs	r1, #44	; 0x2c
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	333d      	adds	r3, #61	; 0x3d
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2340      	movs	r3, #64	; 0x40
 8003ea4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3361      	adds	r3, #97	; 0x61
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f003 fe40 	bl	8007b5a <USB_HC_Halt>
}
 8003eda:	e28c      	b.n	80043f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eee:	2b40      	cmp	r3, #64	; 0x40
 8003ef0:	d12c      	bne.n	8003f4c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	212c      	movs	r1, #44	; 0x2c
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	4413      	add	r3, r2
 8003efe:	3361      	adds	r3, #97	; 0x61
 8003f00:	2204      	movs	r2, #4
 8003f02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	212c      	movs	r1, #44	; 0x2c
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	4413      	add	r3, r2
 8003f10:	333d      	adds	r3, #61	; 0x3d
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	212c      	movs	r1, #44	; 0x2c
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	335c      	adds	r3, #92	; 0x5c
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f003 fe11 	bl	8007b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f44:	461a      	mov	r2, r3
 8003f46:	2340      	movs	r3, #64	; 0x40
 8003f48:	6093      	str	r3, [r2, #8]
}
 8003f4a:	e254      	b.n	80043f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d11a      	bne.n	8003f98 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2308      	movs	r3, #8
 8003f72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	212c      	movs	r1, #44	; 0x2c
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	4413      	add	r3, r2
 8003f80:	3361      	adds	r3, #97	; 0x61
 8003f82:	2205      	movs	r2, #5
 8003f84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f003 fde2 	bl	8007b5a <USB_HC_Halt>
}
 8003f96:	e22e      	b.n	80043f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d140      	bne.n	8004030 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	212c      	movs	r1, #44	; 0x2c
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	4413      	add	r3, r2
 8003fba:	335c      	adds	r3, #92	; 0x5c
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	212c      	movs	r1, #44	; 0x2c
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	3361      	adds	r3, #97	; 0x61
 8003fce:	2203      	movs	r2, #3
 8003fd0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	212c      	movs	r1, #44	; 0x2c
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	333d      	adds	r3, #61	; 0x3d
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d112      	bne.n	800400c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	212c      	movs	r1, #44	; 0x2c
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	333c      	adds	r3, #60	; 0x3c
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d108      	bne.n	800400c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	212c      	movs	r1, #44	; 0x2c
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	333d      	adds	r3, #61	; 0x3d
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	4611      	mov	r1, r2
 8004016:	4618      	mov	r0, r3
 8004018:	f003 fd9f 	bl	8007b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	4413      	add	r3, r2
 8004024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004028:	461a      	mov	r2, r3
 800402a:	2310      	movs	r3, #16
 800402c:	6093      	str	r3, [r2, #8]
}
 800402e:	e1e2      	b.n	80043f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	4413      	add	r3, r2
 8004038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b80      	cmp	r3, #128	; 0x80
 8004044:	d164      	bne.n	8004110 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d111      	bne.n	8004072 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	212c      	movs	r1, #44	; 0x2c
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	4413      	add	r3, r2
 800405a:	3361      	adds	r3, #97	; 0x61
 800405c:	2206      	movs	r2, #6
 800405e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	4611      	mov	r1, r2
 800406a:	4618      	mov	r0, r3
 800406c:	f003 fd75 	bl	8007b5a <USB_HC_Halt>
 8004070:	e044      	b.n	80040fc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	212c      	movs	r1, #44	; 0x2c
 8004078:	fb01 f303 	mul.w	r3, r1, r3
 800407c:	4413      	add	r3, r2
 800407e:	335c      	adds	r3, #92	; 0x5c
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	202c      	movs	r0, #44	; 0x2c
 800408a:	fb00 f303 	mul.w	r3, r0, r3
 800408e:	440b      	add	r3, r1
 8004090:	335c      	adds	r3, #92	; 0x5c
 8004092:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	212c      	movs	r1, #44	; 0x2c
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	335c      	adds	r3, #92	; 0x5c
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d920      	bls.n	80040ea <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	212c      	movs	r1, #44	; 0x2c
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	335c      	adds	r3, #92	; 0x5c
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	212c      	movs	r1, #44	; 0x2c
 80040c0:	fb01 f303 	mul.w	r3, r1, r3
 80040c4:	4413      	add	r3, r2
 80040c6:	3360      	adds	r3, #96	; 0x60
 80040c8:	2204      	movs	r2, #4
 80040ca:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	b2d9      	uxtb	r1, r3
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	202c      	movs	r0, #44	; 0x2c
 80040d6:	fb00 f303 	mul.w	r3, r0, r3
 80040da:	4413      	add	r3, r2
 80040dc:	3360      	adds	r3, #96	; 0x60
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f005 f83e 	bl	8009164 <HAL_HCD_HC_NotifyURBChange_Callback>
 80040e8:	e008      	b.n	80040fc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	212c      	movs	r1, #44	; 0x2c
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	3360      	adds	r3, #96	; 0x60
 80040f8:	2202      	movs	r2, #2
 80040fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	4413      	add	r3, r2
 8004104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004108:	461a      	mov	r2, r3
 800410a:	2380      	movs	r3, #128	; 0x80
 800410c:	6093      	str	r3, [r2, #8]
}
 800410e:	e172      	b.n	80043f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	4413      	add	r3, r2
 8004118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004126:	d11b      	bne.n	8004160 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	212c      	movs	r1, #44	; 0x2c
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	4413      	add	r3, r2
 8004134:	3361      	adds	r3, #97	; 0x61
 8004136:	2208      	movs	r2, #8
 8004138:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	4611      	mov	r1, r2
 8004144:	4618      	mov	r0, r3
 8004146:	f003 fd08 	bl	8007b5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	4413      	add	r3, r2
 8004152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004156:	461a      	mov	r2, r3
 8004158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800415c:	6093      	str	r3, [r2, #8]
}
 800415e:	e14a      	b.n	80043f6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	4413      	add	r3, r2
 8004168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b02      	cmp	r3, #2
 8004174:	f040 813f 	bne.w	80043f6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	212c      	movs	r1, #44	; 0x2c
 800417e:	fb01 f303 	mul.w	r3, r1, r3
 8004182:	4413      	add	r3, r2
 8004184:	3361      	adds	r3, #97	; 0x61
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d17d      	bne.n	8004288 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	212c      	movs	r1, #44	; 0x2c
 8004192:	fb01 f303 	mul.w	r3, r1, r3
 8004196:	4413      	add	r3, r2
 8004198:	3360      	adds	r3, #96	; 0x60
 800419a:	2201      	movs	r2, #1
 800419c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	212c      	movs	r1, #44	; 0x2c
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	333f      	adds	r3, #63	; 0x3f
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d00a      	beq.n	80041c8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	212c      	movs	r1, #44	; 0x2c
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	4413      	add	r3, r2
 80041be:	333f      	adds	r3, #63	; 0x3f
 80041c0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	f040 8100 	bne.w	80043c8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d113      	bne.n	80041f8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	212c      	movs	r1, #44	; 0x2c
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	4413      	add	r3, r2
 80041dc:	3355      	adds	r3, #85	; 0x55
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	f083 0301 	eor.w	r3, r3, #1
 80041e4:	b2d8      	uxtb	r0, r3
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	212c      	movs	r1, #44	; 0x2c
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	3355      	adds	r3, #85	; 0x55
 80041f4:	4602      	mov	r2, r0
 80041f6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	f040 80e3 	bne.w	80043c8 <HCD_HC_OUT_IRQHandler+0x69c>
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	212c      	movs	r1, #44	; 0x2c
 8004208:	fb01 f303 	mul.w	r3, r1, r3
 800420c:	4413      	add	r3, r2
 800420e:	334c      	adds	r3, #76	; 0x4c
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80d8 	beq.w	80043c8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	212c      	movs	r1, #44	; 0x2c
 800421e:	fb01 f303 	mul.w	r3, r1, r3
 8004222:	4413      	add	r3, r2
 8004224:	334c      	adds	r3, #76	; 0x4c
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	202c      	movs	r0, #44	; 0x2c
 800422e:	fb00 f202 	mul.w	r2, r0, r2
 8004232:	440a      	add	r2, r1
 8004234:	3240      	adds	r2, #64	; 0x40
 8004236:	8812      	ldrh	r2, [r2, #0]
 8004238:	4413      	add	r3, r2
 800423a:	3b01      	subs	r3, #1
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	202c      	movs	r0, #44	; 0x2c
 8004242:	fb00 f202 	mul.w	r2, r0, r2
 8004246:	440a      	add	r2, r1
 8004248:	3240      	adds	r2, #64	; 0x40
 800424a:	8812      	ldrh	r2, [r2, #0]
 800424c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80b5 	beq.w	80043c8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	212c      	movs	r1, #44	; 0x2c
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	4413      	add	r3, r2
 800426a:	3355      	adds	r3, #85	; 0x55
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	f083 0301 	eor.w	r3, r3, #1
 8004272:	b2d8      	uxtb	r0, r3
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	212c      	movs	r1, #44	; 0x2c
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	4413      	add	r3, r2
 8004280:	3355      	adds	r3, #85	; 0x55
 8004282:	4602      	mov	r2, r0
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	e09f      	b.n	80043c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	212c      	movs	r1, #44	; 0x2c
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4413      	add	r3, r2
 8004294:	3361      	adds	r3, #97	; 0x61
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b03      	cmp	r3, #3
 800429a:	d109      	bne.n	80042b0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	212c      	movs	r1, #44	; 0x2c
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	3360      	adds	r3, #96	; 0x60
 80042aa:	2202      	movs	r2, #2
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	e08b      	b.n	80043c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	212c      	movs	r1, #44	; 0x2c
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	4413      	add	r3, r2
 80042bc:	3361      	adds	r3, #97	; 0x61
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d109      	bne.n	80042d8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	212c      	movs	r1, #44	; 0x2c
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	3360      	adds	r3, #96	; 0x60
 80042d2:	2202      	movs	r2, #2
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e077      	b.n	80043c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	212c      	movs	r1, #44	; 0x2c
 80042de:	fb01 f303 	mul.w	r3, r1, r3
 80042e2:	4413      	add	r3, r2
 80042e4:	3361      	adds	r3, #97	; 0x61
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b05      	cmp	r3, #5
 80042ea:	d109      	bne.n	8004300 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	212c      	movs	r1, #44	; 0x2c
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	4413      	add	r3, r2
 80042f8:	3360      	adds	r3, #96	; 0x60
 80042fa:	2205      	movs	r2, #5
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e063      	b.n	80043c8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	212c      	movs	r1, #44	; 0x2c
 8004306:	fb01 f303 	mul.w	r3, r1, r3
 800430a:	4413      	add	r3, r2
 800430c:	3361      	adds	r3, #97	; 0x61
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b06      	cmp	r3, #6
 8004312:	d009      	beq.n	8004328 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	212c      	movs	r1, #44	; 0x2c
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	3361      	adds	r3, #97	; 0x61
 8004322:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004324:	2b08      	cmp	r3, #8
 8004326:	d14f      	bne.n	80043c8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	212c      	movs	r1, #44	; 0x2c
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	4413      	add	r3, r2
 8004334:	335c      	adds	r3, #92	; 0x5c
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	202c      	movs	r0, #44	; 0x2c
 8004340:	fb00 f303 	mul.w	r3, r0, r3
 8004344:	440b      	add	r3, r1
 8004346:	335c      	adds	r3, #92	; 0x5c
 8004348:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	335c      	adds	r3, #92	; 0x5c
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d912      	bls.n	8004384 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	212c      	movs	r1, #44	; 0x2c
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	4413      	add	r3, r2
 800436a:	335c      	adds	r3, #92	; 0x5c
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	212c      	movs	r1, #44	; 0x2c
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	4413      	add	r3, r2
 800437c:	3360      	adds	r3, #96	; 0x60
 800437e:	2204      	movs	r2, #4
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	e021      	b.n	80043c8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	212c      	movs	r1, #44	; 0x2c
 800438a:	fb01 f303 	mul.w	r3, r1, r3
 800438e:	4413      	add	r3, r2
 8004390:	3360      	adds	r3, #96	; 0x60
 8004392:	2202      	movs	r2, #2
 8004394:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	4413      	add	r3, r2
 800439e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043ac:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043b4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c2:	461a      	mov	r2, r3
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d4:	461a      	mov	r2, r3
 80043d6:	2302      	movs	r3, #2
 80043d8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	b2d9      	uxtb	r1, r3
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	202c      	movs	r0, #44	; 0x2c
 80043e4:	fb00 f303 	mul.w	r3, r0, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	3360      	adds	r3, #96	; 0x60
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f004 feb7 	bl	8009164 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80043f6:	bf00      	nop
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b08a      	sub	sp, #40	; 0x28
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6a1b      	ldr	r3, [r3, #32]
 8004416:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	0c5b      	lsrs	r3, r3, #17
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	091b      	lsrs	r3, r3, #4
 800442e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004432:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d004      	beq.n	8004444 <HCD_RXQLVL_IRQHandler+0x46>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b05      	cmp	r3, #5
 800443e:	f000 80a9 	beq.w	8004594 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004442:	e0aa      	b.n	800459a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80a6 	beq.w	8004598 <HCD_RXQLVL_IRQHandler+0x19a>
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	212c      	movs	r1, #44	; 0x2c
 8004452:	fb01 f303 	mul.w	r3, r1, r3
 8004456:	4413      	add	r3, r2
 8004458:	3344      	adds	r3, #68	; 0x44
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 809b 	beq.w	8004598 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	212c      	movs	r1, #44	; 0x2c
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	4413      	add	r3, r2
 800446e:	3350      	adds	r3, #80	; 0x50
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	441a      	add	r2, r3
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	202c      	movs	r0, #44	; 0x2c
 800447c:	fb00 f303 	mul.w	r3, r0, r3
 8004480:	440b      	add	r3, r1
 8004482:	334c      	adds	r3, #76	; 0x4c
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d87a      	bhi.n	8004580 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	212c      	movs	r1, #44	; 0x2c
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	4413      	add	r3, r2
 800449a:	3344      	adds	r3, #68	; 0x44
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	b292      	uxth	r2, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	f002 feda 	bl	800725c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	212c      	movs	r1, #44	; 0x2c
 80044ae:	fb01 f303 	mul.w	r3, r1, r3
 80044b2:	4413      	add	r3, r2
 80044b4:	3344      	adds	r3, #68	; 0x44
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	441a      	add	r2, r3
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	202c      	movs	r0, #44	; 0x2c
 80044c2:	fb00 f303 	mul.w	r3, r0, r3
 80044c6:	440b      	add	r3, r1
 80044c8:	3344      	adds	r3, #68	; 0x44
 80044ca:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	212c      	movs	r1, #44	; 0x2c
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	4413      	add	r3, r2
 80044d8:	3350      	adds	r3, #80	; 0x50
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	441a      	add	r2, r3
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	202c      	movs	r0, #44	; 0x2c
 80044e6:	fb00 f303 	mul.w	r3, r0, r3
 80044ea:	440b      	add	r3, r1
 80044ec:	3350      	adds	r3, #80	; 0x50
 80044ee:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	0cdb      	lsrs	r3, r3, #19
 8004500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004504:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	212c      	movs	r1, #44	; 0x2c
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	4413      	add	r3, r2
 8004512:	3340      	adds	r3, #64	; 0x40
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4293      	cmp	r3, r2
 800451c:	d13c      	bne.n	8004598 <HCD_RXQLVL_IRQHandler+0x19a>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d039      	beq.n	8004598 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	4413      	add	r3, r2
 800452c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800453a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004542:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	4413      	add	r3, r2
 800454c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004550:	461a      	mov	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	212c      	movs	r1, #44	; 0x2c
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	4413      	add	r3, r2
 8004562:	3354      	adds	r3, #84	; 0x54
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	f083 0301 	eor.w	r3, r3, #1
 800456a:	b2d8      	uxtb	r0, r3
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	212c      	movs	r1, #44	; 0x2c
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	4413      	add	r3, r2
 8004578:	3354      	adds	r3, #84	; 0x54
 800457a:	4602      	mov	r2, r0
 800457c:	701a      	strb	r2, [r3, #0]
      break;
 800457e:	e00b      	b.n	8004598 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	212c      	movs	r1, #44	; 0x2c
 8004586:	fb01 f303 	mul.w	r3, r1, r3
 800458a:	4413      	add	r3, r2
 800458c:	3360      	adds	r3, #96	; 0x60
 800458e:	2204      	movs	r2, #4
 8004590:	701a      	strb	r2, [r3, #0]
      break;
 8004592:	e001      	b.n	8004598 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004594:	bf00      	nop
 8004596:	e000      	b.n	800459a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004598:	bf00      	nop
  }
}
 800459a:	bf00      	nop
 800459c:	3728      	adds	r7, #40	; 0x28
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b086      	sub	sp, #24
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80045ce:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d10b      	bne.n	80045f2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d102      	bne.n	80045ea <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f004 fda1 	bl	800912c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f043 0302 	orr.w	r3, r3, #2
 80045f0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d132      	bne.n	8004662 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f043 0308 	orr.w	r3, r3, #8
 8004602:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b04      	cmp	r3, #4
 800460c:	d126      	bne.n	800465c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d113      	bne.n	800463e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800461c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004620:	d106      	bne.n	8004630 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2102      	movs	r1, #2
 8004628:	4618      	mov	r0, r3
 800462a:	f002 ff85 	bl	8007538 <USB_InitFSLSPClkSel>
 800462e:	e011      	b.n	8004654 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2101      	movs	r1, #1
 8004636:	4618      	mov	r0, r3
 8004638:	f002 ff7e 	bl	8007538 <USB_InitFSLSPClkSel>
 800463c:	e00a      	b.n	8004654 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d106      	bne.n	8004654 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800464c:	461a      	mov	r2, r3
 800464e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004652:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f004 fd93 	bl	8009180 <HAL_HCD_PortEnabled_Callback>
 800465a:	e002      	b.n	8004662 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f004 fd9d 	bl	800919c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0320 	and.w	r3, r3, #32
 8004668:	2b20      	cmp	r3, #32
 800466a:	d103      	bne.n	8004674 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f043 0320 	orr.w	r3, r3, #32
 8004672:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800467a:	461a      	mov	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	6013      	str	r3, [r2, #0]
}
 8004680:	bf00      	nop
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e12b      	b.n	80048f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fd fa62 	bl	8001b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2224      	movs	r2, #36	; 0x24
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046ec:	f001 f964 	bl	80059b8 <HAL_RCC_GetPCLK1Freq>
 80046f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4a81      	ldr	r2, [pc, #516]	; (80048fc <HAL_I2C_Init+0x274>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d807      	bhi.n	800470c <HAL_I2C_Init+0x84>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4a80      	ldr	r2, [pc, #512]	; (8004900 <HAL_I2C_Init+0x278>)
 8004700:	4293      	cmp	r3, r2
 8004702:	bf94      	ite	ls
 8004704:	2301      	movls	r3, #1
 8004706:	2300      	movhi	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e006      	b.n	800471a <HAL_I2C_Init+0x92>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a7d      	ldr	r2, [pc, #500]	; (8004904 <HAL_I2C_Init+0x27c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	bf94      	ite	ls
 8004714:	2301      	movls	r3, #1
 8004716:	2300      	movhi	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e0e7      	b.n	80048f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4a78      	ldr	r2, [pc, #480]	; (8004908 <HAL_I2C_Init+0x280>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	0c9b      	lsrs	r3, r3, #18
 800472c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4a6a      	ldr	r2, [pc, #424]	; (80048fc <HAL_I2C_Init+0x274>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d802      	bhi.n	800475c <HAL_I2C_Init+0xd4>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	3301      	adds	r3, #1
 800475a:	e009      	b.n	8004770 <HAL_I2C_Init+0xe8>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	4a69      	ldr	r2, [pc, #420]	; (800490c <HAL_I2C_Init+0x284>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	099b      	lsrs	r3, r3, #6
 800476e:	3301      	adds	r3, #1
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	430b      	orrs	r3, r1
 8004776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004782:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	495c      	ldr	r1, [pc, #368]	; (80048fc <HAL_I2C_Init+0x274>)
 800478c:	428b      	cmp	r3, r1
 800478e:	d819      	bhi.n	80047c4 <HAL_I2C_Init+0x13c>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1e59      	subs	r1, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	fbb1 f3f3 	udiv	r3, r1, r3
 800479e:	1c59      	adds	r1, r3, #1
 80047a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047a4:	400b      	ands	r3, r1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_I2C_Init+0x138>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1e59      	subs	r1, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80047b8:	3301      	adds	r3, #1
 80047ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047be:	e051      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 80047c0:	2304      	movs	r3, #4
 80047c2:	e04f      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d111      	bne.n	80047f0 <HAL_I2C_Init+0x168>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1e58      	subs	r0, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6859      	ldr	r1, [r3, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	440b      	add	r3, r1
 80047da:	fbb0 f3f3 	udiv	r3, r0, r3
 80047de:	3301      	adds	r3, #1
 80047e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf0c      	ite	eq
 80047e8:	2301      	moveq	r3, #1
 80047ea:	2300      	movne	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e012      	b.n	8004816 <HAL_I2C_Init+0x18e>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1e58      	subs	r0, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6859      	ldr	r1, [r3, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	0099      	lsls	r1, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	fbb0 f3f3 	udiv	r3, r0, r3
 8004806:	3301      	adds	r3, #1
 8004808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800480c:	2b00      	cmp	r3, #0
 800480e:	bf0c      	ite	eq
 8004810:	2301      	moveq	r3, #1
 8004812:	2300      	movne	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_I2C_Init+0x196>
 800481a:	2301      	movs	r3, #1
 800481c:	e022      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10e      	bne.n	8004844 <HAL_I2C_Init+0x1bc>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1e58      	subs	r0, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	440b      	add	r3, r1
 8004834:	fbb0 f3f3 	udiv	r3, r0, r3
 8004838:	3301      	adds	r3, #1
 800483a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800483e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004842:	e00f      	b.n	8004864 <HAL_I2C_Init+0x1dc>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1e58      	subs	r0, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	0099      	lsls	r1, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	fbb0 f3f3 	udiv	r3, r0, r3
 800485a:	3301      	adds	r3, #1
 800485c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	6809      	ldr	r1, [r1, #0]
 8004868:	4313      	orrs	r3, r2
 800486a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6911      	ldr	r1, [r2, #16]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68d2      	ldr	r2, [r2, #12]
 800489e:	4311      	orrs	r1, r2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	000186a0 	.word	0x000186a0
 8004900:	001e847f 	.word	0x001e847f
 8004904:	003d08ff 	.word	0x003d08ff
 8004908:	431bde83 	.word	0x431bde83
 800490c:	10624dd3 	.word	0x10624dd3

08004910 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b20      	cmp	r3, #32
 8004924:	d129      	bne.n	800497a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2224      	movs	r2, #36	; 0x24
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0201 	bic.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0210 	bic.w	r2, r2, #16
 800494c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f042 0201 	orr.w	r2, r2, #1
 800496c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2220      	movs	r2, #32
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e000      	b.n	800497c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800497a:	2302      	movs	r3, #2
  }
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b20      	cmp	r3, #32
 80049a0:	d12a      	bne.n	80049f8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2224      	movs	r2, #36	; 0x24
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80049c2:	89fb      	ldrh	r3, [r7, #14]
 80049c4:	f023 030f 	bic.w	r3, r3, #15
 80049c8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	89fb      	ldrh	r3, [r7, #14]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	89fa      	ldrh	r2, [r7, #14]
 80049da:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	e000      	b.n	80049fa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80049f8:	2302      	movs	r3, #2
  }
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
	...

08004a08 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e0bf      	b.n	8004b9a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fd f90c 	bl	8001c4c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004a4a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6999      	ldr	r1, [r3, #24]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004a60:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6899      	ldr	r1, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b4a      	ldr	r3, [pc, #296]	; (8004ba4 <HAL_LTDC_Init+0x19c>)
 8004a7c:	400b      	ands	r3, r1
 8004a7e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6899      	ldr	r1, [r3, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68d9      	ldr	r1, [r3, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	4b3e      	ldr	r3, [pc, #248]	; (8004ba4 <HAL_LTDC_Init+0x19c>)
 8004aaa:	400b      	ands	r3, r1
 8004aac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	041b      	lsls	r3, r3, #16
 8004ab4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68d9      	ldr	r1, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1a      	ldr	r2, [r3, #32]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6919      	ldr	r1, [r3, #16]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b33      	ldr	r3, [pc, #204]	; (8004ba4 <HAL_LTDC_Init+0x19c>)
 8004ad8:	400b      	ands	r3, r1
 8004ada:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	041b      	lsls	r3, r3, #16
 8004ae2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6919      	ldr	r1, [r3, #16]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6959      	ldr	r1, [r3, #20]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4b27      	ldr	r3, [pc, #156]	; (8004ba4 <HAL_LTDC_Init+0x19c>)
 8004b06:	400b      	ands	r3, r1
 8004b08:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	041b      	lsls	r3, r3, #16
 8004b10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6959      	ldr	r1, [r3, #20]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b2e:	021b      	lsls	r3, r3, #8
 8004b30:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004b38:	041b      	lsls	r3, r3, #16
 8004b3a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0206 	orr.w	r2, r2, #6
 8004b76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	f000f800 	.word	0xf000f800

08004ba8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d023      	beq.n	8004c12 <HAL_LTDC_IRQHandler+0x6a>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01e      	beq.n	8004c12 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0204 	bic.w	r2, r2, #4
 8004be2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2204      	movs	r2, #4
 8004bea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004bf2:	f043 0201 	orr.w	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2204      	movs	r2, #4
 8004c00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f86f 	bl	8004cf0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d023      	beq.n	8004c64 <HAL_LTDC_IRQHandler+0xbc>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01e      	beq.n	8004c64 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0202 	bic.w	r2, r2, #2
 8004c34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c44:	f043 0202 	orr.w	r2, r3, #2
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2204      	movs	r2, #4
 8004c52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f846 	bl	8004cf0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01b      	beq.n	8004ca6 <HAL_LTDC_IRQHandler+0xfe>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d016      	beq.n	8004ca6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f82f 	bl	8004d04 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d01b      	beq.n	8004ce8 <HAL_LTDC_IRQHandler+0x140>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d016      	beq.n	8004ce8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 0208 	bic.w	r2, r2, #8
 8004cc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2208      	movs	r2, #8
 8004cd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f818 	bl	8004d18 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004ce8:	bf00      	nop
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004d2c:	b5b0      	push	{r4, r5, r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_LTDC_ConfigLayer+0x1a>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e02c      	b.n	8004da0 <HAL_LTDC_ConfigLayer+0x74>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2202      	movs	r2, #2
 8004d52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2134      	movs	r1, #52	; 0x34
 8004d5c:	fb01 f303 	mul.w	r3, r1, r3
 8004d60:	4413      	add	r3, r2
 8004d62:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4614      	mov	r4, r2
 8004d6a:	461d      	mov	r5, r3
 8004d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	68b9      	ldr	r1, [r7, #8]
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 f811 	bl	8004da8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bdb0      	pop	{r4, r5, r7, pc}

08004da8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b089      	sub	sp, #36	; 0x24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	0c1b      	lsrs	r3, r3, #16
 8004dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc4:	4413      	add	r3, r2
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	01db      	lsls	r3, r3, #7
 8004dd4:	4413      	add	r3, r2
 8004dd6:	3384      	adds	r3, #132	; 0x84
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	6812      	ldr	r2, [r2, #0]
 8004dde:	4611      	mov	r1, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	01d2      	lsls	r2, r2, #7
 8004de4:	440a      	add	r2, r1
 8004de6:	3284      	adds	r2, #132	; 0x84
 8004de8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004dec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004dfe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e00:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4619      	mov	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	01db      	lsls	r3, r3, #7
 8004e0c:	440b      	add	r3, r1
 8004e0e:	3384      	adds	r3, #132	; 0x84
 8004e10:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004e16:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e26:	4413      	add	r3, r2
 8004e28:	041b      	lsls	r3, r3, #16
 8004e2a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	01db      	lsls	r3, r3, #7
 8004e36:	4413      	add	r3, r2
 8004e38:	3384      	adds	r3, #132	; 0x84
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	4611      	mov	r1, r2
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	01d2      	lsls	r2, r2, #7
 8004e46:	440a      	add	r2, r1
 8004e48:	3284      	adds	r2, #132	; 0x84
 8004e4a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004e4e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e5e:	4413      	add	r3, r2
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4619      	mov	r1, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	01db      	lsls	r3, r3, #7
 8004e6c:	440b      	add	r3, r1
 8004e6e:	3384      	adds	r3, #132	; 0x84
 8004e70:	4619      	mov	r1, r3
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	01db      	lsls	r3, r3, #7
 8004e82:	4413      	add	r3, r2
 8004e84:	3384      	adds	r3, #132	; 0x84
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	6812      	ldr	r2, [r2, #0]
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	01d2      	lsls	r2, r2, #7
 8004e92:	440a      	add	r2, r1
 8004e94:	3284      	adds	r2, #132	; 0x84
 8004e96:	f023 0307 	bic.w	r3, r3, #7
 8004e9a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	01db      	lsls	r3, r3, #7
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3384      	adds	r3, #132	; 0x84
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	01db      	lsls	r3, r3, #7
 8004ed8:	4413      	add	r3, r2
 8004eda:	3384      	adds	r3, #132	; 0x84
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	01db      	lsls	r3, r3, #7
 8004ee8:	4413      	add	r3, r2
 8004eea:	3384      	adds	r3, #132	; 0x84
 8004eec:	461a      	mov	r2, r3
 8004eee:	2300      	movs	r3, #0
 8004ef0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ef8:	461a      	mov	r2, r3
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	431a      	orrs	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4619      	mov	r1, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	01db      	lsls	r3, r3, #7
 8004f0c:	440b      	add	r3, r1
 8004f0e:	3384      	adds	r3, #132	; 0x84
 8004f10:	4619      	mov	r1, r3
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	01db      	lsls	r3, r3, #7
 8004f22:	4413      	add	r3, r2
 8004f24:	3384      	adds	r3, #132	; 0x84
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	6812      	ldr	r2, [r2, #0]
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	01d2      	lsls	r2, r2, #7
 8004f32:	440a      	add	r2, r1
 8004f34:	3284      	adds	r2, #132	; 0x84
 8004f36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f3a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	01db      	lsls	r3, r3, #7
 8004f46:	4413      	add	r3, r2
 8004f48:	3384      	adds	r3, #132	; 0x84
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	01db      	lsls	r3, r3, #7
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3384      	adds	r3, #132	; 0x84
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	4611      	mov	r1, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	01d2      	lsls	r2, r2, #7
 8004f6c:	440a      	add	r2, r1
 8004f6e:	3284      	adds	r2, #132	; 0x84
 8004f70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004f74:	f023 0307 	bic.w	r3, r3, #7
 8004f78:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	69da      	ldr	r2, [r3, #28]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	68f9      	ldr	r1, [r7, #12]
 8004f84:	6809      	ldr	r1, [r1, #0]
 8004f86:	4608      	mov	r0, r1
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	01c9      	lsls	r1, r1, #7
 8004f8c:	4401      	add	r1, r0
 8004f8e:	3184      	adds	r1, #132	; 0x84
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	01db      	lsls	r3, r3, #7
 8004f9e:	4413      	add	r3, r2
 8004fa0:	3384      	adds	r3, #132	; 0x84
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	01db      	lsls	r3, r3, #7
 8004fae:	4413      	add	r3, r2
 8004fb0:	3384      	adds	r3, #132	; 0x84
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	01db      	lsls	r3, r3, #7
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3384      	adds	r3, #132	; 0x84
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d102      	bne.n	8004fdc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004fd6:	2304      	movs	r3, #4
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	e01b      	b.n	8005014 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d102      	bne.n	8004fea <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	e014      	b.n	8005014 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	d00b      	beq.n	800500a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d007      	beq.n	800500a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d003      	beq.n	800500a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005006:	2b07      	cmp	r3, #7
 8005008:	d102      	bne.n	8005010 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800500a:	2302      	movs	r3, #2
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	e001      	b.n	8005014 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005010:	2301      	movs	r3, #1
 8005012:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	01db      	lsls	r3, r3, #7
 800501e:	4413      	add	r3, r2
 8005020:	3384      	adds	r3, #132	; 0x84
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	6812      	ldr	r2, [r2, #0]
 8005028:	4611      	mov	r1, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	01d2      	lsls	r2, r2, #7
 800502e:	440a      	add	r2, r1
 8005030:	3284      	adds	r2, #132	; 0x84
 8005032:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005036:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	fb02 f303 	mul.w	r3, r2, r3
 8005042:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	6859      	ldr	r1, [r3, #4]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	1acb      	subs	r3, r1, r3
 800504e:	69f9      	ldr	r1, [r7, #28]
 8005050:	fb01 f303 	mul.w	r3, r1, r3
 8005054:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005056:	68f9      	ldr	r1, [r7, #12]
 8005058:	6809      	ldr	r1, [r1, #0]
 800505a:	4608      	mov	r0, r1
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	01c9      	lsls	r1, r1, #7
 8005060:	4401      	add	r1, r0
 8005062:	3184      	adds	r1, #132	; 0x84
 8005064:	4313      	orrs	r3, r2
 8005066:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	461a      	mov	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	01db      	lsls	r3, r3, #7
 8005072:	4413      	add	r3, r2
 8005074:	3384      	adds	r3, #132	; 0x84
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	4611      	mov	r1, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	01d2      	lsls	r2, r2, #7
 8005082:	440a      	add	r2, r1
 8005084:	3284      	adds	r2, #132	; 0x84
 8005086:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800508a:	f023 0307 	bic.w	r3, r3, #7
 800508e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	01db      	lsls	r3, r3, #7
 800509a:	4413      	add	r3, r2
 800509c:	3384      	adds	r3, #132	; 0x84
 800509e:	461a      	mov	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	01db      	lsls	r3, r3, #7
 80050b0:	4413      	add	r3, r2
 80050b2:	3384      	adds	r3, #132	; 0x84
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	4611      	mov	r1, r2
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	01d2      	lsls	r2, r2, #7
 80050c0:	440a      	add	r2, r1
 80050c2:	3284      	adds	r2, #132	; 0x84
 80050c4:	f043 0301 	orr.w	r3, r3, #1
 80050c8:	6013      	str	r3, [r2, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3724      	adds	r7, #36	; 0x24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e267      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d075      	beq.n	80051e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050f6:	4b88      	ldr	r3, [pc, #544]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 030c 	and.w	r3, r3, #12
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d00c      	beq.n	800511c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005102:	4b85      	ldr	r3, [pc, #532]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800510a:	2b08      	cmp	r3, #8
 800510c:	d112      	bne.n	8005134 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800510e:	4b82      	ldr	r3, [pc, #520]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800511a:	d10b      	bne.n	8005134 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800511c:	4b7e      	ldr	r3, [pc, #504]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d05b      	beq.n	80051e0 <HAL_RCC_OscConfig+0x108>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d157      	bne.n	80051e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e242      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800513c:	d106      	bne.n	800514c <HAL_RCC_OscConfig+0x74>
 800513e:	4b76      	ldr	r3, [pc, #472]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a75      	ldr	r2, [pc, #468]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 8005144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	e01d      	b.n	8005188 <HAL_RCC_OscConfig+0xb0>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005154:	d10c      	bne.n	8005170 <HAL_RCC_OscConfig+0x98>
 8005156:	4b70      	ldr	r3, [pc, #448]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a6f      	ldr	r2, [pc, #444]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 800515c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	4b6d      	ldr	r3, [pc, #436]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a6c      	ldr	r2, [pc, #432]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 8005168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	e00b      	b.n	8005188 <HAL_RCC_OscConfig+0xb0>
 8005170:	4b69      	ldr	r3, [pc, #420]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a68      	ldr	r2, [pc, #416]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 8005176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	4b66      	ldr	r3, [pc, #408]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a65      	ldr	r2, [pc, #404]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 8005182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d013      	beq.n	80051b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005190:	f7fd f9ac 	bl	80024ec <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005198:	f7fd f9a8 	bl	80024ec <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b64      	cmp	r3, #100	; 0x64
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e207      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051aa:	4b5b      	ldr	r3, [pc, #364]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0f0      	beq.n	8005198 <HAL_RCC_OscConfig+0xc0>
 80051b6:	e014      	b.n	80051e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b8:	f7fd f998 	bl	80024ec <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051c0:	f7fd f994 	bl	80024ec <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b64      	cmp	r3, #100	; 0x64
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e1f3      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051d2:	4b51      	ldr	r3, [pc, #324]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0xe8>
 80051de:	e000      	b.n	80051e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d063      	beq.n	80052b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051ee:	4b4a      	ldr	r3, [pc, #296]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 030c 	and.w	r3, r3, #12
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00b      	beq.n	8005212 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051fa:	4b47      	ldr	r3, [pc, #284]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005202:	2b08      	cmp	r3, #8
 8005204:	d11c      	bne.n	8005240 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005206:	4b44      	ldr	r3, [pc, #272]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d116      	bne.n	8005240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005212:	4b41      	ldr	r3, [pc, #260]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <HAL_RCC_OscConfig+0x152>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d001      	beq.n	800522a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e1c7      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800522a:	4b3b      	ldr	r3, [pc, #236]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	4937      	ldr	r1, [pc, #220]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 800523a:	4313      	orrs	r3, r2
 800523c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800523e:	e03a      	b.n	80052b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d020      	beq.n	800528a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005248:	4b34      	ldr	r3, [pc, #208]	; (800531c <HAL_RCC_OscConfig+0x244>)
 800524a:	2201      	movs	r2, #1
 800524c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524e:	f7fd f94d 	bl	80024ec <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005256:	f7fd f949 	bl	80024ec <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e1a8      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005268:	4b2b      	ldr	r3, [pc, #172]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0f0      	beq.n	8005256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005274:	4b28      	ldr	r3, [pc, #160]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	4925      	ldr	r1, [pc, #148]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 8005284:	4313      	orrs	r3, r2
 8005286:	600b      	str	r3, [r1, #0]
 8005288:	e015      	b.n	80052b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800528a:	4b24      	ldr	r3, [pc, #144]	; (800531c <HAL_RCC_OscConfig+0x244>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005290:	f7fd f92c 	bl	80024ec <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005298:	f7fd f928 	bl	80024ec <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e187      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1f0      	bne.n	8005298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d036      	beq.n	8005330 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d016      	beq.n	80052f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ca:	4b15      	ldr	r3, [pc, #84]	; (8005320 <HAL_RCC_OscConfig+0x248>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d0:	f7fd f90c 	bl	80024ec <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052d8:	f7fd f908 	bl	80024ec <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e167      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ea:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <HAL_RCC_OscConfig+0x240>)
 80052ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0x200>
 80052f6:	e01b      	b.n	8005330 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052f8:	4b09      	ldr	r3, [pc, #36]	; (8005320 <HAL_RCC_OscConfig+0x248>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052fe:	f7fd f8f5 	bl	80024ec <HAL_GetTick>
 8005302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005304:	e00e      	b.n	8005324 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005306:	f7fd f8f1 	bl	80024ec <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d907      	bls.n	8005324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e150      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
 8005318:	40023800 	.word	0x40023800
 800531c:	42470000 	.word	0x42470000
 8005320:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005324:	4b88      	ldr	r3, [pc, #544]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 8005326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1ea      	bne.n	8005306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 8097 	beq.w	800546c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800533e:	2300      	movs	r3, #0
 8005340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005342:	4b81      	ldr	r3, [pc, #516]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10f      	bne.n	800536e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	4b7d      	ldr	r3, [pc, #500]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	4a7c      	ldr	r2, [pc, #496]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 8005358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535c:	6413      	str	r3, [r2, #64]	; 0x40
 800535e:	4b7a      	ldr	r3, [pc, #488]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005366:	60bb      	str	r3, [r7, #8]
 8005368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800536a:	2301      	movs	r3, #1
 800536c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536e:	4b77      	ldr	r3, [pc, #476]	; (800554c <HAL_RCC_OscConfig+0x474>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005376:	2b00      	cmp	r3, #0
 8005378:	d118      	bne.n	80053ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800537a:	4b74      	ldr	r3, [pc, #464]	; (800554c <HAL_RCC_OscConfig+0x474>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a73      	ldr	r2, [pc, #460]	; (800554c <HAL_RCC_OscConfig+0x474>)
 8005380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005386:	f7fd f8b1 	bl	80024ec <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800538e:	f7fd f8ad 	bl	80024ec <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e10c      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a0:	4b6a      	ldr	r3, [pc, #424]	; (800554c <HAL_RCC_OscConfig+0x474>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0f0      	beq.n	800538e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d106      	bne.n	80053c2 <HAL_RCC_OscConfig+0x2ea>
 80053b4:	4b64      	ldr	r3, [pc, #400]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 80053b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b8:	4a63      	ldr	r2, [pc, #396]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 80053ba:	f043 0301 	orr.w	r3, r3, #1
 80053be:	6713      	str	r3, [r2, #112]	; 0x70
 80053c0:	e01c      	b.n	80053fc <HAL_RCC_OscConfig+0x324>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	2b05      	cmp	r3, #5
 80053c8:	d10c      	bne.n	80053e4 <HAL_RCC_OscConfig+0x30c>
 80053ca:	4b5f      	ldr	r3, [pc, #380]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 80053cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ce:	4a5e      	ldr	r2, [pc, #376]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 80053d0:	f043 0304 	orr.w	r3, r3, #4
 80053d4:	6713      	str	r3, [r2, #112]	; 0x70
 80053d6:	4b5c      	ldr	r3, [pc, #368]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 80053d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053da:	4a5b      	ldr	r2, [pc, #364]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 80053dc:	f043 0301 	orr.w	r3, r3, #1
 80053e0:	6713      	str	r3, [r2, #112]	; 0x70
 80053e2:	e00b      	b.n	80053fc <HAL_RCC_OscConfig+0x324>
 80053e4:	4b58      	ldr	r3, [pc, #352]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e8:	4a57      	ldr	r2, [pc, #348]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 80053ea:	f023 0301 	bic.w	r3, r3, #1
 80053ee:	6713      	str	r3, [r2, #112]	; 0x70
 80053f0:	4b55      	ldr	r3, [pc, #340]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 80053f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f4:	4a54      	ldr	r2, [pc, #336]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 80053f6:	f023 0304 	bic.w	r3, r3, #4
 80053fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d015      	beq.n	8005430 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005404:	f7fd f872 	bl	80024ec <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540a:	e00a      	b.n	8005422 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800540c:	f7fd f86e 	bl	80024ec <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	f241 3288 	movw	r2, #5000	; 0x1388
 800541a:	4293      	cmp	r3, r2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e0cb      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005422:	4b49      	ldr	r3, [pc, #292]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 8005424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0ee      	beq.n	800540c <HAL_RCC_OscConfig+0x334>
 800542e:	e014      	b.n	800545a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005430:	f7fd f85c 	bl	80024ec <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005436:	e00a      	b.n	800544e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005438:	f7fd f858 	bl	80024ec <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	f241 3288 	movw	r2, #5000	; 0x1388
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e0b5      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800544e:	4b3e      	ldr	r3, [pc, #248]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1ee      	bne.n	8005438 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800545a:	7dfb      	ldrb	r3, [r7, #23]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d105      	bne.n	800546c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005460:	4b39      	ldr	r3, [pc, #228]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 8005462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005464:	4a38      	ldr	r2, [pc, #224]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 8005466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800546a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80a1 	beq.w	80055b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005476:	4b34      	ldr	r3, [pc, #208]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	2b08      	cmp	r3, #8
 8005480:	d05c      	beq.n	800553c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d141      	bne.n	800550e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548a:	4b31      	ldr	r3, [pc, #196]	; (8005550 <HAL_RCC_OscConfig+0x478>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005490:	f7fd f82c 	bl	80024ec <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005498:	f7fd f828 	bl	80024ec <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e087      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054aa:	4b27      	ldr	r3, [pc, #156]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69da      	ldr	r2, [r3, #28]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	019b      	lsls	r3, r3, #6
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	3b01      	subs	r3, #1
 80054d0:	041b      	lsls	r3, r3, #16
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	061b      	lsls	r3, r3, #24
 80054da:	491b      	ldr	r1, [pc, #108]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e0:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <HAL_RCC_OscConfig+0x478>)
 80054e2:	2201      	movs	r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e6:	f7fd f801 	bl	80024ec <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ee:	f7fc fffd 	bl	80024ec <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e05c      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005500:	4b11      	ldr	r3, [pc, #68]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x416>
 800550c:	e054      	b.n	80055b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800550e:	4b10      	ldr	r3, [pc, #64]	; (8005550 <HAL_RCC_OscConfig+0x478>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005514:	f7fc ffea 	bl	80024ec <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800551c:	f7fc ffe6 	bl	80024ec <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e045      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800552e:	4b06      	ldr	r3, [pc, #24]	; (8005548 <HAL_RCC_OscConfig+0x470>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x444>
 800553a:	e03d      	b.n	80055b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d107      	bne.n	8005554 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e038      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
 8005548:	40023800 	.word	0x40023800
 800554c:	40007000 	.word	0x40007000
 8005550:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005554:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <HAL_RCC_OscConfig+0x4ec>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d028      	beq.n	80055b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800556c:	429a      	cmp	r2, r3
 800556e:	d121      	bne.n	80055b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800557a:	429a      	cmp	r2, r3
 800557c:	d11a      	bne.n	80055b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005584:	4013      	ands	r3, r2
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800558a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800558c:	4293      	cmp	r3, r2
 800558e:	d111      	bne.n	80055b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559a:	085b      	lsrs	r3, r3, #1
 800559c:	3b01      	subs	r3, #1
 800559e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d107      	bne.n	80055b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d001      	beq.n	80055b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40023800 	.word	0x40023800

080055c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e0cc      	b.n	8005776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055dc:	4b68      	ldr	r3, [pc, #416]	; (8005780 <HAL_RCC_ClockConfig+0x1b8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d90c      	bls.n	8005604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ea:	4b65      	ldr	r3, [pc, #404]	; (8005780 <HAL_RCC_ClockConfig+0x1b8>)
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f2:	4b63      	ldr	r3, [pc, #396]	; (8005780 <HAL_RCC_ClockConfig+0x1b8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d001      	beq.n	8005604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e0b8      	b.n	8005776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d020      	beq.n	8005652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	d005      	beq.n	8005628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800561c:	4b59      	ldr	r3, [pc, #356]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	4a58      	ldr	r2, [pc, #352]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005634:	4b53      	ldr	r3, [pc, #332]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	4a52      	ldr	r2, [pc, #328]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 800563a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800563e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005640:	4b50      	ldr	r3, [pc, #320]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	494d      	ldr	r1, [pc, #308]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 800564e:	4313      	orrs	r3, r2
 8005650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d044      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d107      	bne.n	8005676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005666:	4b47      	ldr	r3, [pc, #284]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d119      	bne.n	80056a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e07f      	b.n	8005776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d003      	beq.n	8005686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005682:	2b03      	cmp	r3, #3
 8005684:	d107      	bne.n	8005696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005686:	4b3f      	ldr	r3, [pc, #252]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d109      	bne.n	80056a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e06f      	b.n	8005776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005696:	4b3b      	ldr	r3, [pc, #236]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e067      	b.n	8005776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056a6:	4b37      	ldr	r3, [pc, #220]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f023 0203 	bic.w	r2, r3, #3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	4934      	ldr	r1, [pc, #208]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056b8:	f7fc ff18 	bl	80024ec <HAL_GetTick>
 80056bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056be:	e00a      	b.n	80056d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c0:	f7fc ff14 	bl	80024ec <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e04f      	b.n	8005776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d6:	4b2b      	ldr	r3, [pc, #172]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 020c 	and.w	r2, r3, #12
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d1eb      	bne.n	80056c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056e8:	4b25      	ldr	r3, [pc, #148]	; (8005780 <HAL_RCC_ClockConfig+0x1b8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d20c      	bcs.n	8005710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f6:	4b22      	ldr	r3, [pc, #136]	; (8005780 <HAL_RCC_ClockConfig+0x1b8>)
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056fe:	4b20      	ldr	r3, [pc, #128]	; (8005780 <HAL_RCC_ClockConfig+0x1b8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d001      	beq.n	8005710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e032      	b.n	8005776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	d008      	beq.n	800572e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800571c:	4b19      	ldr	r3, [pc, #100]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	4916      	ldr	r1, [pc, #88]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	4313      	orrs	r3, r2
 800572c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0308 	and.w	r3, r3, #8
 8005736:	2b00      	cmp	r3, #0
 8005738:	d009      	beq.n	800574e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800573a:	4b12      	ldr	r3, [pc, #72]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	490e      	ldr	r1, [pc, #56]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	4313      	orrs	r3, r2
 800574c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800574e:	f000 f821 	bl	8005794 <HAL_RCC_GetSysClockFreq>
 8005752:	4602      	mov	r2, r0
 8005754:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	091b      	lsrs	r3, r3, #4
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	490a      	ldr	r1, [pc, #40]	; (8005788 <HAL_RCC_ClockConfig+0x1c0>)
 8005760:	5ccb      	ldrb	r3, [r1, r3]
 8005762:	fa22 f303 	lsr.w	r3, r2, r3
 8005766:	4a09      	ldr	r2, [pc, #36]	; (800578c <HAL_RCC_ClockConfig+0x1c4>)
 8005768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800576a:	4b09      	ldr	r3, [pc, #36]	; (8005790 <HAL_RCC_ClockConfig+0x1c8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7fc fd30 	bl	80021d4 <HAL_InitTick>

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	40023c00 	.word	0x40023c00
 8005784:	40023800 	.word	0x40023800
 8005788:	0800a480 	.word	0x0800a480
 800578c:	20000010 	.word	0x20000010
 8005790:	20000014 	.word	0x20000014

08005794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005798:	b094      	sub	sp, #80	; 0x50
 800579a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	647b      	str	r3, [r7, #68]	; 0x44
 80057a0:	2300      	movs	r3, #0
 80057a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a4:	2300      	movs	r3, #0
 80057a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057ac:	4b79      	ldr	r3, [pc, #484]	; (8005994 <HAL_RCC_GetSysClockFreq+0x200>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f003 030c 	and.w	r3, r3, #12
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d00d      	beq.n	80057d4 <HAL_RCC_GetSysClockFreq+0x40>
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	f200 80e1 	bhi.w	8005980 <HAL_RCC_GetSysClockFreq+0x1ec>
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <HAL_RCC_GetSysClockFreq+0x34>
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d003      	beq.n	80057ce <HAL_RCC_GetSysClockFreq+0x3a>
 80057c6:	e0db      	b.n	8005980 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057c8:	4b73      	ldr	r3, [pc, #460]	; (8005998 <HAL_RCC_GetSysClockFreq+0x204>)
 80057ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80057cc:	e0db      	b.n	8005986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057ce:	4b73      	ldr	r3, [pc, #460]	; (800599c <HAL_RCC_GetSysClockFreq+0x208>)
 80057d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057d2:	e0d8      	b.n	8005986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057d4:	4b6f      	ldr	r3, [pc, #444]	; (8005994 <HAL_RCC_GetSysClockFreq+0x200>)
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057de:	4b6d      	ldr	r3, [pc, #436]	; (8005994 <HAL_RCC_GetSysClockFreq+0x200>)
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d063      	beq.n	80058b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ea:	4b6a      	ldr	r3, [pc, #424]	; (8005994 <HAL_RCC_GetSysClockFreq+0x200>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	099b      	lsrs	r3, r3, #6
 80057f0:	2200      	movs	r2, #0
 80057f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80057f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057fc:	633b      	str	r3, [r7, #48]	; 0x30
 80057fe:	2300      	movs	r3, #0
 8005800:	637b      	str	r3, [r7, #52]	; 0x34
 8005802:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005806:	4622      	mov	r2, r4
 8005808:	462b      	mov	r3, r5
 800580a:	f04f 0000 	mov.w	r0, #0
 800580e:	f04f 0100 	mov.w	r1, #0
 8005812:	0159      	lsls	r1, r3, #5
 8005814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005818:	0150      	lsls	r0, r2, #5
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4621      	mov	r1, r4
 8005820:	1a51      	subs	r1, r2, r1
 8005822:	6139      	str	r1, [r7, #16]
 8005824:	4629      	mov	r1, r5
 8005826:	eb63 0301 	sbc.w	r3, r3, r1
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005838:	4659      	mov	r1, fp
 800583a:	018b      	lsls	r3, r1, #6
 800583c:	4651      	mov	r1, sl
 800583e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005842:	4651      	mov	r1, sl
 8005844:	018a      	lsls	r2, r1, #6
 8005846:	4651      	mov	r1, sl
 8005848:	ebb2 0801 	subs.w	r8, r2, r1
 800584c:	4659      	mov	r1, fp
 800584e:	eb63 0901 	sbc.w	r9, r3, r1
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800585e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005866:	4690      	mov	r8, r2
 8005868:	4699      	mov	r9, r3
 800586a:	4623      	mov	r3, r4
 800586c:	eb18 0303 	adds.w	r3, r8, r3
 8005870:	60bb      	str	r3, [r7, #8]
 8005872:	462b      	mov	r3, r5
 8005874:	eb49 0303 	adc.w	r3, r9, r3
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	f04f 0300 	mov.w	r3, #0
 8005882:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005886:	4629      	mov	r1, r5
 8005888:	024b      	lsls	r3, r1, #9
 800588a:	4621      	mov	r1, r4
 800588c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005890:	4621      	mov	r1, r4
 8005892:	024a      	lsls	r2, r1, #9
 8005894:	4610      	mov	r0, r2
 8005896:	4619      	mov	r1, r3
 8005898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800589a:	2200      	movs	r2, #0
 800589c:	62bb      	str	r3, [r7, #40]	; 0x28
 800589e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058a4:	f7fa fd0c 	bl	80002c0 <__aeabi_uldivmod>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4613      	mov	r3, r2
 80058ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b0:	e058      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058b2:	4b38      	ldr	r3, [pc, #224]	; (8005994 <HAL_RCC_GetSysClockFreq+0x200>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	099b      	lsrs	r3, r3, #6
 80058b8:	2200      	movs	r2, #0
 80058ba:	4618      	mov	r0, r3
 80058bc:	4611      	mov	r1, r2
 80058be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80058c2:	623b      	str	r3, [r7, #32]
 80058c4:	2300      	movs	r3, #0
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
 80058c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058cc:	4642      	mov	r2, r8
 80058ce:	464b      	mov	r3, r9
 80058d0:	f04f 0000 	mov.w	r0, #0
 80058d4:	f04f 0100 	mov.w	r1, #0
 80058d8:	0159      	lsls	r1, r3, #5
 80058da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058de:	0150      	lsls	r0, r2, #5
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4641      	mov	r1, r8
 80058e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80058ea:	4649      	mov	r1, r9
 80058ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005900:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005904:	ebb2 040a 	subs.w	r4, r2, sl
 8005908:	eb63 050b 	sbc.w	r5, r3, fp
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	00eb      	lsls	r3, r5, #3
 8005916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800591a:	00e2      	lsls	r2, r4, #3
 800591c:	4614      	mov	r4, r2
 800591e:	461d      	mov	r5, r3
 8005920:	4643      	mov	r3, r8
 8005922:	18e3      	adds	r3, r4, r3
 8005924:	603b      	str	r3, [r7, #0]
 8005926:	464b      	mov	r3, r9
 8005928:	eb45 0303 	adc.w	r3, r5, r3
 800592c:	607b      	str	r3, [r7, #4]
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	f04f 0300 	mov.w	r3, #0
 8005936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800593a:	4629      	mov	r1, r5
 800593c:	028b      	lsls	r3, r1, #10
 800593e:	4621      	mov	r1, r4
 8005940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005944:	4621      	mov	r1, r4
 8005946:	028a      	lsls	r2, r1, #10
 8005948:	4610      	mov	r0, r2
 800594a:	4619      	mov	r1, r3
 800594c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800594e:	2200      	movs	r2, #0
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	61fa      	str	r2, [r7, #28]
 8005954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005958:	f7fa fcb2 	bl	80002c0 <__aeabi_uldivmod>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4613      	mov	r3, r2
 8005962:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005964:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <HAL_RCC_GetSysClockFreq+0x200>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	0c1b      	lsrs	r3, r3, #16
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	3301      	adds	r3, #1
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005978:	fbb2 f3f3 	udiv	r3, r2, r3
 800597c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800597e:	e002      	b.n	8005986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <HAL_RCC_GetSysClockFreq+0x204>)
 8005982:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005988:	4618      	mov	r0, r3
 800598a:	3750      	adds	r7, #80	; 0x50
 800598c:	46bd      	mov	sp, r7
 800598e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005992:	bf00      	nop
 8005994:	40023800 	.word	0x40023800
 8005998:	00f42400 	.word	0x00f42400
 800599c:	007a1200 	.word	0x007a1200

080059a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059a4:	4b03      	ldr	r3, [pc, #12]	; (80059b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80059a6:	681b      	ldr	r3, [r3, #0]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	20000010 	.word	0x20000010

080059b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059bc:	f7ff fff0 	bl	80059a0 <HAL_RCC_GetHCLKFreq>
 80059c0:	4602      	mov	r2, r0
 80059c2:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	0a9b      	lsrs	r3, r3, #10
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	4903      	ldr	r1, [pc, #12]	; (80059dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059ce:	5ccb      	ldrb	r3, [r1, r3]
 80059d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40023800 	.word	0x40023800
 80059dc:	0800a490 	.word	0x0800a490

080059e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80059e4:	f7ff ffdc 	bl	80059a0 <HAL_RCC_GetHCLKFreq>
 80059e8:	4602      	mov	r2, r0
 80059ea:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	0b5b      	lsrs	r3, r3, #13
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	4903      	ldr	r1, [pc, #12]	; (8005a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059f6:	5ccb      	ldrb	r3, [r1, r3]
 80059f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40023800 	.word	0x40023800
 8005a04:	0800a490 	.word	0x0800a490

08005a08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	220f      	movs	r2, #15
 8005a16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a18:	4b12      	ldr	r3, [pc, #72]	; (8005a64 <HAL_RCC_GetClockConfig+0x5c>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 0203 	and.w	r2, r3, #3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a24:	4b0f      	ldr	r3, [pc, #60]	; (8005a64 <HAL_RCC_GetClockConfig+0x5c>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a30:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <HAL_RCC_GetClockConfig+0x5c>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005a3c:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <HAL_RCC_GetClockConfig+0x5c>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	08db      	lsrs	r3, r3, #3
 8005a42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a4a:	4b07      	ldr	r3, [pc, #28]	; (8005a68 <HAL_RCC_GetClockConfig+0x60>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 020f 	and.w	r2, r3, #15
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	601a      	str	r2, [r3, #0]
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40023800 	.word	0x40023800
 8005a68:	40023c00 	.word	0x40023c00

08005a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10b      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d105      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d075      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005aa0:	4b91      	ldr	r3, [pc, #580]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005aa6:	f7fc fd21 	bl	80024ec <HAL_GetTick>
 8005aaa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005aae:	f7fc fd1d 	bl	80024ec <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e189      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ac0:	4b8a      	ldr	r3, [pc, #552]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f0      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d009      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	019a      	lsls	r2, r3, #6
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	071b      	lsls	r3, r3, #28
 8005ae4:	4981      	ldr	r1, [pc, #516]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01f      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005af8:	4b7c      	ldr	r3, [pc, #496]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005afe:	0f1b      	lsrs	r3, r3, #28
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	019a      	lsls	r2, r3, #6
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	061b      	lsls	r3, r3, #24
 8005b12:	431a      	orrs	r2, r3
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	071b      	lsls	r3, r3, #28
 8005b18:	4974      	ldr	r1, [pc, #464]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b20:	4b72      	ldr	r3, [pc, #456]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b26:	f023 021f 	bic.w	r2, r3, #31
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	496e      	ldr	r1, [pc, #440]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00d      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	019a      	lsls	r2, r3, #6
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	061b      	lsls	r3, r3, #24
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	071b      	lsls	r3, r3, #28
 8005b58:	4964      	ldr	r1, [pc, #400]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b60:	4b61      	ldr	r3, [pc, #388]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b66:	f7fc fcc1 	bl	80024ec <HAL_GetTick>
 8005b6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b6c:	e008      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005b6e:	f7fc fcbd 	bl	80024ec <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e129      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b80:	4b5a      	ldr	r3, [pc, #360]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0f0      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d079      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ba4:	4b52      	ldr	r3, [pc, #328]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005baa:	f7fc fc9f 	bl	80024ec <HAL_GetTick>
 8005bae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005bb2:	f7fc fc9b 	bl	80024ec <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e107      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bc4:	4b49      	ldr	r3, [pc, #292]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bd0:	d0ef      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d020      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bde:	4b43      	ldr	r3, [pc, #268]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be4:	0f1b      	lsrs	r3, r3, #28
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	019a      	lsls	r2, r3, #6
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	061b      	lsls	r3, r3, #24
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	071b      	lsls	r3, r3, #28
 8005bfe:	493b      	ldr	r1, [pc, #236]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c06:	4b39      	ldr	r3, [pc, #228]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	4934      	ldr	r1, [pc, #208]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01e      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c2c:	4b2f      	ldr	r3, [pc, #188]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c32:	0e1b      	lsrs	r3, r3, #24
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	019a      	lsls	r2, r3, #6
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	061b      	lsls	r3, r3, #24
 8005c44:	431a      	orrs	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	071b      	lsls	r3, r3, #28
 8005c4c:	4927      	ldr	r1, [pc, #156]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c54:	4b25      	ldr	r3, [pc, #148]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	4922      	ldr	r1, [pc, #136]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c6a:	4b21      	ldr	r3, [pc, #132]	; (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c70:	f7fc fc3c 	bl	80024ec <HAL_GetTick>
 8005c74:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c76:	e008      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005c78:	f7fc fc38 	bl	80024ec <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e0a4      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c8a:	4b18      	ldr	r3, [pc, #96]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c96:	d1ef      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 808b 	beq.w	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	4b10      	ldr	r3, [pc, #64]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	4a0f      	ldr	r2, [pc, #60]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005cc2:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a0b      	ldr	r2, [pc, #44]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ccc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cce:	f7fc fc0d 	bl	80024ec <HAL_GetTick>
 8005cd2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cd4:	e010      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005cd6:	f7fc fc09 	bl	80024ec <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d909      	bls.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e075      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005ce8:	42470068 	.word	0x42470068
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	42470070 	.word	0x42470070
 8005cf4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005cf8:	4b38      	ldr	r3, [pc, #224]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0e8      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d04:	4b36      	ldr	r3, [pc, #216]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d0c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d02f      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d028      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d22:	4b2f      	ldr	r3, [pc, #188]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d2a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d2c:	4b2d      	ldr	r3, [pc, #180]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d32:	4b2c      	ldr	r3, [pc, #176]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d38:	4a29      	ldr	r2, [pc, #164]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d3e:	4b28      	ldr	r3, [pc, #160]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d114      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005d4a:	f7fc fbcf 	bl	80024ec <HAL_GetTick>
 8005d4e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d50:	e00a      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d52:	f7fc fbcb 	bl	80024ec <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e035      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d68:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0ee      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d80:	d10d      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005d82:	4b17      	ldr	r3, [pc, #92]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d96:	4912      	ldr	r1, [pc, #72]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	608b      	str	r3, [r1, #8]
 8005d9c:	e005      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005d9e:	4b10      	ldr	r3, [pc, #64]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	4a0f      	ldr	r2, [pc, #60]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005da4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005da8:	6093      	str	r3, [r2, #8]
 8005daa:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005db6:	490a      	ldr	r1, [pc, #40]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d004      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005dce:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005dd0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40007000 	.word	0x40007000
 8005de0:	40023800 	.word	0x40023800
 8005de4:	42470e40 	.word	0x42470e40
 8005de8:	424711e0 	.word	0x424711e0

08005dec <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d101      	bne.n	8005e00 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e025      	b.n	8005e4c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d106      	bne.n	8005e1a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7fc f9d3 	bl	80021c0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3304      	adds	r3, #4
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	f000 ffdd 	bl	8006dec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6818      	ldr	r0, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	f001 f832 	bl	8006ea6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e07b      	b.n	8005f5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d108      	bne.n	8005e80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e76:	d009      	beq.n	8005e8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	61da      	str	r2, [r3, #28]
 8005e7e:	e005      	b.n	8005e8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fc f800 	bl	8001eac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ec2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f06:	431a      	orrs	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f10:	ea42 0103 	orr.w	r1, r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	0c1b      	lsrs	r3, r3, #16
 8005f2a:	f003 0104 	and.w	r1, r3, #4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	f003 0210 	and.w	r2, r3, #16
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69da      	ldr	r2, [r3, #28]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e041      	b.n	8005ffc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d106      	bne.n	8005f92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7fb ffd5 	bl	8001f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f000 fa95 	bl	80064d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b01      	cmp	r3, #1
 8006016:	d001      	beq.n	800601c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e04e      	b.n	80060ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a23      	ldr	r2, [pc, #140]	; (80060c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d022      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x80>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006046:	d01d      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x80>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1f      	ldr	r2, [pc, #124]	; (80060cc <HAL_TIM_Base_Start_IT+0xc8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d018      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x80>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1e      	ldr	r2, [pc, #120]	; (80060d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d013      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x80>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1c      	ldr	r2, [pc, #112]	; (80060d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00e      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x80>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1b      	ldr	r2, [pc, #108]	; (80060d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d009      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x80>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a19      	ldr	r2, [pc, #100]	; (80060dc <HAL_TIM_Base_Start_IT+0xd8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d004      	beq.n	8006084 <HAL_TIM_Base_Start_IT+0x80>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a18      	ldr	r2, [pc, #96]	; (80060e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d111      	bne.n	80060a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b06      	cmp	r3, #6
 8006094:	d010      	beq.n	80060b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0201 	orr.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a6:	e007      	b.n	80060b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0201 	orr.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40010000 	.word	0x40010000
 80060cc:	40000400 	.word	0x40000400
 80060d0:	40000800 	.word	0x40000800
 80060d4:	40000c00 	.word	0x40000c00
 80060d8:	40010400 	.word	0x40010400
 80060dc:	40014000 	.word	0x40014000
 80060e0:	40001800 	.word	0x40001800

080060e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d122      	bne.n	8006140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b02      	cmp	r3, #2
 8006106:	d11b      	bne.n	8006140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f06f 0202 	mvn.w	r2, #2
 8006110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f9b5 	bl	8006496 <HAL_TIM_IC_CaptureCallback>
 800612c:	e005      	b.n	800613a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f9a7 	bl	8006482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f9b8 	bl	80064aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	2b04      	cmp	r3, #4
 800614c:	d122      	bne.n	8006194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b04      	cmp	r3, #4
 800615a:	d11b      	bne.n	8006194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f06f 0204 	mvn.w	r2, #4
 8006164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2202      	movs	r2, #2
 800616a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f98b 	bl	8006496 <HAL_TIM_IC_CaptureCallback>
 8006180:	e005      	b.n	800618e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f97d 	bl	8006482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f98e 	bl	80064aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0308 	and.w	r3, r3, #8
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d122      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d11b      	bne.n	80061e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0208 	mvn.w	r2, #8
 80061b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2204      	movs	r2, #4
 80061be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f961 	bl	8006496 <HAL_TIM_IC_CaptureCallback>
 80061d4:	e005      	b.n	80061e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f953 	bl	8006482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 f964 	bl	80064aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b10      	cmp	r3, #16
 80061f4:	d122      	bne.n	800623c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	2b10      	cmp	r3, #16
 8006202:	d11b      	bne.n	800623c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f06f 0210 	mvn.w	r2, #16
 800620c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2208      	movs	r2, #8
 8006212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f937 	bl	8006496 <HAL_TIM_IC_CaptureCallback>
 8006228:	e005      	b.n	8006236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f929 	bl	8006482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f93a 	bl	80064aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b01      	cmp	r3, #1
 8006248:	d10e      	bne.n	8006268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b01      	cmp	r3, #1
 8006256:	d107      	bne.n	8006268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0201 	mvn.w	r2, #1
 8006260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fb fbfe 	bl	8001a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006272:	2b80      	cmp	r3, #128	; 0x80
 8006274:	d10e      	bne.n	8006294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006280:	2b80      	cmp	r3, #128	; 0x80
 8006282:	d107      	bne.n	8006294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800628c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fae0 	bl	8006854 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629e:	2b40      	cmp	r3, #64	; 0x40
 80062a0:	d10e      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b40      	cmp	r3, #64	; 0x40
 80062ae:	d107      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f8ff 	bl	80064be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	d10e      	bne.n	80062ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d107      	bne.n	80062ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0220 	mvn.w	r2, #32
 80062e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 faaa 	bl	8006840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062ec:	bf00      	nop
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_TIM_ConfigClockSource+0x1c>
 800630c:	2302      	movs	r3, #2
 800630e:	e0b4      	b.n	800647a <HAL_TIM_ConfigClockSource+0x186>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800632e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006348:	d03e      	beq.n	80063c8 <HAL_TIM_ConfigClockSource+0xd4>
 800634a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634e:	f200 8087 	bhi.w	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006356:	f000 8086 	beq.w	8006466 <HAL_TIM_ConfigClockSource+0x172>
 800635a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800635e:	d87f      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006360:	2b70      	cmp	r3, #112	; 0x70
 8006362:	d01a      	beq.n	800639a <HAL_TIM_ConfigClockSource+0xa6>
 8006364:	2b70      	cmp	r3, #112	; 0x70
 8006366:	d87b      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006368:	2b60      	cmp	r3, #96	; 0x60
 800636a:	d050      	beq.n	800640e <HAL_TIM_ConfigClockSource+0x11a>
 800636c:	2b60      	cmp	r3, #96	; 0x60
 800636e:	d877      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006370:	2b50      	cmp	r3, #80	; 0x50
 8006372:	d03c      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0xfa>
 8006374:	2b50      	cmp	r3, #80	; 0x50
 8006376:	d873      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	d058      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x13a>
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d86f      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006380:	2b30      	cmp	r3, #48	; 0x30
 8006382:	d064      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x15a>
 8006384:	2b30      	cmp	r3, #48	; 0x30
 8006386:	d86b      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006388:	2b20      	cmp	r3, #32
 800638a:	d060      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x15a>
 800638c:	2b20      	cmp	r3, #32
 800638e:	d867      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d05c      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x15a>
 8006394:	2b10      	cmp	r3, #16
 8006396:	d05a      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x15a>
 8006398:	e062      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6818      	ldr	r0, [r3, #0]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	6899      	ldr	r1, [r3, #8]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f000 f9ad 	bl	8006708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	609a      	str	r2, [r3, #8]
      break;
 80063c6:	e04f      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6818      	ldr	r0, [r3, #0]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	6899      	ldr	r1, [r3, #8]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f000 f996 	bl	8006708 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ea:	609a      	str	r2, [r3, #8]
      break;
 80063ec:	e03c      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	6859      	ldr	r1, [r3, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	461a      	mov	r2, r3
 80063fc:	f000 f90a 	bl	8006614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2150      	movs	r1, #80	; 0x50
 8006406:	4618      	mov	r0, r3
 8006408:	f000 f963 	bl	80066d2 <TIM_ITRx_SetConfig>
      break;
 800640c:	e02c      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6859      	ldr	r1, [r3, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	461a      	mov	r2, r3
 800641c:	f000 f929 	bl	8006672 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2160      	movs	r1, #96	; 0x60
 8006426:	4618      	mov	r0, r3
 8006428:	f000 f953 	bl	80066d2 <TIM_ITRx_SetConfig>
      break;
 800642c:	e01c      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	461a      	mov	r2, r3
 800643c:	f000 f8ea 	bl	8006614 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2140      	movs	r1, #64	; 0x40
 8006446:	4618      	mov	r0, r3
 8006448:	f000 f943 	bl	80066d2 <TIM_ITRx_SetConfig>
      break;
 800644c:	e00c      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4619      	mov	r1, r3
 8006458:	4610      	mov	r0, r2
 800645a:	f000 f93a 	bl	80066d2 <TIM_ITRx_SetConfig>
      break;
 800645e:	e003      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
      break;
 8006464:	e000      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
	...

080064d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a40      	ldr	r2, [pc, #256]	; (80065e8 <TIM_Base_SetConfig+0x114>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d013      	beq.n	8006514 <TIM_Base_SetConfig+0x40>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f2:	d00f      	beq.n	8006514 <TIM_Base_SetConfig+0x40>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a3d      	ldr	r2, [pc, #244]	; (80065ec <TIM_Base_SetConfig+0x118>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00b      	beq.n	8006514 <TIM_Base_SetConfig+0x40>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a3c      	ldr	r2, [pc, #240]	; (80065f0 <TIM_Base_SetConfig+0x11c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d007      	beq.n	8006514 <TIM_Base_SetConfig+0x40>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a3b      	ldr	r2, [pc, #236]	; (80065f4 <TIM_Base_SetConfig+0x120>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_Base_SetConfig+0x40>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a3a      	ldr	r2, [pc, #232]	; (80065f8 <TIM_Base_SetConfig+0x124>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d108      	bne.n	8006526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2f      	ldr	r2, [pc, #188]	; (80065e8 <TIM_Base_SetConfig+0x114>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d02b      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006534:	d027      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2c      	ldr	r2, [pc, #176]	; (80065ec <TIM_Base_SetConfig+0x118>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d023      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2b      	ldr	r2, [pc, #172]	; (80065f0 <TIM_Base_SetConfig+0x11c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d01f      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a2a      	ldr	r2, [pc, #168]	; (80065f4 <TIM_Base_SetConfig+0x120>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d01b      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a29      	ldr	r2, [pc, #164]	; (80065f8 <TIM_Base_SetConfig+0x124>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d017      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a28      	ldr	r2, [pc, #160]	; (80065fc <TIM_Base_SetConfig+0x128>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a27      	ldr	r2, [pc, #156]	; (8006600 <TIM_Base_SetConfig+0x12c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00f      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a26      	ldr	r2, [pc, #152]	; (8006604 <TIM_Base_SetConfig+0x130>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00b      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a25      	ldr	r2, [pc, #148]	; (8006608 <TIM_Base_SetConfig+0x134>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d007      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a24      	ldr	r2, [pc, #144]	; (800660c <TIM_Base_SetConfig+0x138>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d003      	beq.n	8006586 <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a23      	ldr	r2, [pc, #140]	; (8006610 <TIM_Base_SetConfig+0x13c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d108      	bne.n	8006598 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a0a      	ldr	r2, [pc, #40]	; (80065e8 <TIM_Base_SetConfig+0x114>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d003      	beq.n	80065cc <TIM_Base_SetConfig+0xf8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a0c      	ldr	r2, [pc, #48]	; (80065f8 <TIM_Base_SetConfig+0x124>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d103      	bne.n	80065d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	615a      	str	r2, [r3, #20]
}
 80065da:	bf00      	nop
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40010000 	.word	0x40010000
 80065ec:	40000400 	.word	0x40000400
 80065f0:	40000800 	.word	0x40000800
 80065f4:	40000c00 	.word	0x40000c00
 80065f8:	40010400 	.word	0x40010400
 80065fc:	40014000 	.word	0x40014000
 8006600:	40014400 	.word	0x40014400
 8006604:	40014800 	.word	0x40014800
 8006608:	40001800 	.word	0x40001800
 800660c:	40001c00 	.word	0x40001c00
 8006610:	40002000 	.word	0x40002000

08006614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	f023 0201 	bic.w	r2, r3, #1
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800663e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f023 030a 	bic.w	r3, r3, #10
 8006650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	bf00      	nop
 8006668:	371c      	adds	r7, #28
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006672:	b480      	push	{r7}
 8006674:	b087      	sub	sp, #28
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f023 0210 	bic.w	r2, r3, #16
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800669c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	031b      	lsls	r3, r3, #12
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	621a      	str	r2, [r3, #32]
}
 80066c6:	bf00      	nop
 80066c8:	371c      	adds	r7, #28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b085      	sub	sp, #20
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f043 0307 	orr.w	r3, r3, #7
 80066f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	609a      	str	r2, [r3, #8]
}
 80066fc:	bf00      	nop
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	021a      	lsls	r2, r3, #8
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	431a      	orrs	r2, r3
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4313      	orrs	r3, r2
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	609a      	str	r2, [r3, #8]
}
 800673c:	bf00      	nop
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800675c:	2302      	movs	r3, #2
 800675e:	e05a      	b.n	8006816 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a21      	ldr	r2, [pc, #132]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d022      	beq.n	80067ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ac:	d01d      	beq.n	80067ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1d      	ldr	r2, [pc, #116]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d018      	beq.n	80067ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1b      	ldr	r2, [pc, #108]	; (800682c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d013      	beq.n	80067ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1a      	ldr	r2, [pc, #104]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00e      	beq.n	80067ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a18      	ldr	r2, [pc, #96]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d009      	beq.n	80067ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a17      	ldr	r2, [pc, #92]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d004      	beq.n	80067ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a15      	ldr	r2, [pc, #84]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d10c      	bne.n	8006804 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40010000 	.word	0x40010000
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40000c00 	.word	0x40000c00
 8006834:	40010400 	.word	0x40010400
 8006838:	40014000 	.word	0x40014000
 800683c:	40001800 	.word	0x40001800

08006840 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e03f      	b.n	80068fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7fb fb76 	bl	8001f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2224      	movs	r2, #36	; 0x24
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f829 	bl	8006904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	695a      	ldr	r2, [r3, #20]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006908:	b0c0      	sub	sp, #256	; 0x100
 800690a:	af00      	add	r7, sp, #0
 800690c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800691c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006920:	68d9      	ldr	r1, [r3, #12]
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	ea40 0301 	orr.w	r3, r0, r1
 800692c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800692e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	431a      	orrs	r2, r3
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	431a      	orrs	r2, r3
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	4313      	orrs	r3, r2
 800694c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800695c:	f021 010c 	bic.w	r1, r1, #12
 8006960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800696a:	430b      	orrs	r3, r1
 800696c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800696e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800697a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800697e:	6999      	ldr	r1, [r3, #24]
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	ea40 0301 	orr.w	r3, r0, r1
 800698a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800698c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	4b8f      	ldr	r3, [pc, #572]	; (8006bd0 <UART_SetConfig+0x2cc>)
 8006994:	429a      	cmp	r2, r3
 8006996:	d005      	beq.n	80069a4 <UART_SetConfig+0xa0>
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	4b8d      	ldr	r3, [pc, #564]	; (8006bd4 <UART_SetConfig+0x2d0>)
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d104      	bne.n	80069ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069a4:	f7ff f81c 	bl	80059e0 <HAL_RCC_GetPCLK2Freq>
 80069a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80069ac:	e003      	b.n	80069b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069ae:	f7ff f803 	bl	80059b8 <HAL_RCC_GetPCLK1Freq>
 80069b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c0:	f040 810c 	bne.w	8006bdc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80069d6:	4622      	mov	r2, r4
 80069d8:	462b      	mov	r3, r5
 80069da:	1891      	adds	r1, r2, r2
 80069dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80069de:	415b      	adcs	r3, r3
 80069e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069e6:	4621      	mov	r1, r4
 80069e8:	eb12 0801 	adds.w	r8, r2, r1
 80069ec:	4629      	mov	r1, r5
 80069ee:	eb43 0901 	adc.w	r9, r3, r1
 80069f2:	f04f 0200 	mov.w	r2, #0
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a06:	4690      	mov	r8, r2
 8006a08:	4699      	mov	r9, r3
 8006a0a:	4623      	mov	r3, r4
 8006a0c:	eb18 0303 	adds.w	r3, r8, r3
 8006a10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a14:	462b      	mov	r3, r5
 8006a16:	eb49 0303 	adc.w	r3, r9, r3
 8006a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a32:	460b      	mov	r3, r1
 8006a34:	18db      	adds	r3, r3, r3
 8006a36:	653b      	str	r3, [r7, #80]	; 0x50
 8006a38:	4613      	mov	r3, r2
 8006a3a:	eb42 0303 	adc.w	r3, r2, r3
 8006a3e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a48:	f7f9 fc3a 	bl	80002c0 <__aeabi_uldivmod>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4b61      	ldr	r3, [pc, #388]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006a52:	fba3 2302 	umull	r2, r3, r3, r2
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	011c      	lsls	r4, r3, #4
 8006a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	1891      	adds	r1, r2, r2
 8006a72:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a74:	415b      	adcs	r3, r3
 8006a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	eb12 0a01 	adds.w	sl, r2, r1
 8006a82:	4649      	mov	r1, r9
 8006a84:	eb43 0b01 	adc.w	fp, r3, r1
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a9c:	4692      	mov	sl, r2
 8006a9e:	469b      	mov	fp, r3
 8006aa0:	4643      	mov	r3, r8
 8006aa2:	eb1a 0303 	adds.w	r3, sl, r3
 8006aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006aaa:	464b      	mov	r3, r9
 8006aac:	eb4b 0303 	adc.w	r3, fp, r3
 8006ab0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ac0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ac4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	18db      	adds	r3, r3, r3
 8006acc:	643b      	str	r3, [r7, #64]	; 0x40
 8006ace:	4613      	mov	r3, r2
 8006ad0:	eb42 0303 	adc.w	r3, r2, r3
 8006ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ada:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ade:	f7f9 fbef 	bl	80002c0 <__aeabi_uldivmod>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	4b3b      	ldr	r3, [pc, #236]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006aea:	fba3 2301 	umull	r2, r3, r3, r1
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	2264      	movs	r2, #100	; 0x64
 8006af2:	fb02 f303 	mul.w	r3, r2, r3
 8006af6:	1acb      	subs	r3, r1, r3
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006afe:	4b36      	ldr	r3, [pc, #216]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006b00:	fba3 2302 	umull	r2, r3, r3, r2
 8006b04:	095b      	lsrs	r3, r3, #5
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b0c:	441c      	add	r4, r3
 8006b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b20:	4642      	mov	r2, r8
 8006b22:	464b      	mov	r3, r9
 8006b24:	1891      	adds	r1, r2, r2
 8006b26:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b28:	415b      	adcs	r3, r3
 8006b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b30:	4641      	mov	r1, r8
 8006b32:	1851      	adds	r1, r2, r1
 8006b34:	6339      	str	r1, [r7, #48]	; 0x30
 8006b36:	4649      	mov	r1, r9
 8006b38:	414b      	adcs	r3, r1
 8006b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	f04f 0300 	mov.w	r3, #0
 8006b44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b48:	4659      	mov	r1, fp
 8006b4a:	00cb      	lsls	r3, r1, #3
 8006b4c:	4651      	mov	r1, sl
 8006b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b52:	4651      	mov	r1, sl
 8006b54:	00ca      	lsls	r2, r1, #3
 8006b56:	4610      	mov	r0, r2
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	189b      	adds	r3, r3, r2
 8006b60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b64:	464b      	mov	r3, r9
 8006b66:	460a      	mov	r2, r1
 8006b68:	eb42 0303 	adc.w	r3, r2, r3
 8006b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b84:	460b      	mov	r3, r1
 8006b86:	18db      	adds	r3, r3, r3
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	eb42 0303 	adc.w	r3, r2, r3
 8006b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b9a:	f7f9 fb91 	bl	80002c0 <__aeabi_uldivmod>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4b0d      	ldr	r3, [pc, #52]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ba8:	095b      	lsrs	r3, r3, #5
 8006baa:	2164      	movs	r1, #100	; 0x64
 8006bac:	fb01 f303 	mul.w	r3, r1, r3
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	3332      	adds	r3, #50	; 0x32
 8006bb6:	4a08      	ldr	r2, [pc, #32]	; (8006bd8 <UART_SetConfig+0x2d4>)
 8006bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bbc:	095b      	lsrs	r3, r3, #5
 8006bbe:	f003 0207 	and.w	r2, r3, #7
 8006bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4422      	add	r2, r4
 8006bca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bcc:	e105      	b.n	8006dda <UART_SetConfig+0x4d6>
 8006bce:	bf00      	nop
 8006bd0:	40011000 	.word	0x40011000
 8006bd4:	40011400 	.word	0x40011400
 8006bd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006be0:	2200      	movs	r2, #0
 8006be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006be6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006bea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006bee:	4642      	mov	r2, r8
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	1891      	adds	r1, r2, r2
 8006bf4:	6239      	str	r1, [r7, #32]
 8006bf6:	415b      	adcs	r3, r3
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bfe:	4641      	mov	r1, r8
 8006c00:	1854      	adds	r4, r2, r1
 8006c02:	4649      	mov	r1, r9
 8006c04:	eb43 0501 	adc.w	r5, r3, r1
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	f04f 0300 	mov.w	r3, #0
 8006c10:	00eb      	lsls	r3, r5, #3
 8006c12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c16:	00e2      	lsls	r2, r4, #3
 8006c18:	4614      	mov	r4, r2
 8006c1a:	461d      	mov	r5, r3
 8006c1c:	4643      	mov	r3, r8
 8006c1e:	18e3      	adds	r3, r4, r3
 8006c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c24:	464b      	mov	r3, r9
 8006c26:	eb45 0303 	adc.w	r3, r5, r3
 8006c2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c3e:	f04f 0200 	mov.w	r2, #0
 8006c42:	f04f 0300 	mov.w	r3, #0
 8006c46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c4a:	4629      	mov	r1, r5
 8006c4c:	008b      	lsls	r3, r1, #2
 8006c4e:	4621      	mov	r1, r4
 8006c50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c54:	4621      	mov	r1, r4
 8006c56:	008a      	lsls	r2, r1, #2
 8006c58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c5c:	f7f9 fb30 	bl	80002c0 <__aeabi_uldivmod>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4b60      	ldr	r3, [pc, #384]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006c66:	fba3 2302 	umull	r2, r3, r3, r2
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	011c      	lsls	r4, r3, #4
 8006c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c72:	2200      	movs	r2, #0
 8006c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c80:	4642      	mov	r2, r8
 8006c82:	464b      	mov	r3, r9
 8006c84:	1891      	adds	r1, r2, r2
 8006c86:	61b9      	str	r1, [r7, #24]
 8006c88:	415b      	adcs	r3, r3
 8006c8a:	61fb      	str	r3, [r7, #28]
 8006c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c90:	4641      	mov	r1, r8
 8006c92:	1851      	adds	r1, r2, r1
 8006c94:	6139      	str	r1, [r7, #16]
 8006c96:	4649      	mov	r1, r9
 8006c98:	414b      	adcs	r3, r1
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	f04f 0300 	mov.w	r3, #0
 8006ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ca8:	4659      	mov	r1, fp
 8006caa:	00cb      	lsls	r3, r1, #3
 8006cac:	4651      	mov	r1, sl
 8006cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cb2:	4651      	mov	r1, sl
 8006cb4:	00ca      	lsls	r2, r1, #3
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	4642      	mov	r2, r8
 8006cbe:	189b      	adds	r3, r3, r2
 8006cc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cc4:	464b      	mov	r3, r9
 8006cc6:	460a      	mov	r2, r1
 8006cc8:	eb42 0303 	adc.w	r3, r2, r3
 8006ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006cdc:	f04f 0200 	mov.w	r2, #0
 8006ce0:	f04f 0300 	mov.w	r3, #0
 8006ce4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ce8:	4649      	mov	r1, r9
 8006cea:	008b      	lsls	r3, r1, #2
 8006cec:	4641      	mov	r1, r8
 8006cee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cf2:	4641      	mov	r1, r8
 8006cf4:	008a      	lsls	r2, r1, #2
 8006cf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006cfa:	f7f9 fae1 	bl	80002c0 <__aeabi_uldivmod>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4b39      	ldr	r3, [pc, #228]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006d04:	fba3 1302 	umull	r1, r3, r3, r2
 8006d08:	095b      	lsrs	r3, r3, #5
 8006d0a:	2164      	movs	r1, #100	; 0x64
 8006d0c:	fb01 f303 	mul.w	r3, r1, r3
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	3332      	adds	r3, #50	; 0x32
 8006d16:	4a34      	ldr	r2, [pc, #208]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006d18:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1c:	095b      	lsrs	r3, r3, #5
 8006d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d22:	441c      	add	r4, r3
 8006d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d28:	2200      	movs	r2, #0
 8006d2a:	673b      	str	r3, [r7, #112]	; 0x70
 8006d2c:	677a      	str	r2, [r7, #116]	; 0x74
 8006d2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d32:	4642      	mov	r2, r8
 8006d34:	464b      	mov	r3, r9
 8006d36:	1891      	adds	r1, r2, r2
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	415b      	adcs	r3, r3
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d42:	4641      	mov	r1, r8
 8006d44:	1851      	adds	r1, r2, r1
 8006d46:	6039      	str	r1, [r7, #0]
 8006d48:	4649      	mov	r1, r9
 8006d4a:	414b      	adcs	r3, r1
 8006d4c:	607b      	str	r3, [r7, #4]
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d5a:	4659      	mov	r1, fp
 8006d5c:	00cb      	lsls	r3, r1, #3
 8006d5e:	4651      	mov	r1, sl
 8006d60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d64:	4651      	mov	r1, sl
 8006d66:	00ca      	lsls	r2, r1, #3
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	4642      	mov	r2, r8
 8006d70:	189b      	adds	r3, r3, r2
 8006d72:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d74:	464b      	mov	r3, r9
 8006d76:	460a      	mov	r2, r1
 8006d78:	eb42 0303 	adc.w	r3, r2, r3
 8006d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	663b      	str	r3, [r7, #96]	; 0x60
 8006d88:	667a      	str	r2, [r7, #100]	; 0x64
 8006d8a:	f04f 0200 	mov.w	r2, #0
 8006d8e:	f04f 0300 	mov.w	r3, #0
 8006d92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d96:	4649      	mov	r1, r9
 8006d98:	008b      	lsls	r3, r1, #2
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006da0:	4641      	mov	r1, r8
 8006da2:	008a      	lsls	r2, r1, #2
 8006da4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006da8:	f7f9 fa8a 	bl	80002c0 <__aeabi_uldivmod>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4b0d      	ldr	r3, [pc, #52]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006db2:	fba3 1302 	umull	r1, r3, r3, r2
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	2164      	movs	r1, #100	; 0x64
 8006dba:	fb01 f303 	mul.w	r3, r1, r3
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	3332      	adds	r3, #50	; 0x32
 8006dc4:	4a08      	ldr	r2, [pc, #32]	; (8006de8 <UART_SetConfig+0x4e4>)
 8006dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	f003 020f 	and.w	r2, r3, #15
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4422      	add	r2, r4
 8006dd8:	609a      	str	r2, [r3, #8]
}
 8006dda:	bf00      	nop
 8006ddc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006de0:	46bd      	mov	sp, r7
 8006de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006de6:	bf00      	nop
 8006de8:	51eb851f 	.word	0x51eb851f

08006dec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d123      	bne.n	8006e46 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006e06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	6851      	ldr	r1, [r2, #4]
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	6892      	ldr	r2, [r2, #8]
 8006e12:	4311      	orrs	r1, r2
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	68d2      	ldr	r2, [r2, #12]
 8006e18:	4311      	orrs	r1, r2
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	6912      	ldr	r2, [r2, #16]
 8006e1e:	4311      	orrs	r1, r2
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	6952      	ldr	r2, [r2, #20]
 8006e24:	4311      	orrs	r1, r2
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	6992      	ldr	r2, [r2, #24]
 8006e2a:	4311      	orrs	r1, r2
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	69d2      	ldr	r2, [r2, #28]
 8006e30:	4311      	orrs	r1, r2
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	6a12      	ldr	r2, [r2, #32]
 8006e36:	4311      	orrs	r1, r2
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	601a      	str	r2, [r3, #0]
 8006e44:	e028      	b.n	8006e98 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	69d9      	ldr	r1, [r3, #28]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	4319      	orrs	r1, r3
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006e6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e70:	683a      	ldr	r2, [r7, #0]
 8006e72:	6851      	ldr	r1, [r2, #4]
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	6892      	ldr	r2, [r2, #8]
 8006e78:	4311      	orrs	r1, r2
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	68d2      	ldr	r2, [r2, #12]
 8006e7e:	4311      	orrs	r1, r2
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	6912      	ldr	r2, [r2, #16]
 8006e84:	4311      	orrs	r1, r2
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	6952      	ldr	r2, [r2, #20]
 8006e8a:	4311      	orrs	r1, r2
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	6992      	ldr	r2, [r2, #24]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d128      	bne.n	8006f0a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	1e59      	subs	r1, r3, #1
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	4319      	orrs	r1, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	4319      	orrs	r1, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	031b      	lsls	r3, r3, #12
 8006ee2:	4319      	orrs	r1, r3
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	4319      	orrs	r1, r3
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	051b      	lsls	r3, r3, #20
 8006ef6:	4319      	orrs	r1, r3
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	061b      	lsls	r3, r3, #24
 8006f00:	430b      	orrs	r3, r1
 8006f02:	431a      	orrs	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	609a      	str	r2, [r3, #8]
 8006f08:	e02f      	b.n	8006f6a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	68d2      	ldr	r2, [r2, #12]
 8006f1a:	3a01      	subs	r2, #1
 8006f1c:	0311      	lsls	r1, r2, #12
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	6952      	ldr	r2, [r2, #20]
 8006f22:	3a01      	subs	r2, #1
 8006f24:	0512      	lsls	r2, r2, #20
 8006f26:	430a      	orrs	r2, r1
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	1e59      	subs	r1, r3, #1
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	4319      	orrs	r1, r3
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	021b      	lsls	r3, r3, #8
 8006f4e:	4319      	orrs	r1, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	041b      	lsls	r3, r3, #16
 8006f58:	4319      	orrs	r1, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	061b      	lsls	r3, r3, #24
 8006f62:	430b      	orrs	r3, r1
 8006f64:	431a      	orrs	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f78:	b084      	sub	sp, #16
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	f107 001c 	add.w	r0, r7, #28
 8006f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d122      	bne.n	8006fd6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d105      	bne.n	8006fca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f9c0 	bl	8007350 <USB_CoreReset>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]
 8006fd4:	e01a      	b.n	800700c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f9b4 	bl	8007350 <USB_CoreReset>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d106      	bne.n	8007000 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	639a      	str	r2, [r3, #56]	; 0x38
 8006ffe:	e005      	b.n	800700c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007004:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	2b01      	cmp	r3, #1
 8007010:	d10b      	bne.n	800702a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f043 0206 	orr.w	r2, r3, #6
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f043 0220 	orr.w	r2, r3, #32
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007036:	b004      	add	sp, #16
 8007038:	4770      	bx	lr

0800703a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f043 0201 	orr.w	r2, r3, #1
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f023 0201 	bic.w	r2, r3, #1
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	460b      	mov	r3, r1
 8007088:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800709a:	78fb      	ldrb	r3, [r7, #3]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d115      	bne.n	80070cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070ac:	2001      	movs	r0, #1
 80070ae:	f7fb fa29 	bl	8002504 <HAL_Delay>
      ms++;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3301      	adds	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f93a 	bl	8007332 <USB_GetMode>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d01e      	beq.n	8007102 <USB_SetCurrentMode+0x84>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b31      	cmp	r3, #49	; 0x31
 80070c8:	d9f0      	bls.n	80070ac <USB_SetCurrentMode+0x2e>
 80070ca:	e01a      	b.n	8007102 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070cc:	78fb      	ldrb	r3, [r7, #3]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d115      	bne.n	80070fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070de:	2001      	movs	r0, #1
 80070e0:	f7fb fa10 	bl	8002504 <HAL_Delay>
      ms++;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	3301      	adds	r3, #1
 80070e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f921 	bl	8007332 <USB_GetMode>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <USB_SetCurrentMode+0x84>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b31      	cmp	r3, #49	; 0x31
 80070fa:	d9f0      	bls.n	80070de <USB_SetCurrentMode+0x60>
 80070fc:	e001      	b.n	8007102 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e005      	b.n	800710e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b32      	cmp	r3, #50	; 0x32
 8007106:	d101      	bne.n	800710c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e000      	b.n	800710e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3301      	adds	r3, #1
 800712a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4a13      	ldr	r2, [pc, #76]	; (800717c <USB_FlushTxFifo+0x64>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d901      	bls.n	8007138 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e01b      	b.n	8007170 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	daf2      	bge.n	8007126 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	019b      	lsls	r3, r3, #6
 8007148:	f043 0220 	orr.w	r2, r3, #32
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	3301      	adds	r3, #1
 8007154:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4a08      	ldr	r2, [pc, #32]	; (800717c <USB_FlushTxFifo+0x64>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d901      	bls.n	8007162 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e006      	b.n	8007170 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b20      	cmp	r3, #32
 800716c:	d0f0      	beq.n	8007150 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	00030d40 	.word	0x00030d40

08007180 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3301      	adds	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4a11      	ldr	r2, [pc, #68]	; (80071dc <USB_FlushRxFifo+0x5c>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d901      	bls.n	800719e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e018      	b.n	80071d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	daf2      	bge.n	800718c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2210      	movs	r2, #16
 80071ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3301      	adds	r3, #1
 80071b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4a08      	ldr	r2, [pc, #32]	; (80071dc <USB_FlushRxFifo+0x5c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d901      	bls.n	80071c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e006      	b.n	80071d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f003 0310 	and.w	r3, r3, #16
 80071ca:	2b10      	cmp	r3, #16
 80071cc:	d0f0      	beq.n	80071b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	00030d40 	.word	0x00030d40

080071e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b089      	sub	sp, #36	; 0x24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	4611      	mov	r1, r2
 80071ec:	461a      	mov	r2, r3
 80071ee:	460b      	mov	r3, r1
 80071f0:	71fb      	strb	r3, [r7, #7]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007202:	2b00      	cmp	r3, #0
 8007204:	d123      	bne.n	800724e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007206:	88bb      	ldrh	r3, [r7, #4]
 8007208:	3303      	adds	r3, #3
 800720a:	089b      	lsrs	r3, r3, #2
 800720c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800720e:	2300      	movs	r3, #0
 8007210:	61bb      	str	r3, [r7, #24]
 8007212:	e018      	b.n	8007246 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007214:	79fb      	ldrb	r3, [r7, #7]
 8007216:	031a      	lsls	r2, r3, #12
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	4413      	add	r3, r2
 800721c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007220:	461a      	mov	r2, r3
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	3301      	adds	r3, #1
 800722c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	3301      	adds	r3, #1
 8007232:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	3301      	adds	r3, #1
 8007238:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	3301      	adds	r3, #1
 800723e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	3301      	adds	r3, #1
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	429a      	cmp	r2, r3
 800724c:	d3e2      	bcc.n	8007214 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3724      	adds	r7, #36	; 0x24
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800725c:	b480      	push	{r7}
 800725e:	b08b      	sub	sp, #44	; 0x2c
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	4613      	mov	r3, r2
 8007268:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	089b      	lsrs	r3, r3, #2
 8007276:	b29b      	uxth	r3, r3
 8007278:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800727a:	88fb      	ldrh	r3, [r7, #6]
 800727c:	f003 0303 	and.w	r3, r3, #3
 8007280:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007282:	2300      	movs	r3, #0
 8007284:	623b      	str	r3, [r7, #32]
 8007286:	e014      	b.n	80072b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	601a      	str	r2, [r3, #0]
    pDest++;
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	3301      	adds	r3, #1
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	3301      	adds	r3, #1
 800729e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	3301      	adds	r3, #1
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	3301      	adds	r3, #1
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	3301      	adds	r3, #1
 80072b0:	623b      	str	r3, [r7, #32]
 80072b2:	6a3a      	ldr	r2, [r7, #32]
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d3e6      	bcc.n	8007288 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80072ba:	8bfb      	ldrh	r3, [r7, #30]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01e      	beq.n	80072fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ca:	461a      	mov	r2, r3
 80072cc:	f107 0310 	add.w	r3, r7, #16
 80072d0:	6812      	ldr	r2, [r2, #0]
 80072d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	fa22 f303 	lsr.w	r3, r2, r3
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	701a      	strb	r2, [r3, #0]
      i++;
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	3301      	adds	r3, #1
 80072ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	3301      	adds	r3, #1
 80072f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80072f2:	8bfb      	ldrh	r3, [r7, #30]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072f8:	8bfb      	ldrh	r3, [r7, #30]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1ea      	bne.n	80072d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007300:	4618      	mov	r0, r3
 8007302:	372c      	adds	r7, #44	; 0x2c
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4013      	ands	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007324:	68fb      	ldr	r3, [r7, #12]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	f003 0301 	and.w	r3, r3, #1
}
 8007342:	4618      	mov	r0, r3
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
	...

08007350 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	4a13      	ldr	r2, [pc, #76]	; (80073b4 <USB_CoreReset+0x64>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d901      	bls.n	800736e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e01b      	b.n	80073a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	daf2      	bge.n	800735c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f043 0201 	orr.w	r2, r3, #1
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3301      	adds	r3, #1
 800738a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4a09      	ldr	r2, [pc, #36]	; (80073b4 <USB_CoreReset+0x64>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d901      	bls.n	8007398 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e006      	b.n	80073a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d0f0      	beq.n	8007386 <USB_CoreReset+0x36>

  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3714      	adds	r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	00030d40 	.word	0x00030d40

080073b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073b8:	b084      	sub	sp, #16
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b086      	sub	sp, #24
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80073c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073d8:	461a      	mov	r2, r3
 80073da:	2300      	movs	r3, #0
 80073dc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740a:	2b00      	cmp	r3, #0
 800740c:	d018      	beq.n	8007440 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	2b01      	cmp	r3, #1
 8007412:	d10a      	bne.n	800742a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007422:	f043 0304 	orr.w	r3, r3, #4
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	e014      	b.n	8007454 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007438:	f023 0304 	bic.w	r3, r3, #4
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	e009      	b.n	8007454 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800744e:	f023 0304 	bic.w	r3, r3, #4
 8007452:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007454:	2110      	movs	r1, #16
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff fe5e 	bl	8007118 <USB_FlushTxFifo>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff fe8a 	bl	8007180 <USB_FlushRxFifo>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007476:	2300      	movs	r3, #0
 8007478:	613b      	str	r3, [r7, #16]
 800747a:	e015      	b.n	80074a8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007488:	461a      	mov	r2, r3
 800748a:	f04f 33ff 	mov.w	r3, #4294967295
 800748e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4413      	add	r3, r2
 8007498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800749c:	461a      	mov	r2, r3
 800749e:	2300      	movs	r3, #0
 80074a0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	3301      	adds	r3, #1
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d3e5      	bcc.n	800747c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f04f 32ff 	mov.w	r2, #4294967295
 80074bc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00b      	beq.n	80074e2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074d0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a13      	ldr	r2, [pc, #76]	; (8007524 <USB_HostInit+0x16c>)
 80074d6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a13      	ldr	r2, [pc, #76]	; (8007528 <USB_HostInit+0x170>)
 80074dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80074e0:	e009      	b.n	80074f6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2280      	movs	r2, #128	; 0x80
 80074e6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a10      	ldr	r2, [pc, #64]	; (800752c <USB_HostInit+0x174>)
 80074ec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a0f      	ldr	r2, [pc, #60]	; (8007530 <USB_HostInit+0x178>)
 80074f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d105      	bne.n	8007508 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	f043 0210 	orr.w	r2, r3, #16
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	699a      	ldr	r2, [r3, #24]
 800750c:	4b09      	ldr	r3, [pc, #36]	; (8007534 <USB_HostInit+0x17c>)
 800750e:	4313      	orrs	r3, r2
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007514:	7dfb      	ldrb	r3, [r7, #23]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007520:	b004      	add	sp, #16
 8007522:	4770      	bx	lr
 8007524:	01000200 	.word	0x01000200
 8007528:	00e00300 	.word	0x00e00300
 800752c:	00600080 	.word	0x00600080
 8007530:	004000e0 	.word	0x004000e0
 8007534:	a3200008 	.word	0xa3200008

08007538 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007556:	f023 0303 	bic.w	r3, r3, #3
 800755a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	68f9      	ldr	r1, [r7, #12]
 800756c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007570:	4313      	orrs	r3, r2
 8007572:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d107      	bne.n	800758a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007580:	461a      	mov	r2, r3
 8007582:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007586:	6053      	str	r3, [r2, #4]
 8007588:	e009      	b.n	800759e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800758a:	78fb      	ldrb	r3, [r7, #3]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d106      	bne.n	800759e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007596:	461a      	mov	r2, r3
 8007598:	f241 7370 	movw	r3, #6000	; 0x1770
 800759c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3714      	adds	r7, #20
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80075d0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d109      	bne.n	80075f0 <USB_DriveVbus+0x44>
 80075dc:	78fb      	ldrb	r3, [r7, #3]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d106      	bne.n	80075f0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80075ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80075ee:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075fa:	d109      	bne.n	8007610 <USB_DriveVbus+0x64>
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d106      	bne.n	8007610 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800760a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800760e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800761e:	b480      	push	{r7}
 8007620:	b085      	sub	sp, #20
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	0c5b      	lsrs	r3, r3, #17
 800763c:	f003 0303 	and.w	r3, r3, #3
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	b29b      	uxth	r3, r3
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
	...

08007670 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b088      	sub	sp, #32
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	4608      	mov	r0, r1
 800767a:	4611      	mov	r1, r2
 800767c:	461a      	mov	r2, r3
 800767e:	4603      	mov	r3, r0
 8007680:	70fb      	strb	r3, [r7, #3]
 8007682:	460b      	mov	r3, r1
 8007684:	70bb      	strb	r3, [r7, #2]
 8007686:	4613      	mov	r3, r2
 8007688:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	4413      	add	r3, r2
 800769a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800769e:	461a      	mov	r2, r3
 80076a0:	f04f 33ff 	mov.w	r3, #4294967295
 80076a4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80076a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d87e      	bhi.n	80077ac <USB_HC_Init+0x13c>
 80076ae:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <USB_HC_Init+0x44>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	080076c5 	.word	0x080076c5
 80076b8:	0800776f 	.word	0x0800776f
 80076bc:	080076c5 	.word	0x080076c5
 80076c0:	08007731 	.word	0x08007731
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d0:	461a      	mov	r2, r3
 80076d2:	f240 439d 	movw	r3, #1181	; 0x49d
 80076d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80076d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	da10      	bge.n	8007702 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	78fa      	ldrb	r2, [r7, #3]
 80076f0:	0151      	lsls	r1, r2, #5
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	440a      	add	r2, r1
 80076f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076fe:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007700:	e057      	b.n	80077b2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770a:	2b00      	cmp	r3, #0
 800770c:	d051      	beq.n	80077b2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800770e:	78fb      	ldrb	r3, [r7, #3]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	4413      	add	r3, r2
 8007716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	78fa      	ldrb	r2, [r7, #3]
 800771e:	0151      	lsls	r1, r2, #5
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	440a      	add	r2, r1
 8007724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007728:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800772c:	60d3      	str	r3, [r2, #12]
      break;
 800772e:	e040      	b.n	80077b2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007730:	78fb      	ldrb	r3, [r7, #3]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	4413      	add	r3, r2
 8007738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773c:	461a      	mov	r2, r3
 800773e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007742:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007744:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007748:	2b00      	cmp	r3, #0
 800774a:	da34      	bge.n	80077b6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800774c:	78fb      	ldrb	r3, [r7, #3]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	4413      	add	r3, r2
 8007754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	78fa      	ldrb	r2, [r7, #3]
 800775c:	0151      	lsls	r1, r2, #5
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	440a      	add	r2, r1
 8007762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800776a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800776c:	e023      	b.n	80077b6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800776e:	78fb      	ldrb	r3, [r7, #3]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	4413      	add	r3, r2
 8007776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777a:	461a      	mov	r2, r3
 800777c:	f240 2325 	movw	r3, #549	; 0x225
 8007780:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007782:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007786:	2b00      	cmp	r3, #0
 8007788:	da17      	bge.n	80077ba <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800778a:	78fb      	ldrb	r3, [r7, #3]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	4413      	add	r3, r2
 8007792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	78fa      	ldrb	r2, [r7, #3]
 800779a:	0151      	lsls	r1, r2, #5
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	440a      	add	r2, r1
 80077a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077a4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80077a8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80077aa:	e006      	b.n	80077ba <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	77fb      	strb	r3, [r7, #31]
      break;
 80077b0:	e004      	b.n	80077bc <USB_HC_Init+0x14c>
      break;
 80077b2:	bf00      	nop
 80077b4:	e002      	b.n	80077bc <USB_HC_Init+0x14c>
      break;
 80077b6:	bf00      	nop
 80077b8:	e000      	b.n	80077bc <USB_HC_Init+0x14c>
      break;
 80077ba:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80077bc:	78fb      	ldrb	r3, [r7, #3]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	78fa      	ldrb	r2, [r7, #3]
 80077cc:	0151      	lsls	r1, r2, #5
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	440a      	add	r2, r1
 80077d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077d6:	f043 0302 	orr.w	r3, r3, #2
 80077da:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077e2:	699a      	ldr	r2, [r3, #24]
 80077e4:	78fb      	ldrb	r3, [r7, #3]
 80077e6:	f003 030f 	and.w	r3, r3, #15
 80077ea:	2101      	movs	r1, #1
 80077ec:	fa01 f303 	lsl.w	r3, r1, r3
 80077f0:	6939      	ldr	r1, [r7, #16]
 80077f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80077f6:	4313      	orrs	r3, r2
 80077f8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007806:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800780a:	2b00      	cmp	r3, #0
 800780c:	da03      	bge.n	8007816 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800780e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007812:	61bb      	str	r3, [r7, #24]
 8007814:	e001      	b.n	800781a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff feff 	bl	800761e <USB_GetHostSpeed>
 8007820:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007822:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007826:	2b02      	cmp	r3, #2
 8007828:	d106      	bne.n	8007838 <USB_HC_Init+0x1c8>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b02      	cmp	r3, #2
 800782e:	d003      	beq.n	8007838 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	e001      	b.n	800783c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800783c:	787b      	ldrb	r3, [r7, #1]
 800783e:	059b      	lsls	r3, r3, #22
 8007840:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007844:	78bb      	ldrb	r3, [r7, #2]
 8007846:	02db      	lsls	r3, r3, #11
 8007848:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800784c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800784e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007852:	049b      	lsls	r3, r3, #18
 8007854:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007858:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800785a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800785c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007860:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	0159      	lsls	r1, r3, #5
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	440b      	add	r3, r1
 800786e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007872:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007878:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800787a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800787e:	2b03      	cmp	r3, #3
 8007880:	d003      	beq.n	800788a <USB_HC_Init+0x21a>
 8007882:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007886:	2b01      	cmp	r3, #1
 8007888:	d10f      	bne.n	80078aa <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800788a:	78fb      	ldrb	r3, [r7, #3]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	4413      	add	r3, r2
 8007892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	78fa      	ldrb	r2, [r7, #3]
 800789a:	0151      	lsls	r1, r2, #5
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	440a      	add	r2, r1
 80078a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078a8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80078aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3720      	adds	r7, #32
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b08c      	sub	sp, #48	; 0x30
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	4613      	mov	r3, r2
 80078c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	785b      	ldrb	r3, [r3, #1]
 80078ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80078cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078d0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d02d      	beq.n	800793a <USB_HC_StartXfer+0x86>
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	791b      	ldrb	r3, [r3, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d129      	bne.n	800793a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d117      	bne.n	800791c <USB_HC_StartXfer+0x68>
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	79db      	ldrb	r3, [r3, #7]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <USB_HC_StartXfer+0x48>
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	79db      	ldrb	r3, [r3, #7]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d10f      	bne.n	800791c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	4413      	add	r3, r2
 8007904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	0151      	lsls	r1, r2, #5
 800790e:	6a3a      	ldr	r2, [r7, #32]
 8007910:	440a      	add	r2, r1
 8007912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800791c:	79fb      	ldrb	r3, [r7, #7]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10b      	bne.n	800793a <USB_HC_StartXfer+0x86>
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	795b      	ldrb	r3, [r3, #5]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d107      	bne.n	800793a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	4619      	mov	r1, r3
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 fa0f 	bl	8007d54 <USB_DoPing>
      return HAL_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	e0f8      	b.n	8007b2c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d018      	beq.n	8007974 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	8912      	ldrh	r2, [r2, #8]
 800794a:	4413      	add	r3, r2
 800794c:	3b01      	subs	r3, #1
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	8912      	ldrh	r2, [r2, #8]
 8007952:	fbb3 f3f2 	udiv	r3, r3, r2
 8007956:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007958:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800795a:	8b7b      	ldrh	r3, [r7, #26]
 800795c:	429a      	cmp	r2, r3
 800795e:	d90b      	bls.n	8007978 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007960:	8b7b      	ldrh	r3, [r7, #26]
 8007962:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007964:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	8912      	ldrh	r2, [r2, #8]
 800796a:	fb03 f202 	mul.w	r2, r3, r2
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	611a      	str	r2, [r3, #16]
 8007972:	e001      	b.n	8007978 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007974:	2301      	movs	r3, #1
 8007976:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	78db      	ldrb	r3, [r3, #3]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d007      	beq.n	8007990 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007980:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	8912      	ldrh	r2, [r2, #8]
 8007986:	fb03 f202 	mul.w	r2, r3, r2
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	611a      	str	r2, [r3, #16]
 800798e:	e003      	b.n	8007998 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	695a      	ldr	r2, [r3, #20]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80079a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80079a2:	04d9      	lsls	r1, r3, #19
 80079a4:	4b63      	ldr	r3, [pc, #396]	; (8007b34 <USB_HC_StartXfer+0x280>)
 80079a6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079a8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	7a9b      	ldrb	r3, [r3, #10]
 80079ae:	075b      	lsls	r3, r3, #29
 80079b0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079b4:	69f9      	ldr	r1, [r7, #28]
 80079b6:	0148      	lsls	r0, r1, #5
 80079b8:	6a39      	ldr	r1, [r7, #32]
 80079ba:	4401      	add	r1, r0
 80079bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80079c0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80079c2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d009      	beq.n	80079de <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	68d9      	ldr	r1, [r3, #12]
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079da:	460a      	mov	r2, r1
 80079dc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bf0c      	ite	eq
 80079ee:	2301      	moveq	r3, #1
 80079f0:	2300      	movne	r3, #0
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	69fa      	ldr	r2, [r7, #28]
 8007a06:	0151      	lsls	r1, r2, #5
 8007a08:	6a3a      	ldr	r2, [r7, #32]
 8007a0a:	440a      	add	r2, r1
 8007a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a14:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	7e7b      	ldrb	r3, [r7, #25]
 8007a26:	075b      	lsls	r3, r3, #29
 8007a28:	69f9      	ldr	r1, [r7, #28]
 8007a2a:	0148      	lsls	r0, r1, #5
 8007a2c:	6a39      	ldr	r1, [r7, #32]
 8007a2e:	4401      	add	r1, r0
 8007a30:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007a34:	4313      	orrs	r3, r2
 8007a36:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a4e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	78db      	ldrb	r3, [r3, #3]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a5e:	613b      	str	r3, [r7, #16]
 8007a60:	e003      	b.n	8007a6a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a68:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a70:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a7e:	461a      	mov	r2, r3
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007a84:	79fb      	ldrb	r3, [r7, #7]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e04e      	b.n	8007b2c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	78db      	ldrb	r3, [r3, #3]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d149      	bne.n	8007b2a <USB_HC_StartXfer+0x276>
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d045      	beq.n	8007b2a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	79db      	ldrb	r3, [r3, #7]
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d830      	bhi.n	8007b08 <USB_HC_StartXfer+0x254>
 8007aa6:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <USB_HC_StartXfer+0x1f8>)
 8007aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aac:	08007abd 	.word	0x08007abd
 8007ab0:	08007ae1 	.word	0x08007ae1
 8007ab4:	08007abd 	.word	0x08007abd
 8007ab8:	08007ae1 	.word	0x08007ae1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	3303      	adds	r3, #3
 8007ac2:	089b      	lsrs	r3, r3, #2
 8007ac4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007ac6:	8afa      	ldrh	r2, [r7, #22]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d91c      	bls.n	8007b0c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	f043 0220 	orr.w	r2, r3, #32
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	619a      	str	r2, [r3, #24]
        }
        break;
 8007ade:	e015      	b.n	8007b0c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	3303      	adds	r3, #3
 8007ae6:	089b      	lsrs	r3, r3, #2
 8007ae8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007aea:	8afa      	ldrh	r2, [r7, #22]
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d90a      	bls.n	8007b10 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	619a      	str	r2, [r3, #24]
        }
        break;
 8007b06:	e003      	b.n	8007b10 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007b08:	bf00      	nop
 8007b0a:	e002      	b.n	8007b12 <USB_HC_StartXfer+0x25e>
        break;
 8007b0c:	bf00      	nop
 8007b0e:	e000      	b.n	8007b12 <USB_HC_StartXfer+0x25e>
        break;
 8007b10:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	68d9      	ldr	r1, [r3, #12]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	785a      	ldrb	r2, [r3, #1]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2000      	movs	r0, #0
 8007b22:	9000      	str	r0, [sp, #0]
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f7ff fb5b 	bl	80071e0 <USB_WritePacket>
  }

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3728      	adds	r7, #40	; 0x28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	1ff80000 	.word	0x1ff80000

08007b38 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	b29b      	uxth	r3, r3
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b089      	sub	sp, #36	; 0x24
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	460b      	mov	r3, r1
 8007b64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	0c9b      	lsrs	r3, r3, #18
 8007b82:	f003 0303 	and.w	r3, r3, #3
 8007b86:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	0fdb      	lsrs	r3, r3, #31
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	d104      	bne.n	8007bb4 <USB_HC_Halt+0x5a>
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e0c8      	b.n	8007d46 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <USB_HC_Halt+0x66>
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d163      	bne.n	8007c88 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	0151      	lsls	r1, r2, #5
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	440a      	add	r2, r1
 8007bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bde:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	f040 80ab 	bne.w	8007d44 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d133      	bne.n	8007c62 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	0151      	lsls	r1, r2, #5
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	440a      	add	r2, r1
 8007c10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c18:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	0151      	lsls	r1, r2, #5
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	440a      	add	r2, r1
 8007c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c38:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c46:	d81d      	bhi.n	8007c84 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	015a      	lsls	r2, r3, #5
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c5e:	d0ec      	beq.n	8007c3a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c60:	e070      	b.n	8007d44 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	0151      	lsls	r1, r2, #5
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	440a      	add	r2, r1
 8007c78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c80:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c82:	e05f      	b.n	8007d44 <USB_HC_Halt+0x1ea>
            break;
 8007c84:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c86:	e05d      	b.n	8007d44 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	0151      	lsls	r1, r2, #5
 8007c9a:	69fa      	ldr	r2, [r7, #28]
 8007c9c:	440a      	add	r2, r1
 8007c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ca2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ca6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d133      	bne.n	8007d20 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	0151      	lsls	r1, r2, #5
 8007cca:	69fa      	ldr	r2, [r7, #28]
 8007ccc:	440a      	add	r2, r1
 8007cce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cd6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	0151      	lsls	r1, r2, #5
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	440a      	add	r2, r1
 8007cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cf6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d04:	d81d      	bhi.n	8007d42 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d1c:	d0ec      	beq.n	8007cf8 <USB_HC_Halt+0x19e>
 8007d1e:	e011      	b.n	8007d44 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	0151      	lsls	r1, r2, #5
 8007d32:	69fa      	ldr	r2, [r7, #28]
 8007d34:	440a      	add	r2, r1
 8007d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	e000      	b.n	8007d44 <USB_HC_Halt+0x1ea>
          break;
 8007d42:	bf00      	nop
    }
  }

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3724      	adds	r7, #36	; 0x24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
	...

08007d54 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007d64:	78fb      	ldrb	r3, [r7, #3]
 8007d66:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	04da      	lsls	r2, r3, #19
 8007d70:	4b15      	ldr	r3, [pc, #84]	; (8007dc8 <USB_DoPing+0x74>)
 8007d72:	4013      	ands	r3, r2
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	0151      	lsls	r1, r2, #5
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	440a      	add	r2, r1
 8007d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d84:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d9c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007da4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007db2:	461a      	mov	r2, r3
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	1ff80000 	.word	0x1ff80000

08007dcc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b088      	sub	sp, #32
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7ff f93b 	bl	800705c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007de6:	2110      	movs	r1, #16
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff f995 	bl	8007118 <USB_FlushTxFifo>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7ff f9c1 	bl	8007180 <USB_FlushRxFifo>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61bb      	str	r3, [r7, #24]
 8007e0c:	e01f      	b.n	8007e4e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e24:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e2c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e34:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e42:	461a      	mov	r2, r3
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	61bb      	str	r3, [r7, #24]
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	2b0f      	cmp	r3, #15
 8007e52:	d9dc      	bls.n	8007e0e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007e54:	2300      	movs	r3, #0
 8007e56:	61bb      	str	r3, [r7, #24]
 8007e58:	e034      	b.n	8007ec4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e70:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e80:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e8e:	461a      	mov	r2, r3
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3301      	adds	r3, #1
 8007e98:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ea0:	d80c      	bhi.n	8007ebc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eb8:	d0ec      	beq.n	8007e94 <USB_StopHost+0xc8>
 8007eba:	e000      	b.n	8007ebe <USB_StopHost+0xf2>
        break;
 8007ebc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	61bb      	str	r3, [r7, #24]
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	2b0f      	cmp	r3, #15
 8007ec8:	d9c7      	bls.n	8007e5a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f04f 32ff 	mov.w	r2, #4294967295
 8007ede:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7ff f8aa 	bl	800703a <USB_EnableGlobalInt>

  return ret;
 8007ee6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3720      	adds	r7, #32
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007ef0:	b590      	push	{r4, r7, lr}
 8007ef2:	b089      	sub	sp, #36	; 0x24
 8007ef4:	af04      	add	r7, sp, #16
 8007ef6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007ef8:	2301      	movs	r3, #1
 8007efa:	2202      	movs	r2, #2
 8007efc:	2102      	movs	r1, #2
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fc66 	bl	80087d0 <USBH_FindInterface>
 8007f04:	4603      	mov	r3, r0
 8007f06:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	2bff      	cmp	r3, #255	; 0xff
 8007f0c:	d002      	beq.n	8007f14 <USBH_CDC_InterfaceInit+0x24>
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d901      	bls.n	8007f18 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f14:	2302      	movs	r3, #2
 8007f16:	e13d      	b.n	8008194 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fc3b 	bl	8008798 <USBH_SelectInterface>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	e131      	b.n	8008194 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007f36:	2050      	movs	r0, #80	; 0x50
 8007f38:	f001 fb18 	bl	800956c <malloc>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007f50:	2302      	movs	r3, #2
 8007f52:	e11f      	b.n	8008194 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007f54:	2250      	movs	r2, #80	; 0x50
 8007f56:	2100      	movs	r1, #0
 8007f58:	68b8      	ldr	r0, [r7, #8]
 8007f5a:	f001 fb17 	bl	800958c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	211a      	movs	r1, #26
 8007f64:	fb01 f303 	mul.w	r3, r1, r3
 8007f68:	4413      	add	r3, r2
 8007f6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	b25b      	sxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	da15      	bge.n	8007fa2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	211a      	movs	r1, #26
 8007f7c:	fb01 f303 	mul.w	r3, r1, r3
 8007f80:	4413      	add	r3, r2
 8007f82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007f86:	781a      	ldrb	r2, [r3, #0]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	211a      	movs	r1, #26
 8007f92:	fb01 f303 	mul.w	r3, r1, r3
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f9c:	881a      	ldrh	r2, [r3, #0]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	785b      	ldrb	r3, [r3, #1]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 ff9c 	bl	8008ee6 <USBH_AllocPipe>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	7819      	ldrb	r1, [r3, #0]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	7858      	ldrb	r0, [r3, #1]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	8952      	ldrh	r2, [r2, #10]
 8007fce:	9202      	str	r2, [sp, #8]
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	9201      	str	r2, [sp, #4]
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	4623      	mov	r3, r4
 8007fd8:	4602      	mov	r2, r0
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 ff54 	bl	8008e88 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 fa1d 	bl	8009428 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007fee:	2300      	movs	r3, #0
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	210a      	movs	r1, #10
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fbeb 	bl	80087d0 <USBH_FindInterface>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	2bff      	cmp	r3, #255	; 0xff
 8008002:	d002      	beq.n	800800a <USBH_CDC_InterfaceInit+0x11a>
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d901      	bls.n	800800e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800800a:	2302      	movs	r3, #2
 800800c:	e0c2      	b.n	8008194 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	211a      	movs	r1, #26
 8008014:	fb01 f303 	mul.w	r3, r1, r3
 8008018:	4413      	add	r3, r2
 800801a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	b25b      	sxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	da16      	bge.n	8008054 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	211a      	movs	r1, #26
 800802c:	fb01 f303 	mul.w	r3, r1, r3
 8008030:	4413      	add	r3, r2
 8008032:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008036:	781a      	ldrb	r2, [r3, #0]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800803c:	7bfb      	ldrb	r3, [r7, #15]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	211a      	movs	r1, #26
 8008042:	fb01 f303 	mul.w	r3, r1, r3
 8008046:	4413      	add	r3, r2
 8008048:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800804c:	881a      	ldrh	r2, [r3, #0]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	835a      	strh	r2, [r3, #26]
 8008052:	e015      	b.n	8008080 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008054:	7bfb      	ldrb	r3, [r7, #15]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	211a      	movs	r1, #26
 800805a:	fb01 f303 	mul.w	r3, r1, r3
 800805e:	4413      	add	r3, r2
 8008060:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008064:	781a      	ldrb	r2, [r3, #0]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	211a      	movs	r1, #26
 8008070:	fb01 f303 	mul.w	r3, r1, r3
 8008074:	4413      	add	r3, r2
 8008076:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800807a:	881a      	ldrh	r2, [r3, #0]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	211a      	movs	r1, #26
 8008086:	fb01 f303 	mul.w	r3, r1, r3
 800808a:	4413      	add	r3, r2
 800808c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	b25b      	sxtb	r3, r3
 8008094:	2b00      	cmp	r3, #0
 8008096:	da16      	bge.n	80080c6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	211a      	movs	r1, #26
 800809e:	fb01 f303 	mul.w	r3, r1, r3
 80080a2:	4413      	add	r3, r2
 80080a4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80080a8:	781a      	ldrb	r2, [r3, #0]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	211a      	movs	r1, #26
 80080b4:	fb01 f303 	mul.w	r3, r1, r3
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80080be:	881a      	ldrh	r2, [r3, #0]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	835a      	strh	r2, [r3, #26]
 80080c4:	e015      	b.n	80080f2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	211a      	movs	r1, #26
 80080cc:	fb01 f303 	mul.w	r3, r1, r3
 80080d0:	4413      	add	r3, r2
 80080d2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80080d6:	781a      	ldrb	r2, [r3, #0]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	211a      	movs	r1, #26
 80080e2:	fb01 f303 	mul.w	r3, r1, r3
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80080ec:	881a      	ldrh	r2, [r3, #0]
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	7b9b      	ldrb	r3, [r3, #14]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fef4 	bl	8008ee6 <USBH_AllocPipe>
 80080fe:	4603      	mov	r3, r0
 8008100:	461a      	mov	r2, r3
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	7bdb      	ldrb	r3, [r3, #15]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 feea 	bl	8008ee6 <USBH_AllocPipe>
 8008112:	4603      	mov	r3, r0
 8008114:	461a      	mov	r2, r3
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	7b59      	ldrb	r1, [r3, #13]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	7b98      	ldrb	r0, [r3, #14]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	8b12      	ldrh	r2, [r2, #24]
 8008132:	9202      	str	r2, [sp, #8]
 8008134:	2202      	movs	r2, #2
 8008136:	9201      	str	r2, [sp, #4]
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	4623      	mov	r3, r4
 800813c:	4602      	mov	r2, r0
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fea2 	bl	8008e88 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	7b19      	ldrb	r1, [r3, #12]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	7bd8      	ldrb	r0, [r3, #15]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	8b52      	ldrh	r2, [r2, #26]
 800815c:	9202      	str	r2, [sp, #8]
 800815e:	2202      	movs	r2, #2
 8008160:	9201      	str	r2, [sp, #4]
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	4623      	mov	r3, r4
 8008166:	4602      	mov	r2, r0
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fe8d 	bl	8008e88 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	7b5b      	ldrb	r3, [r3, #13]
 800817a:	2200      	movs	r2, #0
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 f952 	bl	8009428 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	7b1b      	ldrb	r3, [r3, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 f94b 	bl	8009428 <USBH_LL_SetToggle>

  return USBH_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	bd90      	pop	{r4, r7, pc}

0800819c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00e      	beq.n	80081d4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fe82 	bl	8008ec6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fead 	bl	8008f28 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	7b1b      	ldrb	r3, [r3, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00e      	beq.n	80081fa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	7b1b      	ldrb	r3, [r3, #12]
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fe6f 	bl	8008ec6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	7b1b      	ldrb	r3, [r3, #12]
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fe9a 	bl	8008f28 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	7b5b      	ldrb	r3, [r3, #13]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00e      	beq.n	8008220 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	7b5b      	ldrb	r3, [r3, #13]
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fe5c 	bl	8008ec6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	7b5b      	ldrb	r3, [r3, #13]
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fe87 	bl	8008f28 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	4618      	mov	r0, r3
 8008236:	f001 f9a1 	bl	800957c <free>
    phost->pActiveClass->pData = 0U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008240:	2200      	movs	r2, #0
 8008242:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	3340      	adds	r3, #64	; 0x40
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f8b1 	bl	80083ce <GetLineCoding>
 800826c:	4603      	mov	r3, r0
 800826e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008270:	7afb      	ldrb	r3, [r7, #11]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d105      	bne.n	8008282 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800827c:	2102      	movs	r1, #2
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008282:	7afb      	ldrb	r3, [r7, #11]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008294:	2301      	movs	r3, #1
 8008296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d877      	bhi.n	80083a0 <USBH_CDC_Process+0x114>
 80082b0:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <USBH_CDC_Process+0x2c>)
 80082b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b6:	bf00      	nop
 80082b8:	080082cd 	.word	0x080082cd
 80082bc:	080082d3 	.word	0x080082d3
 80082c0:	08008303 	.word	0x08008303
 80082c4:	08008377 	.word	0x08008377
 80082c8:	08008385 	.word	0x08008385
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73fb      	strb	r3, [r7, #15]
      break;
 80082d0:	e06d      	b.n	80083ae <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f897 	bl	800840c <SetLineCoding>
 80082de:	4603      	mov	r3, r0
 80082e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d104      	bne.n	80082f2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80082f0:	e058      	b.n	80083a4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d055      	beq.n	80083a4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2204      	movs	r2, #4
 80082fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008300:	e050      	b.n	80083a4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	3340      	adds	r3, #64	; 0x40
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f860 	bl	80083ce <GetLineCoding>
 800830e:	4603      	mov	r3, r0
 8008310:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d126      	bne.n	8008366 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800832a:	791b      	ldrb	r3, [r3, #4]
 800832c:	429a      	cmp	r2, r3
 800832e:	d13b      	bne.n	80083a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800833a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800833c:	429a      	cmp	r2, r3
 800833e:	d133      	bne.n	80083a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800834a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800834c:	429a      	cmp	r2, r3
 800834e:	d12b      	bne.n	80083a8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008358:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800835a:	429a      	cmp	r2, r3
 800835c:	d124      	bne.n	80083a8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f958 	bl	8008614 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008364:	e020      	b.n	80083a8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d01d      	beq.n	80083a8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2204      	movs	r2, #4
 8008370:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008374:	e018      	b.n	80083a8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f867 	bl	800844a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f8da 	bl	8008536 <CDC_ProcessReception>
      break;
 8008382:	e014      	b.n	80083ae <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008384:	2100      	movs	r1, #0
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fb08 	bl	800899c <USBH_ClrFeature>
 800838c:	4603      	mov	r3, r0
 800838e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008390:	7bbb      	ldrb	r3, [r7, #14]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10a      	bne.n	80083ac <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800839e:	e005      	b.n	80083ac <USBH_CDC_Process+0x120>

    default:
      break;
 80083a0:	bf00      	nop
 80083a2:	e004      	b.n	80083ae <USBH_CDC_Process+0x122>
      break;
 80083a4:	bf00      	nop
 80083a6:	e002      	b.n	80083ae <USBH_CDC_Process+0x122>
      break;
 80083a8:	bf00      	nop
 80083aa:	e000      	b.n	80083ae <USBH_CDC_Process+0x122>
      break;
 80083ac:	bf00      	nop

  }

  return status;
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b082      	sub	sp, #8
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	22a1      	movs	r2, #161	; 0xa1
 80083dc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2221      	movs	r2, #33	; 0x21
 80083e2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2207      	movs	r2, #7
 80083f4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2207      	movs	r2, #7
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 faf1 	bl	80089e4 <USBH_CtlReq>
 8008402:	4603      	mov	r3, r0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2221      	movs	r2, #33	; 0x21
 800841a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2220      	movs	r2, #32
 8008420:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2207      	movs	r2, #7
 8008432:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2207      	movs	r2, #7
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fad2 	bl	80089e4 <USBH_CtlReq>
 8008440:	4603      	mov	r3, r0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b086      	sub	sp, #24
 800844e:	af02      	add	r7, sp, #8
 8008450:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800845c:	2300      	movs	r3, #0
 800845e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008466:	2b01      	cmp	r3, #1
 8008468:	d002      	beq.n	8008470 <CDC_ProcessTransmission+0x26>
 800846a:	2b02      	cmp	r3, #2
 800846c:	d023      	beq.n	80084b6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800846e:	e05e      	b.n	800852e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	8b12      	ldrh	r2, [r2, #24]
 8008478:	4293      	cmp	r3, r2
 800847a:	d90b      	bls.n	8008494 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	69d9      	ldr	r1, [r3, #28]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8b1a      	ldrh	r2, [r3, #24]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	7b5b      	ldrb	r3, [r3, #13]
 8008488:	2001      	movs	r0, #1
 800848a:	9000      	str	r0, [sp, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fcb8 	bl	8008e02 <USBH_BulkSendData>
 8008492:	e00b      	b.n	80084ac <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800849c:	b29a      	uxth	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	7b5b      	ldrb	r3, [r3, #13]
 80084a2:	2001      	movs	r0, #1
 80084a4:	9000      	str	r0, [sp, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fcab 	bl	8008e02 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80084b4:	e03b      	b.n	800852e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	7b5b      	ldrb	r3, [r3, #13]
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 ff89 	bl	80093d4 <USBH_LL_GetURBState>
 80084c2:	4603      	mov	r3, r0
 80084c4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80084c6:	7afb      	ldrb	r3, [r7, #11]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d128      	bne.n	800851e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	8b12      	ldrh	r2, [r2, #24]
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d90e      	bls.n	80084f6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	8b12      	ldrh	r2, [r2, #24]
 80084e0:	1a9a      	subs	r2, r3, r2
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	8b12      	ldrh	r2, [r2, #24]
 80084ee:	441a      	add	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	61da      	str	r2, [r3, #28]
 80084f4:	e002      	b.n	80084fc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	2b00      	cmp	r3, #0
 8008502:	d004      	beq.n	800850e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800850c:	e00e      	b.n	800852c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f868 	bl	80085ec <USBH_CDC_TransmitCallback>
      break;
 800851c:	e006      	b.n	800852c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800851e:	7afb      	ldrb	r3, [r7, #11]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d103      	bne.n	800852c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800852c:	bf00      	nop
  }
}
 800852e:	bf00      	nop
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b086      	sub	sp, #24
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008548:	2300      	movs	r3, #0
 800854a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008552:	2b03      	cmp	r3, #3
 8008554:	d002      	beq.n	800855c <CDC_ProcessReception+0x26>
 8008556:	2b04      	cmp	r3, #4
 8008558:	d00e      	beq.n	8008578 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800855a:	e043      	b.n	80085e4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	6a19      	ldr	r1, [r3, #32]
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	8b5a      	ldrh	r2, [r3, #26]
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	7b1b      	ldrb	r3, [r3, #12]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fc6f 	bl	8008e4c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2204      	movs	r2, #4
 8008572:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008576:	e035      	b.n	80085e4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	7b1b      	ldrb	r3, [r3, #12]
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 ff28 	bl	80093d4 <USBH_LL_GetURBState>
 8008584:	4603      	mov	r3, r0
 8008586:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008588:	7cfb      	ldrb	r3, [r7, #19]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d129      	bne.n	80085e2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	7b1b      	ldrb	r3, [r3, #12]
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fe8b 	bl	80092b0 <USBH_LL_GetLastXferSize>
 800859a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d016      	beq.n	80085d4 <CDC_ProcessReception+0x9e>
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	8b5b      	ldrh	r3, [r3, #26]
 80085aa:	461a      	mov	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d910      	bls.n	80085d4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	1ad2      	subs	r2, r2, r3
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	6a1a      	ldr	r2, [r3, #32]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	441a      	add	r2, r3
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2203      	movs	r2, #3
 80085ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80085d2:	e006      	b.n	80085e2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f80f 	bl	8008600 <USBH_CDC_ReceiveCallback>
      break;
 80085e2:	bf00      	nop
  }
}
 80085e4:	bf00      	nop
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	4613      	mov	r3, r2
 8008634:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d101      	bne.n	8008640 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800863c:	2302      	movs	r3, #2
 800863e:	e029      	b.n	8008694 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	79fa      	ldrb	r2, [r7, #7]
 8008644:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 f81f 	bl	800869c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d003      	beq.n	800868c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 fd93 	bl	80091b8 <USBH_LL_Init>

  return USBH_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80086a8:	2300      	movs	r3, #0
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	e009      	b.n	80086c2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	33e0      	adds	r3, #224	; 0xe0
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	2200      	movs	r2, #0
 80086ba:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3301      	adds	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2b0f      	cmp	r3, #15
 80086c6:	d9f2      	bls.n	80086ae <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80086c8:	2300      	movs	r3, #0
 80086ca:	60fb      	str	r3, [r7, #12]
 80086cc:	e009      	b.n	80086e2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086d8:	2200      	movs	r2, #0
 80086da:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	3301      	adds	r3, #1
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086e8:	d3f1      	bcc.n	80086ce <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2240      	movs	r2, #64	; 0x40
 800870e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d016      	beq.n	8008786 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10e      	bne.n	8008780 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008768:	1c59      	adds	r1, r3, #1
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	33de      	adds	r3, #222	; 0xde
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	73fb      	strb	r3, [r7, #15]
 800877e:	e004      	b.n	800878a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008780:	2302      	movs	r3, #2
 8008782:	73fb      	strb	r3, [r7, #15]
 8008784:	e001      	b.n	800878a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008786:	2302      	movs	r3, #2
 8008788:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80087ae:	78fa      	ldrb	r2, [r7, #3]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d204      	bcs.n	80087be <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	78fa      	ldrb	r2, [r7, #3]
 80087b8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80087bc:	e001      	b.n	80087c2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80087be:	2302      	movs	r3, #2
 80087c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	4608      	mov	r0, r1
 80087da:	4611      	mov	r1, r2
 80087dc:	461a      	mov	r2, r3
 80087de:	4603      	mov	r3, r0
 80087e0:	70fb      	strb	r3, [r7, #3]
 80087e2:	460b      	mov	r3, r1
 80087e4:	70bb      	strb	r3, [r7, #2]
 80087e6:	4613      	mov	r3, r2
 80087e8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80087f8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80087fa:	e025      	b.n	8008848 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	221a      	movs	r2, #26
 8008800:	fb02 f303 	mul.w	r3, r2, r3
 8008804:	3308      	adds	r3, #8
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	4413      	add	r3, r2
 800880a:	3302      	adds	r3, #2
 800880c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	795b      	ldrb	r3, [r3, #5]
 8008812:	78fa      	ldrb	r2, [r7, #3]
 8008814:	429a      	cmp	r2, r3
 8008816:	d002      	beq.n	800881e <USBH_FindInterface+0x4e>
 8008818:	78fb      	ldrb	r3, [r7, #3]
 800881a:	2bff      	cmp	r3, #255	; 0xff
 800881c:	d111      	bne.n	8008842 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008822:	78ba      	ldrb	r2, [r7, #2]
 8008824:	429a      	cmp	r2, r3
 8008826:	d002      	beq.n	800882e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008828:	78bb      	ldrb	r3, [r7, #2]
 800882a:	2bff      	cmp	r3, #255	; 0xff
 800882c:	d109      	bne.n	8008842 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008832:	787a      	ldrb	r2, [r7, #1]
 8008834:	429a      	cmp	r2, r3
 8008836:	d002      	beq.n	800883e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008838:	787b      	ldrb	r3, [r7, #1]
 800883a:	2bff      	cmp	r3, #255	; 0xff
 800883c:	d101      	bne.n	8008842 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	e006      	b.n	8008850 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008842:	7dfb      	ldrb	r3, [r7, #23]
 8008844:	3301      	adds	r3, #1
 8008846:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008848:	7dfb      	ldrb	r3, [r7, #23]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d9d6      	bls.n	80087fc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800884e:	23ff      	movs	r3, #255	; 0xff
}
 8008850:	4618      	mov	r0, r3
 8008852:	371c      	adds	r7, #28
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fced 	bl	8009244 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800886a:	2101      	movs	r1, #1
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fdc4 	bl	80093fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	683a      	ldr	r2, [r7, #0]
 800888a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f804 	bl	80088be <USBH_HandleSof>
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b0b      	cmp	r3, #11
 80088ce:	d10a      	bne.n	80088e6 <USBH_HandleSof+0x28>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d005      	beq.n	80088e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	4798      	blx	r3
  }
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80088fe:	bf00      	nop
}
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800890a:	b480      	push	{r7}
 800890c:	b083      	sub	sp, #12
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800891a:	bf00      	nop
}
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008926:	b480      	push	{r7}
 8008928:	b083      	sub	sp, #12
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fc80 	bl	800927a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	791b      	ldrb	r3, [r3, #4]
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fad1 	bl	8008f28 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	795b      	ldrb	r3, [r3, #5]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 facb 	bl	8008f28 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	789b      	ldrb	r3, [r3, #2]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d10f      	bne.n	80089d0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2202      	movs	r2, #2
 80089b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80089c2:	78fb      	ldrb	r3, [r7, #3]
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80089d0:	2200      	movs	r2, #0
 80089d2:	2100      	movs	r1, #0
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f805 	bl	80089e4 <USBH_CtlReq>
 80089da:	4603      	mov	r3, r0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	4613      	mov	r3, r2
 80089f0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80089f2:	2301      	movs	r3, #1
 80089f4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	789b      	ldrb	r3, [r3, #2]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d002      	beq.n	8008a04 <USBH_CtlReq+0x20>
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d00f      	beq.n	8008a22 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008a02:	e027      	b.n	8008a54 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	88fa      	ldrh	r2, [r7, #6]
 8008a0e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2201      	movs	r2, #1
 8008a14:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2202      	movs	r2, #2
 8008a1a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a20:	e018      	b.n	8008a54 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 f81c 	bl	8008a60 <USBH_HandleControl>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d002      	beq.n	8008a38 <USBH_CtlReq+0x54>
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
 8008a34:	2b03      	cmp	r3, #3
 8008a36:	d106      	bne.n	8008a46 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	761a      	strb	r2, [r3, #24]
      break;
 8008a44:	e005      	b.n	8008a52 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d102      	bne.n	8008a52 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	709a      	strb	r2, [r3, #2]
      break;
 8008a52:	bf00      	nop
  }
  return status;
 8008a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
	...

08008a60 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	7e1b      	ldrb	r3, [r3, #24]
 8008a74:	3b01      	subs	r3, #1
 8008a76:	2b0a      	cmp	r3, #10
 8008a78:	f200 8156 	bhi.w	8008d28 <USBH_HandleControl+0x2c8>
 8008a7c:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <USBH_HandleControl+0x24>)
 8008a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a82:	bf00      	nop
 8008a84:	08008ab1 	.word	0x08008ab1
 8008a88:	08008acb 	.word	0x08008acb
 8008a8c:	08008b35 	.word	0x08008b35
 8008a90:	08008b5b 	.word	0x08008b5b
 8008a94:	08008b93 	.word	0x08008b93
 8008a98:	08008bbd 	.word	0x08008bbd
 8008a9c:	08008c0f 	.word	0x08008c0f
 8008aa0:	08008c31 	.word	0x08008c31
 8008aa4:	08008c6d 	.word	0x08008c6d
 8008aa8:	08008c93 	.word	0x08008c93
 8008aac:	08008cd1 	.word	0x08008cd1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f103 0110 	add.w	r1, r3, #16
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	795b      	ldrb	r3, [r3, #5]
 8008aba:	461a      	mov	r2, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f943 	bl	8008d48 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	761a      	strb	r2, [r3, #24]
      break;
 8008ac8:	e139      	b.n	8008d3e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	795b      	ldrb	r3, [r3, #5]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fc7f 	bl	80093d4 <USBH_LL_GetURBState>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d11e      	bne.n	8008b1e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	7c1b      	ldrb	r3, [r3, #16]
 8008ae4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ae8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	8adb      	ldrh	r3, [r3, #22]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00a      	beq.n	8008b08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008af2:	7b7b      	ldrb	r3, [r7, #13]
 8008af4:	2b80      	cmp	r3, #128	; 0x80
 8008af6:	d103      	bne.n	8008b00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2203      	movs	r2, #3
 8008afc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008afe:	e115      	b.n	8008d2c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2205      	movs	r2, #5
 8008b04:	761a      	strb	r2, [r3, #24]
      break;
 8008b06:	e111      	b.n	8008d2c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008b08:	7b7b      	ldrb	r3, [r7, #13]
 8008b0a:	2b80      	cmp	r3, #128	; 0x80
 8008b0c:	d103      	bne.n	8008b16 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2209      	movs	r2, #9
 8008b12:	761a      	strb	r2, [r3, #24]
      break;
 8008b14:	e10a      	b.n	8008d2c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2207      	movs	r2, #7
 8008b1a:	761a      	strb	r2, [r3, #24]
      break;
 8008b1c:	e106      	b.n	8008d2c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	d003      	beq.n	8008b2c <USBH_HandleControl+0xcc>
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	f040 8100 	bne.w	8008d2c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	220b      	movs	r2, #11
 8008b30:	761a      	strb	r2, [r3, #24]
      break;
 8008b32:	e0fb      	b.n	8008d2c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6899      	ldr	r1, [r3, #8]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	899a      	ldrh	r2, [r3, #12]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	791b      	ldrb	r3, [r3, #4]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f93a 	bl	8008dc6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2204      	movs	r2, #4
 8008b56:	761a      	strb	r2, [r3, #24]
      break;
 8008b58:	e0f1      	b.n	8008d3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	791b      	ldrb	r3, [r3, #4]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fc37 	bl	80093d4 <USBH_LL_GetURBState>
 8008b66:	4603      	mov	r3, r0
 8008b68:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008b6a:	7bbb      	ldrb	r3, [r7, #14]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d102      	bne.n	8008b76 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2209      	movs	r2, #9
 8008b74:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	2b05      	cmp	r3, #5
 8008b7a:	d102      	bne.n	8008b82 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b80:	e0d6      	b.n	8008d30 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	f040 80d3 	bne.w	8008d30 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	220b      	movs	r2, #11
 8008b8e:	761a      	strb	r2, [r3, #24]
      break;
 8008b90:	e0ce      	b.n	8008d30 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6899      	ldr	r1, [r3, #8]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	899a      	ldrh	r2, [r3, #12]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	795b      	ldrb	r3, [r3, #5]
 8008b9e:	2001      	movs	r0, #1
 8008ba0:	9000      	str	r0, [sp, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f8ea 	bl	8008d7c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2206      	movs	r2, #6
 8008bb8:	761a      	strb	r2, [r3, #24]
      break;
 8008bba:	e0c0      	b.n	8008d3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	795b      	ldrb	r3, [r3, #5]
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fc06 	bl	80093d4 <USBH_LL_GetURBState>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008bcc:	7bbb      	ldrb	r3, [r7, #14]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d103      	bne.n	8008bda <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2207      	movs	r2, #7
 8008bd6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008bd8:	e0ac      	b.n	8008d34 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
 8008bdc:	2b05      	cmp	r3, #5
 8008bde:	d105      	bne.n	8008bec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	220c      	movs	r2, #12
 8008be4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008be6:	2303      	movs	r3, #3
 8008be8:	73fb      	strb	r3, [r7, #15]
      break;
 8008bea:	e0a3      	b.n	8008d34 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d103      	bne.n	8008bfa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2205      	movs	r2, #5
 8008bf6:	761a      	strb	r2, [r3, #24]
      break;
 8008bf8:	e09c      	b.n	8008d34 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	f040 8099 	bne.w	8008d34 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	220b      	movs	r2, #11
 8008c06:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008c08:	2302      	movs	r3, #2
 8008c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c0c:	e092      	b.n	8008d34 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	791b      	ldrb	r3, [r3, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	2100      	movs	r1, #0
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f8d5 	bl	8008dc6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2208      	movs	r2, #8
 8008c2c:	761a      	strb	r2, [r3, #24]

      break;
 8008c2e:	e086      	b.n	8008d3e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	791b      	ldrb	r3, [r3, #4]
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fbcc 	bl	80093d4 <USBH_LL_GetURBState>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d105      	bne.n	8008c52 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	220d      	movs	r2, #13
 8008c4a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008c50:	e072      	b.n	8008d38 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008c52:	7bbb      	ldrb	r3, [r7, #14]
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d103      	bne.n	8008c60 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	220b      	movs	r2, #11
 8008c5c:	761a      	strb	r2, [r3, #24]
      break;
 8008c5e:	e06b      	b.n	8008d38 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	2b05      	cmp	r3, #5
 8008c64:	d168      	bne.n	8008d38 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008c66:	2303      	movs	r3, #3
 8008c68:	73fb      	strb	r3, [r7, #15]
      break;
 8008c6a:	e065      	b.n	8008d38 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	795b      	ldrb	r3, [r3, #5]
 8008c70:	2201      	movs	r2, #1
 8008c72:	9200      	str	r2, [sp, #0]
 8008c74:	2200      	movs	r2, #0
 8008c76:	2100      	movs	r1, #0
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f87f 	bl	8008d7c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	220a      	movs	r2, #10
 8008c8e:	761a      	strb	r2, [r3, #24]
      break;
 8008c90:	e055      	b.n	8008d3e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	795b      	ldrb	r3, [r3, #5]
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fb9b 	bl	80093d4 <USBH_LL_GetURBState>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008ca2:	7bbb      	ldrb	r3, [r7, #14]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d105      	bne.n	8008cb4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	220d      	movs	r2, #13
 8008cb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008cb2:	e043      	b.n	8008d3c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d103      	bne.n	8008cc2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2209      	movs	r2, #9
 8008cbe:	761a      	strb	r2, [r3, #24]
      break;
 8008cc0:	e03c      	b.n	8008d3c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008cc2:	7bbb      	ldrb	r3, [r7, #14]
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	d139      	bne.n	8008d3c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	220b      	movs	r2, #11
 8008ccc:	761a      	strb	r2, [r3, #24]
      break;
 8008cce:	e035      	b.n	8008d3c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	7e5b      	ldrb	r3, [r3, #25]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	765a      	strb	r2, [r3, #25]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	7e5b      	ldrb	r3, [r3, #25]
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d806      	bhi.n	8008cf2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008cf0:	e025      	b.n	8008d3e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008cf8:	2106      	movs	r1, #6
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	795b      	ldrb	r3, [r3, #5]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f90c 	bl	8008f28 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	791b      	ldrb	r3, [r3, #4]
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f906 	bl	8008f28 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008d22:	2302      	movs	r3, #2
 8008d24:	73fb      	strb	r3, [r7, #15]
      break;
 8008d26:	e00a      	b.n	8008d3e <USBH_HandleControl+0x2de>

    default:
      break;
 8008d28:	bf00      	nop
 8008d2a:	e008      	b.n	8008d3e <USBH_HandleControl+0x2de>
      break;
 8008d2c:	bf00      	nop
 8008d2e:	e006      	b.n	8008d3e <USBH_HandleControl+0x2de>
      break;
 8008d30:	bf00      	nop
 8008d32:	e004      	b.n	8008d3e <USBH_HandleControl+0x2de>
      break;
 8008d34:	bf00      	nop
 8008d36:	e002      	b.n	8008d3e <USBH_HandleControl+0x2de>
      break;
 8008d38:	bf00      	nop
 8008d3a:	e000      	b.n	8008d3e <USBH_HandleControl+0x2de>
      break;
 8008d3c:	bf00      	nop
  }

  return status;
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af04      	add	r7, sp, #16
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008d56:	79f9      	ldrb	r1, [r7, #7]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	9303      	str	r3, [sp, #12]
 8008d5c:	2308      	movs	r3, #8
 8008d5e:	9302      	str	r3, [sp, #8]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	9301      	str	r3, [sp, #4]
 8008d64:	2300      	movs	r3, #0
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 fb00 	bl	8009372 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b088      	sub	sp, #32
 8008d80:	af04      	add	r7, sp, #16
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	4611      	mov	r1, r2
 8008d88:	461a      	mov	r2, r3
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	80fb      	strh	r3, [r7, #6]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008da0:	7979      	ldrb	r1, [r7, #5]
 8008da2:	7e3b      	ldrb	r3, [r7, #24]
 8008da4:	9303      	str	r3, [sp, #12]
 8008da6:	88fb      	ldrh	r3, [r7, #6]
 8008da8:	9302      	str	r3, [sp, #8]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	9301      	str	r3, [sp, #4]
 8008dae:	2301      	movs	r3, #1
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	2300      	movs	r3, #0
 8008db4:	2200      	movs	r2, #0
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 fadb 	bl	8009372 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b088      	sub	sp, #32
 8008dca:	af04      	add	r7, sp, #16
 8008dcc:	60f8      	str	r0, [r7, #12]
 8008dce:	60b9      	str	r1, [r7, #8]
 8008dd0:	4611      	mov	r1, r2
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	80fb      	strh	r3, [r7, #6]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ddc:	7979      	ldrb	r1, [r7, #5]
 8008dde:	2300      	movs	r3, #0
 8008de0:	9303      	str	r3, [sp, #12]
 8008de2:	88fb      	ldrh	r3, [r7, #6]
 8008de4:	9302      	str	r3, [sp, #8]
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	9301      	str	r3, [sp, #4]
 8008dea:	2301      	movs	r3, #1
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	2300      	movs	r3, #0
 8008df0:	2201      	movs	r2, #1
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f000 fabd 	bl	8009372 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008df8:	2300      	movs	r3, #0

}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b088      	sub	sp, #32
 8008e06:	af04      	add	r7, sp, #16
 8008e08:	60f8      	str	r0, [r7, #12]
 8008e0a:	60b9      	str	r1, [r7, #8]
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	461a      	mov	r2, r3
 8008e10:	460b      	mov	r3, r1
 8008e12:	80fb      	strh	r3, [r7, #6]
 8008e14:	4613      	mov	r3, r2
 8008e16:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e26:	7979      	ldrb	r1, [r7, #5]
 8008e28:	7e3b      	ldrb	r3, [r7, #24]
 8008e2a:	9303      	str	r3, [sp, #12]
 8008e2c:	88fb      	ldrh	r3, [r7, #6]
 8008e2e:	9302      	str	r3, [sp, #8]
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	2301      	movs	r3, #1
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	2302      	movs	r3, #2
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 fa98 	bl	8009372 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af04      	add	r7, sp, #16
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	4611      	mov	r1, r2
 8008e58:	461a      	mov	r2, r3
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	80fb      	strh	r3, [r7, #6]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008e62:	7979      	ldrb	r1, [r7, #5]
 8008e64:	2300      	movs	r3, #0
 8008e66:	9303      	str	r3, [sp, #12]
 8008e68:	88fb      	ldrh	r3, [r7, #6]
 8008e6a:	9302      	str	r3, [sp, #8]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	9301      	str	r3, [sp, #4]
 8008e70:	2301      	movs	r3, #1
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	2302      	movs	r3, #2
 8008e76:	2201      	movs	r2, #1
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 fa7a 	bl	8009372 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af04      	add	r7, sp, #16
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	4608      	mov	r0, r1
 8008e92:	4611      	mov	r1, r2
 8008e94:	461a      	mov	r2, r3
 8008e96:	4603      	mov	r3, r0
 8008e98:	70fb      	strb	r3, [r7, #3]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	70bb      	strb	r3, [r7, #2]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008ea2:	7878      	ldrb	r0, [r7, #1]
 8008ea4:	78ba      	ldrb	r2, [r7, #2]
 8008ea6:	78f9      	ldrb	r1, [r7, #3]
 8008ea8:	8b3b      	ldrh	r3, [r7, #24]
 8008eaa:	9302      	str	r3, [sp, #8]
 8008eac:	7d3b      	ldrb	r3, [r7, #20]
 8008eae:	9301      	str	r3, [sp, #4]
 8008eb0:	7c3b      	ldrb	r3, [r7, #16]
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fa0d 	bl	80092d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008ed2:	78fb      	ldrb	r3, [r7, #3]
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fa2c 	bl	8009334 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f836 	bl	8008f64 <USBH_GetFreePipe>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008efc:	89fb      	ldrh	r3, [r7, #14]
 8008efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d00a      	beq.n	8008f1c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008f06:	78fa      	ldrb	r2, [r7, #3]
 8008f08:	89fb      	ldrh	r3, [r7, #14]
 8008f0a:	f003 030f 	and.w	r3, r3, #15
 8008f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f12:	6879      	ldr	r1, [r7, #4]
 8008f14:	33e0      	adds	r3, #224	; 0xe0
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	440b      	add	r3, r1
 8008f1a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008f1c:	89fb      	ldrh	r3, [r7, #14]
 8008f1e:	b2db      	uxtb	r3, r3
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008f34:	78fb      	ldrb	r3, [r7, #3]
 8008f36:	2b0f      	cmp	r3, #15
 8008f38:	d80d      	bhi.n	8008f56 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008f3a:	78fb      	ldrb	r3, [r7, #3]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	33e0      	adds	r3, #224	; 0xe0
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	78fb      	ldrb	r3, [r7, #3]
 8008f48:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008f4c:	6879      	ldr	r1, [r7, #4]
 8008f4e:	33e0      	adds	r3, #224	; 0xe0
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	440b      	add	r3, r1
 8008f54:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]
 8008f74:	e00f      	b.n	8008f96 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	33e0      	adds	r3, #224	; 0xe0
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	4413      	add	r3, r2
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d102      	bne.n	8008f90 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	e007      	b.n	8008fa0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	3301      	adds	r3, #1
 8008f94:	73fb      	strb	r3, [r7, #15]
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
 8008f98:	2b0f      	cmp	r3, #15
 8008f9a:	d9ec      	bls.n	8008f76 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	490e      	ldr	r1, [pc, #56]	; (8008fec <MX_USB_HOST_Init+0x40>)
 8008fb4:	480e      	ldr	r0, [pc, #56]	; (8008ff0 <MX_USB_HOST_Init+0x44>)
 8008fb6:	f7ff fb37 	bl	8008628 <USBH_Init>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008fc0:	f7f8 fd62 	bl	8001a88 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 8008fc4:	490b      	ldr	r1, [pc, #44]	; (8008ff4 <MX_USB_HOST_Init+0x48>)
 8008fc6:	480a      	ldr	r0, [pc, #40]	; (8008ff0 <MX_USB_HOST_Init+0x44>)
 8008fc8:	f7ff fbbc 	bl	8008744 <USBH_RegisterClass>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d001      	beq.n	8008fd6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008fd2:	f7f8 fd59 	bl	8001a88 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8008fd6:	4806      	ldr	r0, [pc, #24]	; (8008ff0 <MX_USB_HOST_Init+0x44>)
 8008fd8:	f7ff fc40 	bl	800885c <USBH_Start>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008fe2:	f7f8 fd51 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008fe6:	bf00      	nop
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	08008ff9 	.word	0x08008ff9
 8008ff0:	20000bf4 	.word	0x20000bf4
 8008ff4:	2000001c 	.word	0x2000001c

08008ff8 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009004:	78fb      	ldrb	r3, [r7, #3]
 8009006:	3b01      	subs	r3, #1
 8009008:	2b04      	cmp	r3, #4
 800900a:	d819      	bhi.n	8009040 <USBH_UserProcess+0x48>
 800900c:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <USBH_UserProcess+0x1c>)
 800900e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009012:	bf00      	nop
 8009014:	08009041 	.word	0x08009041
 8009018:	08009031 	.word	0x08009031
 800901c:	08009041 	.word	0x08009041
 8009020:	08009039 	.word	0x08009039
 8009024:	08009029 	.word	0x08009029
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009028:	4b09      	ldr	r3, [pc, #36]	; (8009050 <USBH_UserProcess+0x58>)
 800902a:	2203      	movs	r2, #3
 800902c:	701a      	strb	r2, [r3, #0]
  break;
 800902e:	e008      	b.n	8009042 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009030:	4b07      	ldr	r3, [pc, #28]	; (8009050 <USBH_UserProcess+0x58>)
 8009032:	2202      	movs	r2, #2
 8009034:	701a      	strb	r2, [r3, #0]
  break;
 8009036:	e004      	b.n	8009042 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009038:	4b05      	ldr	r3, [pc, #20]	; (8009050 <USBH_UserProcess+0x58>)
 800903a:	2201      	movs	r2, #1
 800903c:	701a      	strb	r2, [r3, #0]
  break;
 800903e:	e000      	b.n	8009042 <USBH_UserProcess+0x4a>

  default:
  break;
 8009040:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009042:	bf00      	nop
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	20000fcc 	.word	0x20000fcc

08009054 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b08a      	sub	sp, #40	; 0x28
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800905c:	f107 0314 	add.w	r3, r7, #20
 8009060:	2200      	movs	r2, #0
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	605a      	str	r2, [r3, #4]
 8009066:	609a      	str	r2, [r3, #8]
 8009068:	60da      	str	r2, [r3, #12]
 800906a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a24      	ldr	r2, [pc, #144]	; (8009104 <HAL_HCD_MspInit+0xb0>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d141      	bne.n	80090fa <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009076:	2300      	movs	r3, #0
 8009078:	613b      	str	r3, [r7, #16]
 800907a:	4b23      	ldr	r3, [pc, #140]	; (8009108 <HAL_HCD_MspInit+0xb4>)
 800907c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907e:	4a22      	ldr	r2, [pc, #136]	; (8009108 <HAL_HCD_MspInit+0xb4>)
 8009080:	f043 0302 	orr.w	r3, r3, #2
 8009084:	6313      	str	r3, [r2, #48]	; 0x30
 8009086:	4b20      	ldr	r3, [pc, #128]	; (8009108 <HAL_HCD_MspInit+0xb4>)
 8009088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	613b      	str	r3, [r7, #16]
 8009090:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8009092:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8009096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009098:	2302      	movs	r3, #2
 800909a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800909c:	2300      	movs	r3, #0
 800909e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090a0:	2300      	movs	r3, #0
 80090a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80090a4:	230c      	movs	r3, #12
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090a8:	f107 0314 	add.w	r3, r7, #20
 80090ac:	4619      	mov	r1, r3
 80090ae:	4817      	ldr	r0, [pc, #92]	; (800910c <HAL_HCD_MspInit+0xb8>)
 80090b0:	f7f9 fd36 	bl	8002b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80090b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80090b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090ba:	2300      	movs	r3, #0
 80090bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090be:	2300      	movs	r3, #0
 80090c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80090c2:	f107 0314 	add.w	r3, r7, #20
 80090c6:	4619      	mov	r1, r3
 80090c8:	4810      	ldr	r0, [pc, #64]	; (800910c <HAL_HCD_MspInit+0xb8>)
 80090ca:	f7f9 fd29 	bl	8002b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80090ce:	2300      	movs	r3, #0
 80090d0:	60fb      	str	r3, [r7, #12]
 80090d2:	4b0d      	ldr	r3, [pc, #52]	; (8009108 <HAL_HCD_MspInit+0xb4>)
 80090d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d6:	4a0c      	ldr	r2, [pc, #48]	; (8009108 <HAL_HCD_MspInit+0xb4>)
 80090d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090dc:	6313      	str	r3, [r2, #48]	; 0x30
 80090de:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <HAL_HCD_MspInit+0xb4>)
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80090ea:	2200      	movs	r2, #0
 80090ec:	2100      	movs	r1, #0
 80090ee:	204d      	movs	r0, #77	; 0x4d
 80090f0:	f7f9 fae4 	bl	80026bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80090f4:	204d      	movs	r0, #77	; 0x4d
 80090f6:	f7f9 fafd 	bl	80026f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80090fa:	bf00      	nop
 80090fc:	3728      	adds	r7, #40	; 0x28
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	40040000 	.word	0x40040000
 8009108:	40023800 	.word	0x40023800
 800910c:	40020400 	.word	0x40020400

08009110 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff fbbb 	bl	800889a <USBH_LL_IncTimer>
}
 8009124:	bf00      	nop
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800913a:	4618      	mov	r0, r3
 800913c:	f7ff fbf3 	bl	8008926 <USBH_LL_Connect>
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff fbfc 	bl	8008954 <USBH_LL_Disconnect>
}
 800915c:	bf00      	nop
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	460b      	mov	r3, r1
 800916e:	70fb      	strb	r3, [r7, #3]
 8009170:	4613      	mov	r3, r2
 8009172:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800918e:	4618      	mov	r0, r3
 8009190:	f7ff fbad 	bl	80088ee <USBH_LL_PortEnabled>
}
 8009194:	bf00      	nop
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7ff fbad 	bl	800890a <USBH_LL_PortDisabled>
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d132      	bne.n	8009230 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80091ca:	4a1c      	ldr	r2, [pc, #112]	; (800923c <USBH_LL_Init+0x84>)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a19      	ldr	r2, [pc, #100]	; (800923c <USBH_LL_Init+0x84>)
 80091d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80091da:	4b18      	ldr	r3, [pc, #96]	; (800923c <USBH_LL_Init+0x84>)
 80091dc:	4a18      	ldr	r2, [pc, #96]	; (8009240 <USBH_LL_Init+0x88>)
 80091de:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80091e0:	4b16      	ldr	r3, [pc, #88]	; (800923c <USBH_LL_Init+0x84>)
 80091e2:	220c      	movs	r2, #12
 80091e4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80091e6:	4b15      	ldr	r3, [pc, #84]	; (800923c <USBH_LL_Init+0x84>)
 80091e8:	2201      	movs	r2, #1
 80091ea:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80091ec:	4b13      	ldr	r3, [pc, #76]	; (800923c <USBH_LL_Init+0x84>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80091f2:	4b12      	ldr	r3, [pc, #72]	; (800923c <USBH_LL_Init+0x84>)
 80091f4:	2202      	movs	r2, #2
 80091f6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80091f8:	4b10      	ldr	r3, [pc, #64]	; (800923c <USBH_LL_Init+0x84>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80091fe:	4b0f      	ldr	r3, [pc, #60]	; (800923c <USBH_LL_Init+0x84>)
 8009200:	2200      	movs	r2, #0
 8009202:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009204:	4b0d      	ldr	r3, [pc, #52]	; (800923c <USBH_LL_Init+0x84>)
 8009206:	2200      	movs	r2, #0
 8009208:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800920a:	4b0c      	ldr	r3, [pc, #48]	; (800923c <USBH_LL_Init+0x84>)
 800920c:	2200      	movs	r2, #0
 800920e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8009210:	480a      	ldr	r0, [pc, #40]	; (800923c <USBH_LL_Init+0x84>)
 8009212:	f7f9 fe4a 	bl	8002eaa <HAL_HCD_Init>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800921c:	f7f8 fc34 	bl	8001a88 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8009220:	4806      	ldr	r0, [pc, #24]	; (800923c <USBH_LL_Init+0x84>)
 8009222:	f7fa fa20 	bl	8003666 <HAL_HCD_GetCurrentFrame>
 8009226:	4603      	mov	r3, r0
 8009228:	4619      	mov	r1, r3
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff fb26 	bl	800887c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	20000fd0 	.word	0x20000fd0
 8009240:	40040000 	.word	0x40040000

08009244 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800925a:	4618      	mov	r0, r3
 800925c:	f7fa f99b 	bl	8003596 <HAL_HCD_Start>
 8009260:	4603      	mov	r3, r0
 8009262:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	4618      	mov	r0, r3
 8009268:	f000 f90e 	bl	8009488 <USBH_Get_USB_Status>
 800926c:	4603      	mov	r3, r0
 800926e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009270:	7bbb      	ldrb	r3, [r7, #14]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b084      	sub	sp, #16
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009290:	4618      	mov	r0, r3
 8009292:	f7fa f9a3 	bl	80035dc <HAL_HCD_Stop>
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	4618      	mov	r0, r3
 800929e:	f000 f8f3 	bl	8009488 <USBH_Get_USB_Status>
 80092a2:	4603      	mov	r3, r0
 80092a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	460b      	mov	r3, r1
 80092ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092c2:	78fa      	ldrb	r2, [r7, #3]
 80092c4:	4611      	mov	r1, r2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fa f9b9 	bl	800363e <HAL_HCD_HC_GetXferCount>
 80092cc:	4603      	mov	r3, r0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80092d6:	b590      	push	{r4, r7, lr}
 80092d8:	b089      	sub	sp, #36	; 0x24
 80092da:	af04      	add	r7, sp, #16
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	4608      	mov	r0, r1
 80092e0:	4611      	mov	r1, r2
 80092e2:	461a      	mov	r2, r3
 80092e4:	4603      	mov	r3, r0
 80092e6:	70fb      	strb	r3, [r7, #3]
 80092e8:	460b      	mov	r3, r1
 80092ea:	70bb      	strb	r3, [r7, #2]
 80092ec:	4613      	mov	r3, r2
 80092ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80092fe:	787c      	ldrb	r4, [r7, #1]
 8009300:	78ba      	ldrb	r2, [r7, #2]
 8009302:	78f9      	ldrb	r1, [r7, #3]
 8009304:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009306:	9302      	str	r3, [sp, #8]
 8009308:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	4623      	mov	r3, r4
 8009316:	f7f9 fe2a 	bl	8002f6e <HAL_HCD_HC_Init>
 800931a:	4603      	mov	r3, r0
 800931c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800931e:	7bfb      	ldrb	r3, [r7, #15]
 8009320:	4618      	mov	r0, r3
 8009322:	f000 f8b1 	bl	8009488 <USBH_Get_USB_Status>
 8009326:	4603      	mov	r3, r0
 8009328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800932a:	7bbb      	ldrb	r3, [r7, #14]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	bd90      	pop	{r4, r7, pc}

08009334 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800934e:	78fa      	ldrb	r2, [r7, #3]
 8009350:	4611      	mov	r1, r2
 8009352:	4618      	mov	r0, r3
 8009354:	f7f9 fe9a 	bl	800308c <HAL_HCD_HC_Halt>
 8009358:	4603      	mov	r3, r0
 800935a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f892 	bl	8009488 <USBH_Get_USB_Status>
 8009364:	4603      	mov	r3, r0
 8009366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009368:	7bbb      	ldrb	r3, [r7, #14]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009372:	b590      	push	{r4, r7, lr}
 8009374:	b089      	sub	sp, #36	; 0x24
 8009376:	af04      	add	r7, sp, #16
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	4608      	mov	r0, r1
 800937c:	4611      	mov	r1, r2
 800937e:	461a      	mov	r2, r3
 8009380:	4603      	mov	r3, r0
 8009382:	70fb      	strb	r3, [r7, #3]
 8009384:	460b      	mov	r3, r1
 8009386:	70bb      	strb	r3, [r7, #2]
 8009388:	4613      	mov	r3, r2
 800938a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800939a:	787c      	ldrb	r4, [r7, #1]
 800939c:	78ba      	ldrb	r2, [r7, #2]
 800939e:	78f9      	ldrb	r1, [r7, #3]
 80093a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80093a4:	9303      	str	r3, [sp, #12]
 80093a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80093a8:	9302      	str	r3, [sp, #8]
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	4623      	mov	r3, r4
 80093b6:	f7f9 fe8d 	bl	80030d4 <HAL_HCD_HC_SubmitRequest>
 80093ba:	4603      	mov	r3, r0
 80093bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80093be:	7bfb      	ldrb	r3, [r7, #15]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f000 f861 	bl	8009488 <USBH_Get_USB_Status>
 80093c6:	4603      	mov	r3, r0
 80093c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd90      	pop	{r4, r7, pc}

080093d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	460b      	mov	r3, r1
 80093de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fa f913 	bl	8003616 <HAL_HCD_HC_GetURBState>
 80093f0:	4603      	mov	r3, r0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	460b      	mov	r3, r1
 8009404:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800940c:	2b00      	cmp	r3, #0
 800940e:	d103      	bne.n	8009418 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	4618      	mov	r0, r3
 8009414:	f000 f864 	bl	80094e0 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009418:	20c8      	movs	r0, #200	; 0xc8
 800941a:	f7f9 f873 	bl	8002504 <HAL_Delay>
  return USBH_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	460b      	mov	r3, r1
 8009432:	70fb      	strb	r3, [r7, #3]
 8009434:	4613      	mov	r3, r2
 8009436:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800943e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	212c      	movs	r1, #44	; 0x2c
 8009446:	fb01 f303 	mul.w	r3, r1, r3
 800944a:	4413      	add	r3, r2
 800944c:	333b      	adds	r3, #59	; 0x3b
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d009      	beq.n	8009468 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	212c      	movs	r1, #44	; 0x2c
 800945a:	fb01 f303 	mul.w	r3, r1, r3
 800945e:	4413      	add	r3, r2
 8009460:	3354      	adds	r3, #84	; 0x54
 8009462:	78ba      	ldrb	r2, [r7, #2]
 8009464:	701a      	strb	r2, [r3, #0]
 8009466:	e008      	b.n	800947a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009468:	78fb      	ldrb	r3, [r7, #3]
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	212c      	movs	r1, #44	; 0x2c
 800946e:	fb01 f303 	mul.w	r3, r1, r3
 8009472:	4413      	add	r3, r2
 8009474:	3355      	adds	r3, #85	; 0x55
 8009476:	78ba      	ldrb	r2, [r7, #2]
 8009478:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009492:	2300      	movs	r3, #0
 8009494:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009496:	79fb      	ldrb	r3, [r7, #7]
 8009498:	2b03      	cmp	r3, #3
 800949a:	d817      	bhi.n	80094cc <USBH_Get_USB_Status+0x44>
 800949c:	a201      	add	r2, pc, #4	; (adr r2, 80094a4 <USBH_Get_USB_Status+0x1c>)
 800949e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a2:	bf00      	nop
 80094a4:	080094b5 	.word	0x080094b5
 80094a8:	080094bb 	.word	0x080094bb
 80094ac:	080094c1 	.word	0x080094c1
 80094b0:	080094c7 	.word	0x080094c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	73fb      	strb	r3, [r7, #15]
    break;
 80094b8:	e00b      	b.n	80094d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80094ba:	2302      	movs	r3, #2
 80094bc:	73fb      	strb	r3, [r7, #15]
    break;
 80094be:	e008      	b.n	80094d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80094c0:	2301      	movs	r3, #1
 80094c2:	73fb      	strb	r3, [r7, #15]
    break;
 80094c4:	e005      	b.n	80094d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80094c6:	2302      	movs	r3, #2
 80094c8:	73fb      	strb	r3, [r7, #15]
    break;
 80094ca:	e002      	b.n	80094d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80094cc:	2302      	movs	r3, #2
 80094ce:	73fb      	strb	r3, [r7, #15]
    break;
 80094d0:	bf00      	nop
  }
  return usb_status;
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80094ea:	79fb      	ldrb	r3, [r7, #7]
 80094ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 80094ee:	79fb      	ldrb	r3, [r7, #7]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d102      	bne.n	80094fa <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80094f4:	2301      	movs	r3, #1
 80094f6:	73fb      	strb	r3, [r7, #15]
 80094f8:	e001      	b.n	80094fe <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	461a      	mov	r2, r3
 8009502:	2110      	movs	r1, #16
 8009504:	4803      	ldr	r0, [pc, #12]	; (8009514 <MX_DriverVbusHS+0x34>)
 8009506:	f7f9 fcb7 	bl	8002e78 <HAL_GPIO_WritePin>
}
 800950a:	bf00      	nop
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	40020800 	.word	0x40020800

08009518 <__errno>:
 8009518:	4b01      	ldr	r3, [pc, #4]	; (8009520 <__errno+0x8>)
 800951a:	6818      	ldr	r0, [r3, #0]
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	2000003c 	.word	0x2000003c

08009524 <__libc_init_array>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	4d0d      	ldr	r5, [pc, #52]	; (800955c <__libc_init_array+0x38>)
 8009528:	4c0d      	ldr	r4, [pc, #52]	; (8009560 <__libc_init_array+0x3c>)
 800952a:	1b64      	subs	r4, r4, r5
 800952c:	10a4      	asrs	r4, r4, #2
 800952e:	2600      	movs	r6, #0
 8009530:	42a6      	cmp	r6, r4
 8009532:	d109      	bne.n	8009548 <__libc_init_array+0x24>
 8009534:	4d0b      	ldr	r5, [pc, #44]	; (8009564 <__libc_init_array+0x40>)
 8009536:	4c0c      	ldr	r4, [pc, #48]	; (8009568 <__libc_init_array+0x44>)
 8009538:	f000 fcae 	bl	8009e98 <_init>
 800953c:	1b64      	subs	r4, r4, r5
 800953e:	10a4      	asrs	r4, r4, #2
 8009540:	2600      	movs	r6, #0
 8009542:	42a6      	cmp	r6, r4
 8009544:	d105      	bne.n	8009552 <__libc_init_array+0x2e>
 8009546:	bd70      	pop	{r4, r5, r6, pc}
 8009548:	f855 3b04 	ldr.w	r3, [r5], #4
 800954c:	4798      	blx	r3
 800954e:	3601      	adds	r6, #1
 8009550:	e7ee      	b.n	8009530 <__libc_init_array+0xc>
 8009552:	f855 3b04 	ldr.w	r3, [r5], #4
 8009556:	4798      	blx	r3
 8009558:	3601      	adds	r6, #1
 800955a:	e7f2      	b.n	8009542 <__libc_init_array+0x1e>
 800955c:	0800a4d4 	.word	0x0800a4d4
 8009560:	0800a4d4 	.word	0x0800a4d4
 8009564:	0800a4d4 	.word	0x0800a4d4
 8009568:	0800a4d8 	.word	0x0800a4d8

0800956c <malloc>:
 800956c:	4b02      	ldr	r3, [pc, #8]	; (8009578 <malloc+0xc>)
 800956e:	4601      	mov	r1, r0
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	f000 b87f 	b.w	8009674 <_malloc_r>
 8009576:	bf00      	nop
 8009578:	2000003c 	.word	0x2000003c

0800957c <free>:
 800957c:	4b02      	ldr	r3, [pc, #8]	; (8009588 <free+0xc>)
 800957e:	4601      	mov	r1, r0
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	f000 b80b 	b.w	800959c <_free_r>
 8009586:	bf00      	nop
 8009588:	2000003c 	.word	0x2000003c

0800958c <memset>:
 800958c:	4402      	add	r2, r0
 800958e:	4603      	mov	r3, r0
 8009590:	4293      	cmp	r3, r2
 8009592:	d100      	bne.n	8009596 <memset+0xa>
 8009594:	4770      	bx	lr
 8009596:	f803 1b01 	strb.w	r1, [r3], #1
 800959a:	e7f9      	b.n	8009590 <memset+0x4>

0800959c <_free_r>:
 800959c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800959e:	2900      	cmp	r1, #0
 80095a0:	d044      	beq.n	800962c <_free_r+0x90>
 80095a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095a6:	9001      	str	r0, [sp, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f1a1 0404 	sub.w	r4, r1, #4
 80095ae:	bfb8      	it	lt
 80095b0:	18e4      	addlt	r4, r4, r3
 80095b2:	f000 f913 	bl	80097dc <__malloc_lock>
 80095b6:	4a1e      	ldr	r2, [pc, #120]	; (8009630 <_free_r+0x94>)
 80095b8:	9801      	ldr	r0, [sp, #4]
 80095ba:	6813      	ldr	r3, [r2, #0]
 80095bc:	b933      	cbnz	r3, 80095cc <_free_r+0x30>
 80095be:	6063      	str	r3, [r4, #4]
 80095c0:	6014      	str	r4, [r2, #0]
 80095c2:	b003      	add	sp, #12
 80095c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095c8:	f000 b90e 	b.w	80097e8 <__malloc_unlock>
 80095cc:	42a3      	cmp	r3, r4
 80095ce:	d908      	bls.n	80095e2 <_free_r+0x46>
 80095d0:	6825      	ldr	r5, [r4, #0]
 80095d2:	1961      	adds	r1, r4, r5
 80095d4:	428b      	cmp	r3, r1
 80095d6:	bf01      	itttt	eq
 80095d8:	6819      	ldreq	r1, [r3, #0]
 80095da:	685b      	ldreq	r3, [r3, #4]
 80095dc:	1949      	addeq	r1, r1, r5
 80095de:	6021      	streq	r1, [r4, #0]
 80095e0:	e7ed      	b.n	80095be <_free_r+0x22>
 80095e2:	461a      	mov	r2, r3
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	b10b      	cbz	r3, 80095ec <_free_r+0x50>
 80095e8:	42a3      	cmp	r3, r4
 80095ea:	d9fa      	bls.n	80095e2 <_free_r+0x46>
 80095ec:	6811      	ldr	r1, [r2, #0]
 80095ee:	1855      	adds	r5, r2, r1
 80095f0:	42a5      	cmp	r5, r4
 80095f2:	d10b      	bne.n	800960c <_free_r+0x70>
 80095f4:	6824      	ldr	r4, [r4, #0]
 80095f6:	4421      	add	r1, r4
 80095f8:	1854      	adds	r4, r2, r1
 80095fa:	42a3      	cmp	r3, r4
 80095fc:	6011      	str	r1, [r2, #0]
 80095fe:	d1e0      	bne.n	80095c2 <_free_r+0x26>
 8009600:	681c      	ldr	r4, [r3, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	6053      	str	r3, [r2, #4]
 8009606:	4421      	add	r1, r4
 8009608:	6011      	str	r1, [r2, #0]
 800960a:	e7da      	b.n	80095c2 <_free_r+0x26>
 800960c:	d902      	bls.n	8009614 <_free_r+0x78>
 800960e:	230c      	movs	r3, #12
 8009610:	6003      	str	r3, [r0, #0]
 8009612:	e7d6      	b.n	80095c2 <_free_r+0x26>
 8009614:	6825      	ldr	r5, [r4, #0]
 8009616:	1961      	adds	r1, r4, r5
 8009618:	428b      	cmp	r3, r1
 800961a:	bf04      	itt	eq
 800961c:	6819      	ldreq	r1, [r3, #0]
 800961e:	685b      	ldreq	r3, [r3, #4]
 8009620:	6063      	str	r3, [r4, #4]
 8009622:	bf04      	itt	eq
 8009624:	1949      	addeq	r1, r1, r5
 8009626:	6021      	streq	r1, [r4, #0]
 8009628:	6054      	str	r4, [r2, #4]
 800962a:	e7ca      	b.n	80095c2 <_free_r+0x26>
 800962c:	b003      	add	sp, #12
 800962e:	bd30      	pop	{r4, r5, pc}
 8009630:	200012d4 	.word	0x200012d4

08009634 <sbrk_aligned>:
 8009634:	b570      	push	{r4, r5, r6, lr}
 8009636:	4e0e      	ldr	r6, [pc, #56]	; (8009670 <sbrk_aligned+0x3c>)
 8009638:	460c      	mov	r4, r1
 800963a:	6831      	ldr	r1, [r6, #0]
 800963c:	4605      	mov	r5, r0
 800963e:	b911      	cbnz	r1, 8009646 <sbrk_aligned+0x12>
 8009640:	f000 f88c 	bl	800975c <_sbrk_r>
 8009644:	6030      	str	r0, [r6, #0]
 8009646:	4621      	mov	r1, r4
 8009648:	4628      	mov	r0, r5
 800964a:	f000 f887 	bl	800975c <_sbrk_r>
 800964e:	1c43      	adds	r3, r0, #1
 8009650:	d00a      	beq.n	8009668 <sbrk_aligned+0x34>
 8009652:	1cc4      	adds	r4, r0, #3
 8009654:	f024 0403 	bic.w	r4, r4, #3
 8009658:	42a0      	cmp	r0, r4
 800965a:	d007      	beq.n	800966c <sbrk_aligned+0x38>
 800965c:	1a21      	subs	r1, r4, r0
 800965e:	4628      	mov	r0, r5
 8009660:	f000 f87c 	bl	800975c <_sbrk_r>
 8009664:	3001      	adds	r0, #1
 8009666:	d101      	bne.n	800966c <sbrk_aligned+0x38>
 8009668:	f04f 34ff 	mov.w	r4, #4294967295
 800966c:	4620      	mov	r0, r4
 800966e:	bd70      	pop	{r4, r5, r6, pc}
 8009670:	200012d8 	.word	0x200012d8

08009674 <_malloc_r>:
 8009674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009678:	1ccd      	adds	r5, r1, #3
 800967a:	f025 0503 	bic.w	r5, r5, #3
 800967e:	3508      	adds	r5, #8
 8009680:	2d0c      	cmp	r5, #12
 8009682:	bf38      	it	cc
 8009684:	250c      	movcc	r5, #12
 8009686:	2d00      	cmp	r5, #0
 8009688:	4607      	mov	r7, r0
 800968a:	db01      	blt.n	8009690 <_malloc_r+0x1c>
 800968c:	42a9      	cmp	r1, r5
 800968e:	d905      	bls.n	800969c <_malloc_r+0x28>
 8009690:	230c      	movs	r3, #12
 8009692:	603b      	str	r3, [r7, #0]
 8009694:	2600      	movs	r6, #0
 8009696:	4630      	mov	r0, r6
 8009698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800969c:	4e2e      	ldr	r6, [pc, #184]	; (8009758 <_malloc_r+0xe4>)
 800969e:	f000 f89d 	bl	80097dc <__malloc_lock>
 80096a2:	6833      	ldr	r3, [r6, #0]
 80096a4:	461c      	mov	r4, r3
 80096a6:	bb34      	cbnz	r4, 80096f6 <_malloc_r+0x82>
 80096a8:	4629      	mov	r1, r5
 80096aa:	4638      	mov	r0, r7
 80096ac:	f7ff ffc2 	bl	8009634 <sbrk_aligned>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	4604      	mov	r4, r0
 80096b4:	d14d      	bne.n	8009752 <_malloc_r+0xde>
 80096b6:	6834      	ldr	r4, [r6, #0]
 80096b8:	4626      	mov	r6, r4
 80096ba:	2e00      	cmp	r6, #0
 80096bc:	d140      	bne.n	8009740 <_malloc_r+0xcc>
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	4631      	mov	r1, r6
 80096c2:	4638      	mov	r0, r7
 80096c4:	eb04 0803 	add.w	r8, r4, r3
 80096c8:	f000 f848 	bl	800975c <_sbrk_r>
 80096cc:	4580      	cmp	r8, r0
 80096ce:	d13a      	bne.n	8009746 <_malloc_r+0xd2>
 80096d0:	6821      	ldr	r1, [r4, #0]
 80096d2:	3503      	adds	r5, #3
 80096d4:	1a6d      	subs	r5, r5, r1
 80096d6:	f025 0503 	bic.w	r5, r5, #3
 80096da:	3508      	adds	r5, #8
 80096dc:	2d0c      	cmp	r5, #12
 80096de:	bf38      	it	cc
 80096e0:	250c      	movcc	r5, #12
 80096e2:	4629      	mov	r1, r5
 80096e4:	4638      	mov	r0, r7
 80096e6:	f7ff ffa5 	bl	8009634 <sbrk_aligned>
 80096ea:	3001      	adds	r0, #1
 80096ec:	d02b      	beq.n	8009746 <_malloc_r+0xd2>
 80096ee:	6823      	ldr	r3, [r4, #0]
 80096f0:	442b      	add	r3, r5
 80096f2:	6023      	str	r3, [r4, #0]
 80096f4:	e00e      	b.n	8009714 <_malloc_r+0xa0>
 80096f6:	6822      	ldr	r2, [r4, #0]
 80096f8:	1b52      	subs	r2, r2, r5
 80096fa:	d41e      	bmi.n	800973a <_malloc_r+0xc6>
 80096fc:	2a0b      	cmp	r2, #11
 80096fe:	d916      	bls.n	800972e <_malloc_r+0xba>
 8009700:	1961      	adds	r1, r4, r5
 8009702:	42a3      	cmp	r3, r4
 8009704:	6025      	str	r5, [r4, #0]
 8009706:	bf18      	it	ne
 8009708:	6059      	strne	r1, [r3, #4]
 800970a:	6863      	ldr	r3, [r4, #4]
 800970c:	bf08      	it	eq
 800970e:	6031      	streq	r1, [r6, #0]
 8009710:	5162      	str	r2, [r4, r5]
 8009712:	604b      	str	r3, [r1, #4]
 8009714:	4638      	mov	r0, r7
 8009716:	f104 060b 	add.w	r6, r4, #11
 800971a:	f000 f865 	bl	80097e8 <__malloc_unlock>
 800971e:	f026 0607 	bic.w	r6, r6, #7
 8009722:	1d23      	adds	r3, r4, #4
 8009724:	1af2      	subs	r2, r6, r3
 8009726:	d0b6      	beq.n	8009696 <_malloc_r+0x22>
 8009728:	1b9b      	subs	r3, r3, r6
 800972a:	50a3      	str	r3, [r4, r2]
 800972c:	e7b3      	b.n	8009696 <_malloc_r+0x22>
 800972e:	6862      	ldr	r2, [r4, #4]
 8009730:	42a3      	cmp	r3, r4
 8009732:	bf0c      	ite	eq
 8009734:	6032      	streq	r2, [r6, #0]
 8009736:	605a      	strne	r2, [r3, #4]
 8009738:	e7ec      	b.n	8009714 <_malloc_r+0xa0>
 800973a:	4623      	mov	r3, r4
 800973c:	6864      	ldr	r4, [r4, #4]
 800973e:	e7b2      	b.n	80096a6 <_malloc_r+0x32>
 8009740:	4634      	mov	r4, r6
 8009742:	6876      	ldr	r6, [r6, #4]
 8009744:	e7b9      	b.n	80096ba <_malloc_r+0x46>
 8009746:	230c      	movs	r3, #12
 8009748:	603b      	str	r3, [r7, #0]
 800974a:	4638      	mov	r0, r7
 800974c:	f000 f84c 	bl	80097e8 <__malloc_unlock>
 8009750:	e7a1      	b.n	8009696 <_malloc_r+0x22>
 8009752:	6025      	str	r5, [r4, #0]
 8009754:	e7de      	b.n	8009714 <_malloc_r+0xa0>
 8009756:	bf00      	nop
 8009758:	200012d4 	.word	0x200012d4

0800975c <_sbrk_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4d06      	ldr	r5, [pc, #24]	; (8009778 <_sbrk_r+0x1c>)
 8009760:	2300      	movs	r3, #0
 8009762:	4604      	mov	r4, r0
 8009764:	4608      	mov	r0, r1
 8009766:	602b      	str	r3, [r5, #0]
 8009768:	f7f8 fe18 	bl	800239c <_sbrk>
 800976c:	1c43      	adds	r3, r0, #1
 800976e:	d102      	bne.n	8009776 <_sbrk_r+0x1a>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b103      	cbz	r3, 8009776 <_sbrk_r+0x1a>
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	bd38      	pop	{r3, r4, r5, pc}
 8009778:	200012dc 	.word	0x200012dc

0800977c <siprintf>:
 800977c:	b40e      	push	{r1, r2, r3}
 800977e:	b500      	push	{lr}
 8009780:	b09c      	sub	sp, #112	; 0x70
 8009782:	ab1d      	add	r3, sp, #116	; 0x74
 8009784:	9002      	str	r0, [sp, #8]
 8009786:	9006      	str	r0, [sp, #24]
 8009788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800978c:	4809      	ldr	r0, [pc, #36]	; (80097b4 <siprintf+0x38>)
 800978e:	9107      	str	r1, [sp, #28]
 8009790:	9104      	str	r1, [sp, #16]
 8009792:	4909      	ldr	r1, [pc, #36]	; (80097b8 <siprintf+0x3c>)
 8009794:	f853 2b04 	ldr.w	r2, [r3], #4
 8009798:	9105      	str	r1, [sp, #20]
 800979a:	6800      	ldr	r0, [r0, #0]
 800979c:	9301      	str	r3, [sp, #4]
 800979e:	a902      	add	r1, sp, #8
 80097a0:	f000 f884 	bl	80098ac <_svfiprintf_r>
 80097a4:	9b02      	ldr	r3, [sp, #8]
 80097a6:	2200      	movs	r2, #0
 80097a8:	701a      	strb	r2, [r3, #0]
 80097aa:	b01c      	add	sp, #112	; 0x70
 80097ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80097b0:	b003      	add	sp, #12
 80097b2:	4770      	bx	lr
 80097b4:	2000003c 	.word	0x2000003c
 80097b8:	ffff0208 	.word	0xffff0208

080097bc <strcat>:
 80097bc:	b510      	push	{r4, lr}
 80097be:	4602      	mov	r2, r0
 80097c0:	7814      	ldrb	r4, [r2, #0]
 80097c2:	4613      	mov	r3, r2
 80097c4:	3201      	adds	r2, #1
 80097c6:	2c00      	cmp	r4, #0
 80097c8:	d1fa      	bne.n	80097c0 <strcat+0x4>
 80097ca:	3b01      	subs	r3, #1
 80097cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	d1f9      	bne.n	80097cc <strcat+0x10>
 80097d8:	bd10      	pop	{r4, pc}
	...

080097dc <__malloc_lock>:
 80097dc:	4801      	ldr	r0, [pc, #4]	; (80097e4 <__malloc_lock+0x8>)
 80097de:	f000 baf9 	b.w	8009dd4 <__retarget_lock_acquire_recursive>
 80097e2:	bf00      	nop
 80097e4:	200012e0 	.word	0x200012e0

080097e8 <__malloc_unlock>:
 80097e8:	4801      	ldr	r0, [pc, #4]	; (80097f0 <__malloc_unlock+0x8>)
 80097ea:	f000 baf4 	b.w	8009dd6 <__retarget_lock_release_recursive>
 80097ee:	bf00      	nop
 80097f0:	200012e0 	.word	0x200012e0

080097f4 <__ssputs_r>:
 80097f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097f8:	688e      	ldr	r6, [r1, #8]
 80097fa:	429e      	cmp	r6, r3
 80097fc:	4682      	mov	sl, r0
 80097fe:	460c      	mov	r4, r1
 8009800:	4690      	mov	r8, r2
 8009802:	461f      	mov	r7, r3
 8009804:	d838      	bhi.n	8009878 <__ssputs_r+0x84>
 8009806:	898a      	ldrh	r2, [r1, #12]
 8009808:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800980c:	d032      	beq.n	8009874 <__ssputs_r+0x80>
 800980e:	6825      	ldr	r5, [r4, #0]
 8009810:	6909      	ldr	r1, [r1, #16]
 8009812:	eba5 0901 	sub.w	r9, r5, r1
 8009816:	6965      	ldr	r5, [r4, #20]
 8009818:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800981c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009820:	3301      	adds	r3, #1
 8009822:	444b      	add	r3, r9
 8009824:	106d      	asrs	r5, r5, #1
 8009826:	429d      	cmp	r5, r3
 8009828:	bf38      	it	cc
 800982a:	461d      	movcc	r5, r3
 800982c:	0553      	lsls	r3, r2, #21
 800982e:	d531      	bpl.n	8009894 <__ssputs_r+0xa0>
 8009830:	4629      	mov	r1, r5
 8009832:	f7ff ff1f 	bl	8009674 <_malloc_r>
 8009836:	4606      	mov	r6, r0
 8009838:	b950      	cbnz	r0, 8009850 <__ssputs_r+0x5c>
 800983a:	230c      	movs	r3, #12
 800983c:	f8ca 3000 	str.w	r3, [sl]
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009846:	81a3      	strh	r3, [r4, #12]
 8009848:	f04f 30ff 	mov.w	r0, #4294967295
 800984c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009850:	6921      	ldr	r1, [r4, #16]
 8009852:	464a      	mov	r2, r9
 8009854:	f000 fac0 	bl	8009dd8 <memcpy>
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800985e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009862:	81a3      	strh	r3, [r4, #12]
 8009864:	6126      	str	r6, [r4, #16]
 8009866:	6165      	str	r5, [r4, #20]
 8009868:	444e      	add	r6, r9
 800986a:	eba5 0509 	sub.w	r5, r5, r9
 800986e:	6026      	str	r6, [r4, #0]
 8009870:	60a5      	str	r5, [r4, #8]
 8009872:	463e      	mov	r6, r7
 8009874:	42be      	cmp	r6, r7
 8009876:	d900      	bls.n	800987a <__ssputs_r+0x86>
 8009878:	463e      	mov	r6, r7
 800987a:	6820      	ldr	r0, [r4, #0]
 800987c:	4632      	mov	r2, r6
 800987e:	4641      	mov	r1, r8
 8009880:	f000 fab8 	bl	8009df4 <memmove>
 8009884:	68a3      	ldr	r3, [r4, #8]
 8009886:	1b9b      	subs	r3, r3, r6
 8009888:	60a3      	str	r3, [r4, #8]
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	4433      	add	r3, r6
 800988e:	6023      	str	r3, [r4, #0]
 8009890:	2000      	movs	r0, #0
 8009892:	e7db      	b.n	800984c <__ssputs_r+0x58>
 8009894:	462a      	mov	r2, r5
 8009896:	f000 fac7 	bl	8009e28 <_realloc_r>
 800989a:	4606      	mov	r6, r0
 800989c:	2800      	cmp	r0, #0
 800989e:	d1e1      	bne.n	8009864 <__ssputs_r+0x70>
 80098a0:	6921      	ldr	r1, [r4, #16]
 80098a2:	4650      	mov	r0, sl
 80098a4:	f7ff fe7a 	bl	800959c <_free_r>
 80098a8:	e7c7      	b.n	800983a <__ssputs_r+0x46>
	...

080098ac <_svfiprintf_r>:
 80098ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b0:	4698      	mov	r8, r3
 80098b2:	898b      	ldrh	r3, [r1, #12]
 80098b4:	061b      	lsls	r3, r3, #24
 80098b6:	b09d      	sub	sp, #116	; 0x74
 80098b8:	4607      	mov	r7, r0
 80098ba:	460d      	mov	r5, r1
 80098bc:	4614      	mov	r4, r2
 80098be:	d50e      	bpl.n	80098de <_svfiprintf_r+0x32>
 80098c0:	690b      	ldr	r3, [r1, #16]
 80098c2:	b963      	cbnz	r3, 80098de <_svfiprintf_r+0x32>
 80098c4:	2140      	movs	r1, #64	; 0x40
 80098c6:	f7ff fed5 	bl	8009674 <_malloc_r>
 80098ca:	6028      	str	r0, [r5, #0]
 80098cc:	6128      	str	r0, [r5, #16]
 80098ce:	b920      	cbnz	r0, 80098da <_svfiprintf_r+0x2e>
 80098d0:	230c      	movs	r3, #12
 80098d2:	603b      	str	r3, [r7, #0]
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	e0d1      	b.n	8009a7e <_svfiprintf_r+0x1d2>
 80098da:	2340      	movs	r3, #64	; 0x40
 80098dc:	616b      	str	r3, [r5, #20]
 80098de:	2300      	movs	r3, #0
 80098e0:	9309      	str	r3, [sp, #36]	; 0x24
 80098e2:	2320      	movs	r3, #32
 80098e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80098ec:	2330      	movs	r3, #48	; 0x30
 80098ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009a98 <_svfiprintf_r+0x1ec>
 80098f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098f6:	f04f 0901 	mov.w	r9, #1
 80098fa:	4623      	mov	r3, r4
 80098fc:	469a      	mov	sl, r3
 80098fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009902:	b10a      	cbz	r2, 8009908 <_svfiprintf_r+0x5c>
 8009904:	2a25      	cmp	r2, #37	; 0x25
 8009906:	d1f9      	bne.n	80098fc <_svfiprintf_r+0x50>
 8009908:	ebba 0b04 	subs.w	fp, sl, r4
 800990c:	d00b      	beq.n	8009926 <_svfiprintf_r+0x7a>
 800990e:	465b      	mov	r3, fp
 8009910:	4622      	mov	r2, r4
 8009912:	4629      	mov	r1, r5
 8009914:	4638      	mov	r0, r7
 8009916:	f7ff ff6d 	bl	80097f4 <__ssputs_r>
 800991a:	3001      	adds	r0, #1
 800991c:	f000 80aa 	beq.w	8009a74 <_svfiprintf_r+0x1c8>
 8009920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009922:	445a      	add	r2, fp
 8009924:	9209      	str	r2, [sp, #36]	; 0x24
 8009926:	f89a 3000 	ldrb.w	r3, [sl]
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 80a2 	beq.w	8009a74 <_svfiprintf_r+0x1c8>
 8009930:	2300      	movs	r3, #0
 8009932:	f04f 32ff 	mov.w	r2, #4294967295
 8009936:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800993a:	f10a 0a01 	add.w	sl, sl, #1
 800993e:	9304      	str	r3, [sp, #16]
 8009940:	9307      	str	r3, [sp, #28]
 8009942:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009946:	931a      	str	r3, [sp, #104]	; 0x68
 8009948:	4654      	mov	r4, sl
 800994a:	2205      	movs	r2, #5
 800994c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009950:	4851      	ldr	r0, [pc, #324]	; (8009a98 <_svfiprintf_r+0x1ec>)
 8009952:	f7f6 fc65 	bl	8000220 <memchr>
 8009956:	9a04      	ldr	r2, [sp, #16]
 8009958:	b9d8      	cbnz	r0, 8009992 <_svfiprintf_r+0xe6>
 800995a:	06d0      	lsls	r0, r2, #27
 800995c:	bf44      	itt	mi
 800995e:	2320      	movmi	r3, #32
 8009960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009964:	0711      	lsls	r1, r2, #28
 8009966:	bf44      	itt	mi
 8009968:	232b      	movmi	r3, #43	; 0x2b
 800996a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800996e:	f89a 3000 	ldrb.w	r3, [sl]
 8009972:	2b2a      	cmp	r3, #42	; 0x2a
 8009974:	d015      	beq.n	80099a2 <_svfiprintf_r+0xf6>
 8009976:	9a07      	ldr	r2, [sp, #28]
 8009978:	4654      	mov	r4, sl
 800997a:	2000      	movs	r0, #0
 800997c:	f04f 0c0a 	mov.w	ip, #10
 8009980:	4621      	mov	r1, r4
 8009982:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009986:	3b30      	subs	r3, #48	; 0x30
 8009988:	2b09      	cmp	r3, #9
 800998a:	d94e      	bls.n	8009a2a <_svfiprintf_r+0x17e>
 800998c:	b1b0      	cbz	r0, 80099bc <_svfiprintf_r+0x110>
 800998e:	9207      	str	r2, [sp, #28]
 8009990:	e014      	b.n	80099bc <_svfiprintf_r+0x110>
 8009992:	eba0 0308 	sub.w	r3, r0, r8
 8009996:	fa09 f303 	lsl.w	r3, r9, r3
 800999a:	4313      	orrs	r3, r2
 800999c:	9304      	str	r3, [sp, #16]
 800999e:	46a2      	mov	sl, r4
 80099a0:	e7d2      	b.n	8009948 <_svfiprintf_r+0x9c>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	1d19      	adds	r1, r3, #4
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	9103      	str	r1, [sp, #12]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	bfbb      	ittet	lt
 80099ae:	425b      	neglt	r3, r3
 80099b0:	f042 0202 	orrlt.w	r2, r2, #2
 80099b4:	9307      	strge	r3, [sp, #28]
 80099b6:	9307      	strlt	r3, [sp, #28]
 80099b8:	bfb8      	it	lt
 80099ba:	9204      	strlt	r2, [sp, #16]
 80099bc:	7823      	ldrb	r3, [r4, #0]
 80099be:	2b2e      	cmp	r3, #46	; 0x2e
 80099c0:	d10c      	bne.n	80099dc <_svfiprintf_r+0x130>
 80099c2:	7863      	ldrb	r3, [r4, #1]
 80099c4:	2b2a      	cmp	r3, #42	; 0x2a
 80099c6:	d135      	bne.n	8009a34 <_svfiprintf_r+0x188>
 80099c8:	9b03      	ldr	r3, [sp, #12]
 80099ca:	1d1a      	adds	r2, r3, #4
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	9203      	str	r2, [sp, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	bfb8      	it	lt
 80099d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80099d8:	3402      	adds	r4, #2
 80099da:	9305      	str	r3, [sp, #20]
 80099dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009aa8 <_svfiprintf_r+0x1fc>
 80099e0:	7821      	ldrb	r1, [r4, #0]
 80099e2:	2203      	movs	r2, #3
 80099e4:	4650      	mov	r0, sl
 80099e6:	f7f6 fc1b 	bl	8000220 <memchr>
 80099ea:	b140      	cbz	r0, 80099fe <_svfiprintf_r+0x152>
 80099ec:	2340      	movs	r3, #64	; 0x40
 80099ee:	eba0 000a 	sub.w	r0, r0, sl
 80099f2:	fa03 f000 	lsl.w	r0, r3, r0
 80099f6:	9b04      	ldr	r3, [sp, #16]
 80099f8:	4303      	orrs	r3, r0
 80099fa:	3401      	adds	r4, #1
 80099fc:	9304      	str	r3, [sp, #16]
 80099fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a02:	4826      	ldr	r0, [pc, #152]	; (8009a9c <_svfiprintf_r+0x1f0>)
 8009a04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a08:	2206      	movs	r2, #6
 8009a0a:	f7f6 fc09 	bl	8000220 <memchr>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	d038      	beq.n	8009a84 <_svfiprintf_r+0x1d8>
 8009a12:	4b23      	ldr	r3, [pc, #140]	; (8009aa0 <_svfiprintf_r+0x1f4>)
 8009a14:	bb1b      	cbnz	r3, 8009a5e <_svfiprintf_r+0x1b2>
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	3307      	adds	r3, #7
 8009a1a:	f023 0307 	bic.w	r3, r3, #7
 8009a1e:	3308      	adds	r3, #8
 8009a20:	9303      	str	r3, [sp, #12]
 8009a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a24:	4433      	add	r3, r6
 8009a26:	9309      	str	r3, [sp, #36]	; 0x24
 8009a28:	e767      	b.n	80098fa <_svfiprintf_r+0x4e>
 8009a2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a2e:	460c      	mov	r4, r1
 8009a30:	2001      	movs	r0, #1
 8009a32:	e7a5      	b.n	8009980 <_svfiprintf_r+0xd4>
 8009a34:	2300      	movs	r3, #0
 8009a36:	3401      	adds	r4, #1
 8009a38:	9305      	str	r3, [sp, #20]
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	f04f 0c0a 	mov.w	ip, #10
 8009a40:	4620      	mov	r0, r4
 8009a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a46:	3a30      	subs	r2, #48	; 0x30
 8009a48:	2a09      	cmp	r2, #9
 8009a4a:	d903      	bls.n	8009a54 <_svfiprintf_r+0x1a8>
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d0c5      	beq.n	80099dc <_svfiprintf_r+0x130>
 8009a50:	9105      	str	r1, [sp, #20]
 8009a52:	e7c3      	b.n	80099dc <_svfiprintf_r+0x130>
 8009a54:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a58:	4604      	mov	r4, r0
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e7f0      	b.n	8009a40 <_svfiprintf_r+0x194>
 8009a5e:	ab03      	add	r3, sp, #12
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	462a      	mov	r2, r5
 8009a64:	4b0f      	ldr	r3, [pc, #60]	; (8009aa4 <_svfiprintf_r+0x1f8>)
 8009a66:	a904      	add	r1, sp, #16
 8009a68:	4638      	mov	r0, r7
 8009a6a:	f3af 8000 	nop.w
 8009a6e:	1c42      	adds	r2, r0, #1
 8009a70:	4606      	mov	r6, r0
 8009a72:	d1d6      	bne.n	8009a22 <_svfiprintf_r+0x176>
 8009a74:	89ab      	ldrh	r3, [r5, #12]
 8009a76:	065b      	lsls	r3, r3, #25
 8009a78:	f53f af2c 	bmi.w	80098d4 <_svfiprintf_r+0x28>
 8009a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a7e:	b01d      	add	sp, #116	; 0x74
 8009a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a84:	ab03      	add	r3, sp, #12
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	462a      	mov	r2, r5
 8009a8a:	4b06      	ldr	r3, [pc, #24]	; (8009aa4 <_svfiprintf_r+0x1f8>)
 8009a8c:	a904      	add	r1, sp, #16
 8009a8e:	4638      	mov	r0, r7
 8009a90:	f000 f87a 	bl	8009b88 <_printf_i>
 8009a94:	e7eb      	b.n	8009a6e <_svfiprintf_r+0x1c2>
 8009a96:	bf00      	nop
 8009a98:	0800a498 	.word	0x0800a498
 8009a9c:	0800a4a2 	.word	0x0800a4a2
 8009aa0:	00000000 	.word	0x00000000
 8009aa4:	080097f5 	.word	0x080097f5
 8009aa8:	0800a49e 	.word	0x0800a49e

08009aac <_printf_common>:
 8009aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab0:	4616      	mov	r6, r2
 8009ab2:	4699      	mov	r9, r3
 8009ab4:	688a      	ldr	r2, [r1, #8]
 8009ab6:	690b      	ldr	r3, [r1, #16]
 8009ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009abc:	4293      	cmp	r3, r2
 8009abe:	bfb8      	it	lt
 8009ac0:	4613      	movlt	r3, r2
 8009ac2:	6033      	str	r3, [r6, #0]
 8009ac4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ac8:	4607      	mov	r7, r0
 8009aca:	460c      	mov	r4, r1
 8009acc:	b10a      	cbz	r2, 8009ad2 <_printf_common+0x26>
 8009ace:	3301      	adds	r3, #1
 8009ad0:	6033      	str	r3, [r6, #0]
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	0699      	lsls	r1, r3, #26
 8009ad6:	bf42      	ittt	mi
 8009ad8:	6833      	ldrmi	r3, [r6, #0]
 8009ada:	3302      	addmi	r3, #2
 8009adc:	6033      	strmi	r3, [r6, #0]
 8009ade:	6825      	ldr	r5, [r4, #0]
 8009ae0:	f015 0506 	ands.w	r5, r5, #6
 8009ae4:	d106      	bne.n	8009af4 <_printf_common+0x48>
 8009ae6:	f104 0a19 	add.w	sl, r4, #25
 8009aea:	68e3      	ldr	r3, [r4, #12]
 8009aec:	6832      	ldr	r2, [r6, #0]
 8009aee:	1a9b      	subs	r3, r3, r2
 8009af0:	42ab      	cmp	r3, r5
 8009af2:	dc26      	bgt.n	8009b42 <_printf_common+0x96>
 8009af4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009af8:	1e13      	subs	r3, r2, #0
 8009afa:	6822      	ldr	r2, [r4, #0]
 8009afc:	bf18      	it	ne
 8009afe:	2301      	movne	r3, #1
 8009b00:	0692      	lsls	r2, r2, #26
 8009b02:	d42b      	bmi.n	8009b5c <_printf_common+0xb0>
 8009b04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b08:	4649      	mov	r1, r9
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	47c0      	blx	r8
 8009b0e:	3001      	adds	r0, #1
 8009b10:	d01e      	beq.n	8009b50 <_printf_common+0xa4>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	68e5      	ldr	r5, [r4, #12]
 8009b16:	6832      	ldr	r2, [r6, #0]
 8009b18:	f003 0306 	and.w	r3, r3, #6
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	bf08      	it	eq
 8009b20:	1aad      	subeq	r5, r5, r2
 8009b22:	68a3      	ldr	r3, [r4, #8]
 8009b24:	6922      	ldr	r2, [r4, #16]
 8009b26:	bf0c      	ite	eq
 8009b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b2c:	2500      	movne	r5, #0
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	bfc4      	itt	gt
 8009b32:	1a9b      	subgt	r3, r3, r2
 8009b34:	18ed      	addgt	r5, r5, r3
 8009b36:	2600      	movs	r6, #0
 8009b38:	341a      	adds	r4, #26
 8009b3a:	42b5      	cmp	r5, r6
 8009b3c:	d11a      	bne.n	8009b74 <_printf_common+0xc8>
 8009b3e:	2000      	movs	r0, #0
 8009b40:	e008      	b.n	8009b54 <_printf_common+0xa8>
 8009b42:	2301      	movs	r3, #1
 8009b44:	4652      	mov	r2, sl
 8009b46:	4649      	mov	r1, r9
 8009b48:	4638      	mov	r0, r7
 8009b4a:	47c0      	blx	r8
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d103      	bne.n	8009b58 <_printf_common+0xac>
 8009b50:	f04f 30ff 	mov.w	r0, #4294967295
 8009b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b58:	3501      	adds	r5, #1
 8009b5a:	e7c6      	b.n	8009aea <_printf_common+0x3e>
 8009b5c:	18e1      	adds	r1, r4, r3
 8009b5e:	1c5a      	adds	r2, r3, #1
 8009b60:	2030      	movs	r0, #48	; 0x30
 8009b62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b66:	4422      	add	r2, r4
 8009b68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b70:	3302      	adds	r3, #2
 8009b72:	e7c7      	b.n	8009b04 <_printf_common+0x58>
 8009b74:	2301      	movs	r3, #1
 8009b76:	4622      	mov	r2, r4
 8009b78:	4649      	mov	r1, r9
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	47c0      	blx	r8
 8009b7e:	3001      	adds	r0, #1
 8009b80:	d0e6      	beq.n	8009b50 <_printf_common+0xa4>
 8009b82:	3601      	adds	r6, #1
 8009b84:	e7d9      	b.n	8009b3a <_printf_common+0x8e>
	...

08009b88 <_printf_i>:
 8009b88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8c:	7e0f      	ldrb	r7, [r1, #24]
 8009b8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b90:	2f78      	cmp	r7, #120	; 0x78
 8009b92:	4691      	mov	r9, r2
 8009b94:	4680      	mov	r8, r0
 8009b96:	460c      	mov	r4, r1
 8009b98:	469a      	mov	sl, r3
 8009b9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b9e:	d807      	bhi.n	8009bb0 <_printf_i+0x28>
 8009ba0:	2f62      	cmp	r7, #98	; 0x62
 8009ba2:	d80a      	bhi.n	8009bba <_printf_i+0x32>
 8009ba4:	2f00      	cmp	r7, #0
 8009ba6:	f000 80d8 	beq.w	8009d5a <_printf_i+0x1d2>
 8009baa:	2f58      	cmp	r7, #88	; 0x58
 8009bac:	f000 80a3 	beq.w	8009cf6 <_printf_i+0x16e>
 8009bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bb8:	e03a      	b.n	8009c30 <_printf_i+0xa8>
 8009bba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bbe:	2b15      	cmp	r3, #21
 8009bc0:	d8f6      	bhi.n	8009bb0 <_printf_i+0x28>
 8009bc2:	a101      	add	r1, pc, #4	; (adr r1, 8009bc8 <_printf_i+0x40>)
 8009bc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bc8:	08009c21 	.word	0x08009c21
 8009bcc:	08009c35 	.word	0x08009c35
 8009bd0:	08009bb1 	.word	0x08009bb1
 8009bd4:	08009bb1 	.word	0x08009bb1
 8009bd8:	08009bb1 	.word	0x08009bb1
 8009bdc:	08009bb1 	.word	0x08009bb1
 8009be0:	08009c35 	.word	0x08009c35
 8009be4:	08009bb1 	.word	0x08009bb1
 8009be8:	08009bb1 	.word	0x08009bb1
 8009bec:	08009bb1 	.word	0x08009bb1
 8009bf0:	08009bb1 	.word	0x08009bb1
 8009bf4:	08009d41 	.word	0x08009d41
 8009bf8:	08009c65 	.word	0x08009c65
 8009bfc:	08009d23 	.word	0x08009d23
 8009c00:	08009bb1 	.word	0x08009bb1
 8009c04:	08009bb1 	.word	0x08009bb1
 8009c08:	08009d63 	.word	0x08009d63
 8009c0c:	08009bb1 	.word	0x08009bb1
 8009c10:	08009c65 	.word	0x08009c65
 8009c14:	08009bb1 	.word	0x08009bb1
 8009c18:	08009bb1 	.word	0x08009bb1
 8009c1c:	08009d2b 	.word	0x08009d2b
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	1d1a      	adds	r2, r3, #4
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	602a      	str	r2, [r5, #0]
 8009c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c30:	2301      	movs	r3, #1
 8009c32:	e0a3      	b.n	8009d7c <_printf_i+0x1f4>
 8009c34:	6820      	ldr	r0, [r4, #0]
 8009c36:	6829      	ldr	r1, [r5, #0]
 8009c38:	0606      	lsls	r6, r0, #24
 8009c3a:	f101 0304 	add.w	r3, r1, #4
 8009c3e:	d50a      	bpl.n	8009c56 <_printf_i+0xce>
 8009c40:	680e      	ldr	r6, [r1, #0]
 8009c42:	602b      	str	r3, [r5, #0]
 8009c44:	2e00      	cmp	r6, #0
 8009c46:	da03      	bge.n	8009c50 <_printf_i+0xc8>
 8009c48:	232d      	movs	r3, #45	; 0x2d
 8009c4a:	4276      	negs	r6, r6
 8009c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c50:	485e      	ldr	r0, [pc, #376]	; (8009dcc <_printf_i+0x244>)
 8009c52:	230a      	movs	r3, #10
 8009c54:	e019      	b.n	8009c8a <_printf_i+0x102>
 8009c56:	680e      	ldr	r6, [r1, #0]
 8009c58:	602b      	str	r3, [r5, #0]
 8009c5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c5e:	bf18      	it	ne
 8009c60:	b236      	sxthne	r6, r6
 8009c62:	e7ef      	b.n	8009c44 <_printf_i+0xbc>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	6820      	ldr	r0, [r4, #0]
 8009c68:	1d19      	adds	r1, r3, #4
 8009c6a:	6029      	str	r1, [r5, #0]
 8009c6c:	0601      	lsls	r1, r0, #24
 8009c6e:	d501      	bpl.n	8009c74 <_printf_i+0xec>
 8009c70:	681e      	ldr	r6, [r3, #0]
 8009c72:	e002      	b.n	8009c7a <_printf_i+0xf2>
 8009c74:	0646      	lsls	r6, r0, #25
 8009c76:	d5fb      	bpl.n	8009c70 <_printf_i+0xe8>
 8009c78:	881e      	ldrh	r6, [r3, #0]
 8009c7a:	4854      	ldr	r0, [pc, #336]	; (8009dcc <_printf_i+0x244>)
 8009c7c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c7e:	bf0c      	ite	eq
 8009c80:	2308      	moveq	r3, #8
 8009c82:	230a      	movne	r3, #10
 8009c84:	2100      	movs	r1, #0
 8009c86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c8a:	6865      	ldr	r5, [r4, #4]
 8009c8c:	60a5      	str	r5, [r4, #8]
 8009c8e:	2d00      	cmp	r5, #0
 8009c90:	bfa2      	ittt	ge
 8009c92:	6821      	ldrge	r1, [r4, #0]
 8009c94:	f021 0104 	bicge.w	r1, r1, #4
 8009c98:	6021      	strge	r1, [r4, #0]
 8009c9a:	b90e      	cbnz	r6, 8009ca0 <_printf_i+0x118>
 8009c9c:	2d00      	cmp	r5, #0
 8009c9e:	d04d      	beq.n	8009d3c <_printf_i+0x1b4>
 8009ca0:	4615      	mov	r5, r2
 8009ca2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ca6:	fb03 6711 	mls	r7, r3, r1, r6
 8009caa:	5dc7      	ldrb	r7, [r0, r7]
 8009cac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cb0:	4637      	mov	r7, r6
 8009cb2:	42bb      	cmp	r3, r7
 8009cb4:	460e      	mov	r6, r1
 8009cb6:	d9f4      	bls.n	8009ca2 <_printf_i+0x11a>
 8009cb8:	2b08      	cmp	r3, #8
 8009cba:	d10b      	bne.n	8009cd4 <_printf_i+0x14c>
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	07de      	lsls	r6, r3, #31
 8009cc0:	d508      	bpl.n	8009cd4 <_printf_i+0x14c>
 8009cc2:	6923      	ldr	r3, [r4, #16]
 8009cc4:	6861      	ldr	r1, [r4, #4]
 8009cc6:	4299      	cmp	r1, r3
 8009cc8:	bfde      	ittt	le
 8009cca:	2330      	movle	r3, #48	; 0x30
 8009ccc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cd4:	1b52      	subs	r2, r2, r5
 8009cd6:	6122      	str	r2, [r4, #16]
 8009cd8:	f8cd a000 	str.w	sl, [sp]
 8009cdc:	464b      	mov	r3, r9
 8009cde:	aa03      	add	r2, sp, #12
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	4640      	mov	r0, r8
 8009ce4:	f7ff fee2 	bl	8009aac <_printf_common>
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d14c      	bne.n	8009d86 <_printf_i+0x1fe>
 8009cec:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf0:	b004      	add	sp, #16
 8009cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf6:	4835      	ldr	r0, [pc, #212]	; (8009dcc <_printf_i+0x244>)
 8009cf8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009cfc:	6829      	ldr	r1, [r5, #0]
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d04:	6029      	str	r1, [r5, #0]
 8009d06:	061d      	lsls	r5, r3, #24
 8009d08:	d514      	bpl.n	8009d34 <_printf_i+0x1ac>
 8009d0a:	07df      	lsls	r7, r3, #31
 8009d0c:	bf44      	itt	mi
 8009d0e:	f043 0320 	orrmi.w	r3, r3, #32
 8009d12:	6023      	strmi	r3, [r4, #0]
 8009d14:	b91e      	cbnz	r6, 8009d1e <_printf_i+0x196>
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	f023 0320 	bic.w	r3, r3, #32
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	2310      	movs	r3, #16
 8009d20:	e7b0      	b.n	8009c84 <_printf_i+0xfc>
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	f043 0320 	orr.w	r3, r3, #32
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	2378      	movs	r3, #120	; 0x78
 8009d2c:	4828      	ldr	r0, [pc, #160]	; (8009dd0 <_printf_i+0x248>)
 8009d2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d32:	e7e3      	b.n	8009cfc <_printf_i+0x174>
 8009d34:	0659      	lsls	r1, r3, #25
 8009d36:	bf48      	it	mi
 8009d38:	b2b6      	uxthmi	r6, r6
 8009d3a:	e7e6      	b.n	8009d0a <_printf_i+0x182>
 8009d3c:	4615      	mov	r5, r2
 8009d3e:	e7bb      	b.n	8009cb8 <_printf_i+0x130>
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	6826      	ldr	r6, [r4, #0]
 8009d44:	6961      	ldr	r1, [r4, #20]
 8009d46:	1d18      	adds	r0, r3, #4
 8009d48:	6028      	str	r0, [r5, #0]
 8009d4a:	0635      	lsls	r5, r6, #24
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	d501      	bpl.n	8009d54 <_printf_i+0x1cc>
 8009d50:	6019      	str	r1, [r3, #0]
 8009d52:	e002      	b.n	8009d5a <_printf_i+0x1d2>
 8009d54:	0670      	lsls	r0, r6, #25
 8009d56:	d5fb      	bpl.n	8009d50 <_printf_i+0x1c8>
 8009d58:	8019      	strh	r1, [r3, #0]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	6123      	str	r3, [r4, #16]
 8009d5e:	4615      	mov	r5, r2
 8009d60:	e7ba      	b.n	8009cd8 <_printf_i+0x150>
 8009d62:	682b      	ldr	r3, [r5, #0]
 8009d64:	1d1a      	adds	r2, r3, #4
 8009d66:	602a      	str	r2, [r5, #0]
 8009d68:	681d      	ldr	r5, [r3, #0]
 8009d6a:	6862      	ldr	r2, [r4, #4]
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f7f6 fa56 	bl	8000220 <memchr>
 8009d74:	b108      	cbz	r0, 8009d7a <_printf_i+0x1f2>
 8009d76:	1b40      	subs	r0, r0, r5
 8009d78:	6060      	str	r0, [r4, #4]
 8009d7a:	6863      	ldr	r3, [r4, #4]
 8009d7c:	6123      	str	r3, [r4, #16]
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d84:	e7a8      	b.n	8009cd8 <_printf_i+0x150>
 8009d86:	6923      	ldr	r3, [r4, #16]
 8009d88:	462a      	mov	r2, r5
 8009d8a:	4649      	mov	r1, r9
 8009d8c:	4640      	mov	r0, r8
 8009d8e:	47d0      	blx	sl
 8009d90:	3001      	adds	r0, #1
 8009d92:	d0ab      	beq.n	8009cec <_printf_i+0x164>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	079b      	lsls	r3, r3, #30
 8009d98:	d413      	bmi.n	8009dc2 <_printf_i+0x23a>
 8009d9a:	68e0      	ldr	r0, [r4, #12]
 8009d9c:	9b03      	ldr	r3, [sp, #12]
 8009d9e:	4298      	cmp	r0, r3
 8009da0:	bfb8      	it	lt
 8009da2:	4618      	movlt	r0, r3
 8009da4:	e7a4      	b.n	8009cf0 <_printf_i+0x168>
 8009da6:	2301      	movs	r3, #1
 8009da8:	4632      	mov	r2, r6
 8009daa:	4649      	mov	r1, r9
 8009dac:	4640      	mov	r0, r8
 8009dae:	47d0      	blx	sl
 8009db0:	3001      	adds	r0, #1
 8009db2:	d09b      	beq.n	8009cec <_printf_i+0x164>
 8009db4:	3501      	adds	r5, #1
 8009db6:	68e3      	ldr	r3, [r4, #12]
 8009db8:	9903      	ldr	r1, [sp, #12]
 8009dba:	1a5b      	subs	r3, r3, r1
 8009dbc:	42ab      	cmp	r3, r5
 8009dbe:	dcf2      	bgt.n	8009da6 <_printf_i+0x21e>
 8009dc0:	e7eb      	b.n	8009d9a <_printf_i+0x212>
 8009dc2:	2500      	movs	r5, #0
 8009dc4:	f104 0619 	add.w	r6, r4, #25
 8009dc8:	e7f5      	b.n	8009db6 <_printf_i+0x22e>
 8009dca:	bf00      	nop
 8009dcc:	0800a4a9 	.word	0x0800a4a9
 8009dd0:	0800a4ba 	.word	0x0800a4ba

08009dd4 <__retarget_lock_acquire_recursive>:
 8009dd4:	4770      	bx	lr

08009dd6 <__retarget_lock_release_recursive>:
 8009dd6:	4770      	bx	lr

08009dd8 <memcpy>:
 8009dd8:	440a      	add	r2, r1
 8009dda:	4291      	cmp	r1, r2
 8009ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009de0:	d100      	bne.n	8009de4 <memcpy+0xc>
 8009de2:	4770      	bx	lr
 8009de4:	b510      	push	{r4, lr}
 8009de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dee:	4291      	cmp	r1, r2
 8009df0:	d1f9      	bne.n	8009de6 <memcpy+0xe>
 8009df2:	bd10      	pop	{r4, pc}

08009df4 <memmove>:
 8009df4:	4288      	cmp	r0, r1
 8009df6:	b510      	push	{r4, lr}
 8009df8:	eb01 0402 	add.w	r4, r1, r2
 8009dfc:	d902      	bls.n	8009e04 <memmove+0x10>
 8009dfe:	4284      	cmp	r4, r0
 8009e00:	4623      	mov	r3, r4
 8009e02:	d807      	bhi.n	8009e14 <memmove+0x20>
 8009e04:	1e43      	subs	r3, r0, #1
 8009e06:	42a1      	cmp	r1, r4
 8009e08:	d008      	beq.n	8009e1c <memmove+0x28>
 8009e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e12:	e7f8      	b.n	8009e06 <memmove+0x12>
 8009e14:	4402      	add	r2, r0
 8009e16:	4601      	mov	r1, r0
 8009e18:	428a      	cmp	r2, r1
 8009e1a:	d100      	bne.n	8009e1e <memmove+0x2a>
 8009e1c:	bd10      	pop	{r4, pc}
 8009e1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e26:	e7f7      	b.n	8009e18 <memmove+0x24>

08009e28 <_realloc_r>:
 8009e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2c:	4680      	mov	r8, r0
 8009e2e:	4614      	mov	r4, r2
 8009e30:	460e      	mov	r6, r1
 8009e32:	b921      	cbnz	r1, 8009e3e <_realloc_r+0x16>
 8009e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e38:	4611      	mov	r1, r2
 8009e3a:	f7ff bc1b 	b.w	8009674 <_malloc_r>
 8009e3e:	b92a      	cbnz	r2, 8009e4c <_realloc_r+0x24>
 8009e40:	f7ff fbac 	bl	800959c <_free_r>
 8009e44:	4625      	mov	r5, r4
 8009e46:	4628      	mov	r0, r5
 8009e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e4c:	f000 f81b 	bl	8009e86 <_malloc_usable_size_r>
 8009e50:	4284      	cmp	r4, r0
 8009e52:	4607      	mov	r7, r0
 8009e54:	d802      	bhi.n	8009e5c <_realloc_r+0x34>
 8009e56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e5a:	d812      	bhi.n	8009e82 <_realloc_r+0x5a>
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4640      	mov	r0, r8
 8009e60:	f7ff fc08 	bl	8009674 <_malloc_r>
 8009e64:	4605      	mov	r5, r0
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d0ed      	beq.n	8009e46 <_realloc_r+0x1e>
 8009e6a:	42bc      	cmp	r4, r7
 8009e6c:	4622      	mov	r2, r4
 8009e6e:	4631      	mov	r1, r6
 8009e70:	bf28      	it	cs
 8009e72:	463a      	movcs	r2, r7
 8009e74:	f7ff ffb0 	bl	8009dd8 <memcpy>
 8009e78:	4631      	mov	r1, r6
 8009e7a:	4640      	mov	r0, r8
 8009e7c:	f7ff fb8e 	bl	800959c <_free_r>
 8009e80:	e7e1      	b.n	8009e46 <_realloc_r+0x1e>
 8009e82:	4635      	mov	r5, r6
 8009e84:	e7df      	b.n	8009e46 <_realloc_r+0x1e>

08009e86 <_malloc_usable_size_r>:
 8009e86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e8a:	1f18      	subs	r0, r3, #4
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	bfbc      	itt	lt
 8009e90:	580b      	ldrlt	r3, [r1, r0]
 8009e92:	18c0      	addlt	r0, r0, r3
 8009e94:	4770      	bx	lr
	...

08009e98 <_init>:
 8009e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e9a:	bf00      	nop
 8009e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9e:	bc08      	pop	{r3}
 8009ea0:	469e      	mov	lr, r3
 8009ea2:	4770      	bx	lr

08009ea4 <_fini>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	bf00      	nop
 8009ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eaa:	bc08      	pop	{r3}
 8009eac:	469e      	mov	lr, r3
 8009eae:	4770      	bx	lr
