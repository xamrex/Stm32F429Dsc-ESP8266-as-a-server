
Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ce0  0800d97c  0800d97c  0001d97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801065c  0801065c  000300f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801065c  0801065c  0002065c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010664  08010664  000300f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010664  08010664  00020664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010668  08010668  00020668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0801066c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300f0  2**0
                  CONTENTS
 10 .bss          00001518  200000f0  200000f0  000300f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001608  20001608  000300f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b537  00000000  00000000  00030120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a29  00000000  00000000  0005b657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002190  00000000  00000000  00061080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f90  00000000  00000000  00063210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bd07  00000000  00000000  000651a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ae16  00000000  00000000  00090ea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efc1d  00000000  00000000  000bbcbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ab8da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000092f0  00000000  00000000  001ab92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d964 	.word	0x0800d964

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	0800d964 	.word	0x0800d964

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b098      	sub	sp, #96	; 0x60
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	char data[80];

//	Ringbuf_init();
	Uart_sendstring("AT+RST\r\n", wifi_uart);
 80005ce:	4968      	ldr	r1, [pc, #416]	; (8000770 <ESP_Init+0x1ac>)
 80005d0:	4868      	ldr	r0, [pc, #416]	; (8000774 <ESP_Init+0x1b0>)
 80005d2:	f000 fd36 	bl	8001042 <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 80005d6:	4968      	ldr	r1, [pc, #416]	; (8000778 <ESP_Init+0x1b4>)
 80005d8:	4868      	ldr	r0, [pc, #416]	; (800077c <ESP_Init+0x1b8>)
 80005da:	f000 fd32 	bl	8001042 <Uart_sendstring>
	for (int i=0; i<5; i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005e2:	e00a      	b.n	80005fa <ESP_Init+0x36>
	{
		Uart_sendstring(".", pc_uart);
 80005e4:	4964      	ldr	r1, [pc, #400]	; (8000778 <ESP_Init+0x1b4>)
 80005e6:	4866      	ldr	r0, [pc, #408]	; (8000780 <ESP_Init+0x1bc>)
 80005e8:	f000 fd2b 	bl	8001042 <Uart_sendstring>
		HAL_Delay(1000);
 80005ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f0:	f003 f9ee 	bl	80039d0 <HAL_Delay>
	for (int i=0; i<5; i++)
 80005f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005f6:	3301      	adds	r3, #1
 80005f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005fc:	2b04      	cmp	r3, #4
 80005fe:	ddf1      	ble.n	80005e4 <ESP_Init+0x20>
	}

	/********* AT **********/
	Uart_flush(wifi_uart);
 8000600:	485b      	ldr	r0, [pc, #364]	; (8000770 <ESP_Init+0x1ac>)
 8000602:	f000 fb6b 	bl	8000cdc <Uart_flush>
	Uart_sendstring("AT\r\n", wifi_uart);
 8000606:	495a      	ldr	r1, [pc, #360]	; (8000770 <ESP_Init+0x1ac>)
 8000608:	485e      	ldr	r0, [pc, #376]	; (8000784 <ESP_Init+0x1c0>)
 800060a:	f000 fd1a 	bl	8001042 <Uart_sendstring>
	while(!(Wait_for("OK\r\n", wifi_uart)));
 800060e:	bf00      	nop
 8000610:	4957      	ldr	r1, [pc, #348]	; (8000770 <ESP_Init+0x1ac>)
 8000612:	485d      	ldr	r0, [pc, #372]	; (8000788 <ESP_Init+0x1c4>)
 8000614:	f000 fdaa 	bl	800116c <Wait_for>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0f8      	beq.n	8000610 <ESP_Init+0x4c>
	Uart_sendstring("AT---->OK\r\n", pc_uart);
 800061e:	4956      	ldr	r1, [pc, #344]	; (8000778 <ESP_Init+0x1b4>)
 8000620:	485a      	ldr	r0, [pc, #360]	; (800078c <ESP_Init+0x1c8>)
 8000622:	f000 fd0e 	bl	8001042 <Uart_sendstring>


	/********* AT+CWMODE=1 **********/
	Uart_flush(wifi_uart);
 8000626:	4852      	ldr	r0, [pc, #328]	; (8000770 <ESP_Init+0x1ac>)
 8000628:	f000 fb58 	bl	8000cdc <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 800062c:	4950      	ldr	r1, [pc, #320]	; (8000770 <ESP_Init+0x1ac>)
 800062e:	4858      	ldr	r0, [pc, #352]	; (8000790 <ESP_Init+0x1cc>)
 8000630:	f000 fd07 	bl	8001042 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000634:	bf00      	nop
 8000636:	494e      	ldr	r1, [pc, #312]	; (8000770 <ESP_Init+0x1ac>)
 8000638:	4853      	ldr	r0, [pc, #332]	; (8000788 <ESP_Init+0x1c4>)
 800063a:	f000 fd97 	bl	800116c <Wait_for>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0f8      	beq.n	8000636 <ESP_Init+0x72>
	Uart_sendstring("CW MODE---->1\r\n", pc_uart);
 8000644:	494c      	ldr	r1, [pc, #304]	; (8000778 <ESP_Init+0x1b4>)
 8000646:	4853      	ldr	r0, [pc, #332]	; (8000794 <ESP_Init+0x1d0>)
 8000648:	f000 fcfb 	bl	8001042 <Uart_sendstring>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	if(*SSID!=0 || *PASSWD!=0){
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d103      	bne.n	800065c <ESP_Init+0x98>
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d028      	beq.n	80006ae <ESP_Init+0xea>
	Uart_flush(wifi_uart);
 800065c:	4844      	ldr	r0, [pc, #272]	; (8000770 <ESP_Init+0x1ac>)
 800065e:	f000 fb3d 	bl	8000cdc <Uart_flush>
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 8000662:	4945      	ldr	r1, [pc, #276]	; (8000778 <ESP_Init+0x1b4>)
 8000664:	484c      	ldr	r0, [pc, #304]	; (8000798 <ESP_Init+0x1d4>)
 8000666:	f000 fcec 	bl	8001042 <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 800066a:	f107 0008 	add.w	r0, r7, #8
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	494a      	ldr	r1, [pc, #296]	; (800079c <ESP_Init+0x1d8>)
 8000674:	f00c fde0 	bl	800d238 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	493c      	ldr	r1, [pc, #240]	; (8000770 <ESP_Init+0x1ac>)
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fcdf 	bl	8001042 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000684:	bf00      	nop
 8000686:	493a      	ldr	r1, [pc, #232]	; (8000770 <ESP_Init+0x1ac>)
 8000688:	483f      	ldr	r0, [pc, #252]	; (8000788 <ESP_Init+0x1c4>)
 800068a:	f000 fd6f 	bl	800116c <Wait_for>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0f8      	beq.n	8000686 <ESP_Init+0xc2>
	sprintf (data, "Connected to,\"%s\"\r\n", SSID);
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	4941      	ldr	r1, [pc, #260]	; (80007a0 <ESP_Init+0x1dc>)
 800069c:	4618      	mov	r0, r3
 800069e:	f00c fdcb 	bl	800d238 <siprintf>
	Uart_sendstring(data,pc_uart);
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	4934      	ldr	r1, [pc, #208]	; (8000778 <ESP_Init+0x1b4>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fcca 	bl	8001042 <Uart_sendstring>
	}

	/********* AT+CIFSR **********/
	Uart_flush(wifi_uart);
 80006ae:	4830      	ldr	r0, [pc, #192]	; (8000770 <ESP_Init+0x1ac>)
 80006b0:	f000 fb14 	bl	8000cdc <Uart_flush>
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 80006b4:	492e      	ldr	r1, [pc, #184]	; (8000770 <ESP_Init+0x1ac>)
 80006b6:	483b      	ldr	r0, [pc, #236]	; (80007a4 <ESP_Init+0x1e0>)
 80006b8:	f000 fcc3 	bl	8001042 <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 80006bc:	bf00      	nop
 80006be:	492c      	ldr	r1, [pc, #176]	; (8000770 <ESP_Init+0x1ac>)
 80006c0:	4839      	ldr	r0, [pc, #228]	; (80007a8 <ESP_Init+0x1e4>)
 80006c2:	f000 fd53 	bl	800116c <Wait_for>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d0f8      	beq.n	80006be <ESP_Init+0xfa>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 80006cc:	bf00      	nop
 80006ce:	4a28      	ldr	r2, [pc, #160]	; (8000770 <ESP_Init+0x1ac>)
 80006d0:	4936      	ldr	r1, [pc, #216]	; (80007ac <ESP_Init+0x1e8>)
 80006d2:	4837      	ldr	r0, [pc, #220]	; (80007b0 <ESP_Init+0x1ec>)
 80006d4:	f000 fccc 	bl	8001070 <Copy_upto>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0f7      	beq.n	80006ce <ESP_Init+0x10a>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80006de:	bf00      	nop
 80006e0:	4923      	ldr	r1, [pc, #140]	; (8000770 <ESP_Init+0x1ac>)
 80006e2:	4829      	ldr	r0, [pc, #164]	; (8000788 <ESP_Init+0x1c4>)
 80006e4:	f000 fd42 	bl	800116c <Wait_for>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d0f8      	beq.n	80006e0 <ESP_Init+0x11c>
	int len = strlen (buffer);
 80006ee:	482f      	ldr	r0, [pc, #188]	; (80007ac <ESP_Init+0x1e8>)
 80006f0:	f7ff fd88 	bl	8000204 <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len-1] = '\0';
 80006f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006fa:	3b01      	subs	r3, #1
 80006fc:	4a2b      	ldr	r2, [pc, #172]	; (80007ac <ESP_Init+0x1e8>)
 80006fe:	2100      	movs	r1, #0
 8000700:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\r\n", buffer);
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	4a29      	ldr	r2, [pc, #164]	; (80007ac <ESP_Init+0x1e8>)
 8000708:	492a      	ldr	r1, [pc, #168]	; (80007b4 <ESP_Init+0x1f0>)
 800070a:	4618      	mov	r0, r3
 800070c:	f00c fd94 	bl	800d238 <siprintf>
	Uart_sendstring(data, pc_uart);
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	4918      	ldr	r1, [pc, #96]	; (8000778 <ESP_Init+0x1b4>)
 8000716:	4618      	mov	r0, r3
 8000718:	f000 fc93 	bl	8001042 <Uart_sendstring>

	/********* AT+CIPMUX **********/
	Uart_flush(wifi_uart);
 800071c:	4814      	ldr	r0, [pc, #80]	; (8000770 <ESP_Init+0x1ac>)
 800071e:	f000 fadd 	bl	8000cdc <Uart_flush>
	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 8000722:	4913      	ldr	r1, [pc, #76]	; (8000770 <ESP_Init+0x1ac>)
 8000724:	4824      	ldr	r0, [pc, #144]	; (80007b8 <ESP_Init+0x1f4>)
 8000726:	f000 fc8c 	bl	8001042 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 800072a:	bf00      	nop
 800072c:	4910      	ldr	r1, [pc, #64]	; (8000770 <ESP_Init+0x1ac>)
 800072e:	4816      	ldr	r0, [pc, #88]	; (8000788 <ESP_Init+0x1c4>)
 8000730:	f000 fd1c 	bl	800116c <Wait_for>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0f8      	beq.n	800072c <ESP_Init+0x168>
	Uart_sendstring("CIPMUX---->OK\r\n", pc_uart);
 800073a:	490f      	ldr	r1, [pc, #60]	; (8000778 <ESP_Init+0x1b4>)
 800073c:	481f      	ldr	r0, [pc, #124]	; (80007bc <ESP_Init+0x1f8>)
 800073e:	f000 fc80 	bl	8001042 <Uart_sendstring>

	/********* AT+CIPSERVER **********/
	Uart_flush(wifi_uart);
 8000742:	480b      	ldr	r0, [pc, #44]	; (8000770 <ESP_Init+0x1ac>)
 8000744:	f000 faca 	bl	8000cdc <Uart_flush>
	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 8000748:	4909      	ldr	r1, [pc, #36]	; (8000770 <ESP_Init+0x1ac>)
 800074a:	481d      	ldr	r0, [pc, #116]	; (80007c0 <ESP_Init+0x1fc>)
 800074c:	f000 fc79 	bl	8001042 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000750:	bf00      	nop
 8000752:	4907      	ldr	r1, [pc, #28]	; (8000770 <ESP_Init+0x1ac>)
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <ESP_Init+0x1c4>)
 8000756:	f000 fd09 	bl	800116c <Wait_for>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0f8      	beq.n	8000752 <ESP_Init+0x18e>
	Uart_sendstring("CIPSERVER---->OK\r\n", pc_uart);
 8000760:	4905      	ldr	r1, [pc, #20]	; (8000778 <ESP_Init+0x1b4>)
 8000762:	4818      	ldr	r0, [pc, #96]	; (80007c4 <ESP_Init+0x200>)
 8000764:	f000 fc6d 	bl	8001042 <Uart_sendstring>

}
 8000768:	bf00      	nop
 800076a:	3760      	adds	r7, #96	; 0x60
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000b34 	.word	0x20000b34
 8000774:	0800ddc0 	.word	0x0800ddc0
 8000778:	20000b78 	.word	0x20000b78
 800077c:	0800ddcc 	.word	0x0800ddcc
 8000780:	0800ddd8 	.word	0x0800ddd8
 8000784:	0800dddc 	.word	0x0800dddc
 8000788:	0800dde4 	.word	0x0800dde4
 800078c:	0800ddec 	.word	0x0800ddec
 8000790:	0800ddf8 	.word	0x0800ddf8
 8000794:	0800de08 	.word	0x0800de08
 8000798:	0800de18 	.word	0x0800de18
 800079c:	0800de3c 	.word	0x0800de3c
 80007a0:	0800de54 	.word	0x0800de54
 80007a4:	0800de68 	.word	0x0800de68
 80007a8:	0800de74 	.word	0x0800de74
 80007ac:	2000010c 	.word	0x2000010c
 80007b0:	0800de84 	.word	0x0800de84
 80007b4:	0800de88 	.word	0x0800de88
 80007b8:	0800de98 	.word	0x0800de98
 80007bc:	0800dea8 	.word	0x0800dea8
 80007c0:	0800deb8 	.word	0x0800deb8
 80007c4:	0800decc 	.word	0x0800decc

080007c8 <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b098      	sub	sp, #96	; 0x60
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff fd16 	bl	8000204 <strlen>
 80007d8:	4603      	mov	r3, r0
 80007da:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 80007dc:	f107 000c 	add.w	r0, r7, #12
 80007e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	491a      	ldr	r1, [pc, #104]	; (8000850 <Server_Send+0x88>)
 80007e6:	f00c fd27 	bl	800d238 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4919      	ldr	r1, [pc, #100]	; (8000854 <Server_Send+0x8c>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fc26 	bl	8001042 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 80007f6:	bf00      	nop
 80007f8:	4916      	ldr	r1, [pc, #88]	; (8000854 <Server_Send+0x8c>)
 80007fa:	4817      	ldr	r0, [pc, #92]	; (8000858 <Server_Send+0x90>)
 80007fc:	f000 fcb6 	bl	800116c <Wait_for>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0f8      	beq.n	80007f8 <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 8000806:	4913      	ldr	r1, [pc, #76]	; (8000854 <Server_Send+0x8c>)
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 fc1a 	bl	8001042 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 800080e:	bf00      	nop
 8000810:	4910      	ldr	r1, [pc, #64]	; (8000854 <Server_Send+0x8c>)
 8000812:	4812      	ldr	r0, [pc, #72]	; (800085c <Server_Send+0x94>)
 8000814:	f000 fcaa 	bl	800116c <Wait_for>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d0f8      	beq.n	8000810 <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	490f      	ldr	r1, [pc, #60]	; (8000860 <Server_Send+0x98>)
 8000824:	4618      	mov	r0, r3
 8000826:	f00c fd07 	bl	800d238 <siprintf>
	Uart_sendstring(data, wifi_uart);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	4909      	ldr	r1, [pc, #36]	; (8000854 <Server_Send+0x8c>)
 8000830:	4618      	mov	r0, r3
 8000832:	f000 fc06 	bl	8001042 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000836:	bf00      	nop
 8000838:	4906      	ldr	r1, [pc, #24]	; (8000854 <Server_Send+0x8c>)
 800083a:	480a      	ldr	r0, [pc, #40]	; (8000864 <Server_Send+0x9c>)
 800083c:	f000 fc96 	bl	800116c <Wait_for>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0f8      	beq.n	8000838 <Server_Send+0x70>
	return 1;
 8000846:	2301      	movs	r3, #1
}
 8000848:	4618      	mov	r0, r3
 800084a:	3760      	adds	r7, #96	; 0x60
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	0800dee0 	.word	0x0800dee0
 8000854:	20000b34 	.word	0x20000b34
 8000858:	0800def4 	.word	0x0800def4
 800085c:	0800def8 	.word	0x0800def8
 8000860:	0800df00 	.word	0x0800df00
 8000864:	0800dde4 	.word	0x0800dde4

08000868 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800086e:	af00      	add	r7, sp, #0
 8000870:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000874:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000878:	6018      	str	r0, [r3, #0]
 800087a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800087e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000882:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 8000884:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000888:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	3304      	adds	r3, #4
 8000892:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f00c fbd5 	bl	800d048 <memset>
	if (!(strcmp (str, "/ledon")))
 800089e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80008a2:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80008a6:	493f      	ldr	r1, [pc, #252]	; (80009a4 <Server_Handle+0x13c>)
 80008a8:	6818      	ldr	r0, [r3, #0]
 80008aa:	f7ff fca1 	bl	80001f0 <strcmp>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d122      	bne.n	80008fa <Server_Handle+0x92>
	{
		sprintf (datatosend, Basic_inclusion);
 80008b4:	4b3c      	ldr	r3, [pc, #240]	; (80009a8 <Server_Handle+0x140>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4611      	mov	r1, r2
 80008be:	4618      	mov	r0, r3
 80008c0:	f00c fcba 	bl	800d238 <siprintf>
		strcat(datatosend, LED_ON);
 80008c4:	4b39      	ldr	r3, [pc, #228]	; (80009ac <Server_Handle+0x144>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f00c fcd2 	bl	800d278 <strcat>
		strcat(datatosend, Terminate);
 80008d4:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <Server_Handle+0x148>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	f107 0308 	add.w	r3, r7, #8
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f00c fcca 	bl	800d278 <strcat>
		Server_Send(datatosend, Link_ID);
 80008e4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80008e8:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80008ec:	f107 0208 	add.w	r2, r7, #8
 80008f0:	6819      	ldr	r1, [r3, #0]
 80008f2:	4610      	mov	r0, r2
 80008f4:	f7ff ff68 	bl	80007c8 <Server_Send>
		strcat(datatosend, LED_OFF);
		strcat(datatosend, Terminate);
		Server_Send(datatosend, Link_ID);
	}

}
 80008f8:	e04f      	b.n	800099a <Server_Handle+0x132>
	else if (!(strcmp (str, "/ledoff")))
 80008fa:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80008fe:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000902:	492c      	ldr	r1, [pc, #176]	; (80009b4 <Server_Handle+0x14c>)
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	f7ff fc73 	bl	80001f0 <strcmp>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d122      	bne.n	8000956 <Server_Handle+0xee>
		sprintf (datatosend, Basic_inclusion);
 8000910:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <Server_Handle+0x140>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f00c fc8c 	bl	800d238 <siprintf>
		strcat(datatosend, LED_OFF);
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <Server_Handle+0x150>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	4611      	mov	r1, r2
 800092a:	4618      	mov	r0, r3
 800092c:	f00c fca4 	bl	800d278 <strcat>
		strcat(datatosend, Terminate);
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <Server_Handle+0x148>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f00c fc9c 	bl	800d278 <strcat>
		Server_Send(datatosend, Link_ID);
 8000940:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000944:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000948:	f107 0208 	add.w	r2, r7, #8
 800094c:	6819      	ldr	r1, [r3, #0]
 800094e:	4610      	mov	r0, r2
 8000950:	f7ff ff3a 	bl	80007c8 <Server_Send>
}
 8000954:	e021      	b.n	800099a <Server_Handle+0x132>
		sprintf (datatosend, Basic_inclusion);
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <Server_Handle+0x140>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	f107 0308 	add.w	r3, r7, #8
 800095e:	4611      	mov	r1, r2
 8000960:	4618      	mov	r0, r3
 8000962:	f00c fc69 	bl	800d238 <siprintf>
		strcat(datatosend, LED_OFF);
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <Server_Handle+0x150>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f00c fc81 	bl	800d278 <strcat>
		strcat(datatosend, Terminate);
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <Server_Handle+0x148>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	4611      	mov	r1, r2
 8000980:	4618      	mov	r0, r3
 8000982:	f00c fc79 	bl	800d278 <strcat>
		Server_Send(datatosend, Link_ID);
 8000986:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800098a:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800098e:	f107 0208 	add.w	r2, r7, #8
 8000992:	6819      	ldr	r1, [r3, #0]
 8000994:	4610      	mov	r0, r2
 8000996:	f7ff ff17 	bl	80007c8 <Server_Send>
}
 800099a:	bf00      	nop
 800099c:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	0800df10 	.word	0x0800df10
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000004 	.word	0x20000004
 80009b0:	2000000c 	.word	0x2000000c
 80009b4:	0800df18 	.word	0x0800df18
 80009b8:	20000008 	.word	0x20000008

080009bc <Server_Start>:

void Server_Start (void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b092      	sub	sp, #72	; 0x48
 80009c0:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	223c      	movs	r2, #60	; 0x3c
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00c fb3a 	bl	800d048 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 80009d4:	bf00      	nop
 80009d6:	1dfa      	adds	r2, r7, #7
 80009d8:	4b2f      	ldr	r3, [pc, #188]	; (8000a98 <Server_Start+0xdc>)
 80009da:	2101      	movs	r1, #1
 80009dc:	482f      	ldr	r0, [pc, #188]	; (8000a9c <Server_Start+0xe0>)
 80009de:	f000 fb01 	bl	8000fe4 <Get_after>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d0f6      	beq.n	80009d6 <Server_Start+0x1a>
	Link_ID -= 48;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	3b30      	subs	r3, #48	; 0x30
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 80009f0:	bf00      	nop
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <Server_Start+0xdc>)
 80009f8:	4619      	mov	r1, r3
 80009fa:	4829      	ldr	r0, [pc, #164]	; (8000aa0 <Server_Start+0xe4>)
 80009fc:	f000 fb38 	bl	8001070 <Copy_upto>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f5      	beq.n	80009f2 <Server_Start+0x36>

	//dodane pole adresu przepisuje do buforek

		extract(buftocopyinto, "GET /", "HTTP/1.1",buforek);
 8000a06:	f107 0008 	add.w	r0, r7, #8
 8000a0a:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <Server_Start+0xe8>)
 8000a0c:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <Server_Start+0xec>)
 8000a0e:	4927      	ldr	r1, [pc, #156]	; (8000aac <Server_Start+0xf0>)
 8000a10:	f000 f858 	bl	8000ac4 <extract>



	if (Look_for("/ledon", buftocopyinto) == 1)
 8000a14:	f107 0308 	add.w	r3, r7, #8
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4825      	ldr	r0, [pc, #148]	; (8000ab0 <Server_Start+0xf4>)
 8000a1c:	f000 f90b 	bl	8000c36 <Look_for>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d10b      	bne.n	8000a3e <Server_Start+0x82>
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2c:	4821      	ldr	r0, [pc, #132]	; (8000ab4 <Server_Start+0xf8>)
 8000a2e:	f004 f903 	bl	8004c38 <HAL_GPIO_WritePin>
		Server_Handle("/ledon",Link_ID);
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4619      	mov	r1, r3
 8000a36:	481e      	ldr	r0, [pc, #120]	; (8000ab0 <Server_Start+0xf4>)
 8000a38:	f7ff ff16 	bl	8000868 <Server_Handle>
	else
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
		Server_Handle("/ ", Link_ID);
	}
}
 8000a3c:	e028      	b.n	8000a90 <Server_Start+0xd4>
	else if (Look_for("/ledoff", buftocopyinto) == 1)
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	4619      	mov	r1, r3
 8000a44:	481c      	ldr	r0, [pc, #112]	; (8000ab8 <Server_Start+0xfc>)
 8000a46:	f000 f8f6 	bl	8000c36 <Look_for>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d10b      	bne.n	8000a68 <Server_Start+0xac>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a56:	4817      	ldr	r0, [pc, #92]	; (8000ab4 <Server_Start+0xf8>)
 8000a58:	f004 f8ee 	bl	8004c38 <HAL_GPIO_WritePin>
		Server_Handle("/ledoff",Link_ID);
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <Server_Start+0xfc>)
 8000a62:	f7ff ff01 	bl	8000868 <Server_Handle>
}
 8000a66:	e013      	b.n	8000a90 <Server_Start+0xd4>
	else if (Look_for("/favicon.ico", buftocopyinto) == 1);
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4813      	ldr	r0, [pc, #76]	; (8000abc <Server_Start+0x100>)
 8000a70:	f000 f8e1 	bl	8000c36 <Look_for>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d00a      	beq.n	8000a90 <Server_Start+0xd4>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <Server_Start+0xf8>)
 8000a82:	f004 f8d9 	bl	8004c38 <HAL_GPIO_WritePin>
		Server_Handle("/ ", Link_ID);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <Server_Start+0x104>)
 8000a8c:	f7ff feec 	bl	8000868 <Server_Handle>
}
 8000a90:	bf00      	nop
 8000a92:	3748      	adds	r7, #72	; 0x48
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000b34 	.word	0x20000b34
 8000a9c:	0800df20 	.word	0x0800df20
 8000aa0:	0800df28 	.word	0x0800df28
 8000aa4:	20000bf0 	.word	0x20000bf0
 8000aa8:	0800df34 	.word	0x0800df34
 8000aac:	0800df40 	.word	0x0800df40
 8000ab0:	0800df10 	.word	0x0800df10
 8000ab4:	40021800 	.word	0x40021800
 8000ab8:	0800df18 	.word	0x0800df18
 8000abc:	0800df48 	.word	0x0800df48
 8000ac0:	0800df58 	.word	0x0800df58

08000ac4 <extract>:

int extract(char *string,  char *left,  char *right, char *output)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b088      	sub	sp, #32
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	603b      	str	r3, [r7, #0]
    char  *head;
    char  *tail;
    size_t length;
    char  *result;

    if ((string == NULL) || (left == NULL) || (right == NULL))
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d005      	beq.n	8000ae4 <extract+0x20>
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <extract+0x20>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d101      	bne.n	8000ae8 <extract+0x24>
        return 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	e036      	b.n	8000b56 <extract+0x92>
    length = strlen(left);
 8000ae8:	68b8      	ldr	r0, [r7, #8]
 8000aea:	f7ff fb8b 	bl	8000204 <strlen>
 8000aee:	61f8      	str	r0, [r7, #28]
    head   = strstr(string, left);
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f00c fbcf 	bl	800d296 <strstr>
 8000af8:	61b8      	str	r0, [r7, #24]
    if (head == NULL)
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <extract+0x40>
        return 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	e028      	b.n	8000b56 <extract+0x92>
    head += length;
 8000b04:	69ba      	ldr	r2, [r7, #24]
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	4413      	add	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
    tail  = strstr(head, right);
 8000b0c:	6879      	ldr	r1, [r7, #4]
 8000b0e:	69b8      	ldr	r0, [r7, #24]
 8000b10:	f00c fbc1 	bl	800d296 <strstr>
 8000b14:	6178      	str	r0, [r7, #20]
    if (tail == 0)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <extract+0x5c>
        return 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e01a      	b.n	8000b56 <extract+0x92>
    length = tail - head;
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	61fb      	str	r3, [r7, #28]
    result = malloc(1 + length);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f00c fa5d 	bl	800cfec <malloc>
 8000b32:	4603      	mov	r3, r0
 8000b34:	613b      	str	r3, [r7, #16]
    if (result == NULL)
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d101      	bne.n	8000b40 <extract+0x7c>
        return 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e00a      	b.n	8000b56 <extract+0x92>
    result[length] = '\0';
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	4413      	add	r3, r2
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]


    memcpy(output, head, length);
 8000b4a:	69fa      	ldr	r2, [r7, #28]
 8000b4c:	69b9      	ldr	r1, [r7, #24]
 8000b4e:	6838      	ldr	r0, [r7, #0]
 8000b50:	f00c fa6c 	bl	800d02c <memcpy>
    return 1;
 8000b54:	2301      	movs	r3, #1
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3720      	adds	r7, #32
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <Ringbuf_init+0x68>)
 8000b66:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <Ringbuf_init+0x6c>)
 8000b68:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <Ringbuf_init+0x70>)
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <Ringbuf_init+0x74>)
 8000b6e:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <Ringbuf_init+0x78>)
 8000b72:	4a1a      	ldr	r2, [pc, #104]	; (8000bdc <Ringbuf_init+0x7c>)
 8000b74:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <Ringbuf_init+0x80>)
 8000b78:	4a1a      	ldr	r2, [pc, #104]	; (8000be4 <Ringbuf_init+0x84>)
 8000b7a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <Ringbuf_init+0x88>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	695a      	ldr	r2, [r3, #20]
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <Ringbuf_init+0x88>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f042 0201 	orr.w	r2, r2, #1
 8000b8a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <Ringbuf_init+0x8c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	695a      	ldr	r2, [r3, #20]
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <Ringbuf_init+0x8c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f042 0201 	orr.w	r2, r2, #1
 8000b9a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <Ringbuf_init+0x88>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	68da      	ldr	r2, [r3, #12]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <Ringbuf_init+0x88>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f042 0220 	orr.w	r2, r2, #32
 8000baa:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <Ringbuf_init+0x8c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <Ringbuf_init+0x8c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f042 0220 	orr.w	r2, r2, #32
 8000bba:	60da      	str	r2, [r3, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000940 	.word	0x20000940
 8000bcc:	20000120 	.word	0x20000120
 8000bd0:	20000944 	.word	0x20000944
 8000bd4:	20000328 	.word	0x20000328
 8000bd8:	20000948 	.word	0x20000948
 8000bdc:	20000530 	.word	0x20000530
 8000be0:	2000094c 	.word	0x2000094c
 8000be4:	20000738 	.word	0x20000738
 8000be8:	20000b34 	.word	0x20000b34
 8000bec:	20000b78 	.word	0x20000b78

08000bf0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6039      	str	r1, [r7, #0]
 8000bfa:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c02:	3301      	adds	r3, #1
 8000c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c08:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d009      	beq.n	8000c2a <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	79f9      	ldrb	r1, [r7, #7]
 8000c20:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff fadf 	bl	8000204 <strlen>
 8000c46:	4603      	mov	r3, r0
 8000c48:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 8000c4a:	6838      	ldr	r0, [r7, #0]
 8000c4c:	f7ff fada 	bl	8000204 <strlen>
 8000c50:	4603      	mov	r3, r0
 8000c52:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8000c5c:	e002      	b.n	8000c64 <Look_for+0x2e>
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	3301      	adds	r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	781a      	ldrb	r2, [r3, #0]
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	6839      	ldr	r1, [r7, #0]
 8000c70:	440b      	add	r3, r1
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d1f2      	bne.n	8000c5e <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	6839      	ldr	r1, [r7, #0]
 8000c84:	440b      	add	r3, r1
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d111      	bne.n	8000cb0 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8000c8c:	e005      	b.n	8000c9a <Look_for+0x64>
	{
		so_far++;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
		indx++;
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	3301      	adds	r3, #1
 8000c98:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781a      	ldrb	r2, [r3, #0]
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	6839      	ldr	r1, [r7, #0]
 8000ca6:	440b      	add	r3, r1
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d0ef      	beq.n	8000c8e <Look_for+0x58>
 8000cae:	e008      	b.n	8000cc2 <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbcf      	blt.n	8000c5c <Look_for+0x26>
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	e007      	b.n	8000cd2 <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d101      	bne.n	8000cce <Look_for+0x98>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e001      	b.n	8000cd2 <Look_for+0x9c>
	else return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <Uart_flush>:
	}
}


void Uart_flush (UART_HandleTypeDef *uart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <Uart_flush+0x54>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d10c      	bne.n	8000d06 <Uart_flush+0x2a>
	{
		memset(_rx_buffer1->buffer,'\0', UART_BUFFER_SIZE);
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <Uart_flush+0x58>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00c f9a6 	bl	800d048 <memset>
		_rx_buffer1->head = 0;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <Uart_flush+0x58>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2200      	movs	r2, #0
 8000d02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	if (uart == pc_uart)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <Uart_flush+0x5c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d10c      	bne.n	8000d28 <Uart_flush+0x4c>
	{
		memset(_rx_buffer2->buffer,'\0', UART_BUFFER_SIZE);
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <Uart_flush+0x60>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f00c f995 	bl	800d048 <memset>
		_rx_buffer2->head = 0;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <Uart_flush+0x60>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000b34 	.word	0x20000b34
 8000d34:	20000940 	.word	0x20000940
 8000d38:	20000b78 	.word	0x20000b78
 8000d3c:	20000948 	.word	0x20000948

08000d40 <Uart_peek>:


int Uart_peek(UART_HandleTypeDef *uart)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a1c      	ldr	r2, [pc, #112]	; (8000dbc <Uart_peek+0x7c>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d114      	bne.n	8000d7a <Uart_peek+0x3a>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <Uart_peek+0x80>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <Uart_peek+0x80>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d102      	bne.n	8000d6a <Uart_peek+0x2a>
		  {
		    return -1;
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
 8000d68:	e022      	b.n	8000db0 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <Uart_peek+0x80>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <Uart_peek+0x80>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d76:	5cd3      	ldrb	r3, [r2, r3]
 8000d78:	e01a      	b.n	8000db0 <Uart_peek+0x70>
		  }
	}

	else if (uart == pc_uart)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a11      	ldr	r2, [pc, #68]	; (8000dc4 <Uart_peek+0x84>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d114      	bne.n	8000dac <Uart_peek+0x6c>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <Uart_peek+0x88>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <Uart_peek+0x88>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d102      	bne.n	8000d9c <Uart_peek+0x5c>
		  {
		    return -1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	e009      	b.n	8000db0 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <Uart_peek+0x88>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <Uart_peek+0x88>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000da8:	5cd3      	ldrb	r3, [r2, r3]
 8000daa:	e001      	b.n	8000db0 <Uart_peek+0x70>
		  }
	}

	return -1;
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	20000b34 	.word	0x20000b34
 8000dc0:	20000940 	.word	0x20000940
 8000dc4:	20000b78 	.word	0x20000b78
 8000dc8:	20000948 	.word	0x20000948

08000dcc <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a29      	ldr	r2, [pc, #164]	; (8000e7c <Uart_read+0xb0>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d121      	bne.n	8000e20 <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000ddc:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <Uart_read+0xb4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <Uart_read+0xb4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d102      	bne.n	8000df6 <Uart_read+0x2a>
		  {
		    return -1;
 8000df0:	f04f 33ff 	mov.w	r3, #4294967295
 8000df4:	e03c      	b.n	8000e70 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <Uart_read+0xb4>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <Uart_read+0xb4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e02:	5cd3      	ldrb	r3, [r2, r3]
 8000e04:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <Uart_read+0xb4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <Uart_read+0xb4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000e1c:	7bbb      	ldrb	r3, [r7, #14]
 8000e1e:	e027      	b.n	8000e70 <Uart_read+0xa4>
		  }
	}

	else if (uart == pc_uart)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <Uart_read+0xb8>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d121      	bne.n	8000e6c <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <Uart_read+0xbc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <Uart_read+0xbc>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d102      	bne.n	8000e42 <Uart_read+0x76>
		  {
		    return -1;
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	e016      	b.n	8000e70 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <Uart_read+0xbc>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <Uart_read+0xbc>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e4e:	5cd3      	ldrb	r3, [r2, r3]
 8000e50:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <Uart_read+0xbc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <Uart_read+0xbc>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	e001      	b.n	8000e70 <Uart_read+0xa4>
		  }
	}

	else return -1;
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	20000b34 	.word	0x20000b34
 8000e80:	20000940 	.word	0x20000940
 8000e84:	20000b78 	.word	0x20000b78
 8000e88:	20000948 	.word	0x20000948

08000e8c <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db54      	blt.n	8000f46 <Uart_write+0xba>
	{
		if (uart == device_uart){
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	4a2d      	ldr	r2, [pc, #180]	; (8000f54 <Uart_write+0xc8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d126      	bne.n	8000ef2 <Uart_write+0x66>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <Uart_write+0xcc>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000eac:	3301      	adds	r3, #1
 8000eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000eb2:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8000eb4:	bf00      	nop
 8000eb6:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <Uart_write+0xcc>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d0f8      	beq.n	8000eb6 <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <Uart_write+0xcc>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <Uart_write+0xcc>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	b2c9      	uxtb	r1, r1
 8000ed4:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <Uart_write+0xcc>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <Uart_write+0xc8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <Uart_write+0xc8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eee:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8000ef0:	e029      	b.n	8000f46 <Uart_write+0xba>
		else if (uart == pc_uart){
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <Uart_write+0xd0>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d125      	bne.n	8000f46 <Uart_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <Uart_write+0xd4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f02:	3301      	adds	r3, #1
 8000f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f08:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8000f0a:	bf00      	nop
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <Uart_write+0xd4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d0f8      	beq.n	8000f0c <Uart_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <Uart_write+0xd4>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <Uart_write+0xd4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	b2c9      	uxtb	r1, r1
 8000f2a:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <Uart_write+0xd4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <Uart_write+0xd0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <Uart_write+0xd0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f44:	60da      	str	r2, [r3, #12]
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000b34 	.word	0x20000b34
 8000f58:	20000944 	.word	0x20000944
 8000f5c:	20000b78 	.word	0x20000b78
 8000f60:	2000094c 	.word	0x2000094c

08000f64 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <IsDataAvailable+0x70>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d111      	bne.n	8000f98 <IsDataAvailable+0x34>
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <IsDataAvailable+0x74>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <IsDataAvailable+0x74>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f96:	e017      	b.n	8000fc8 <IsDataAvailable+0x64>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <IsDataAvailable+0x78>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d111      	bne.n	8000fc4 <IsDataAvailable+0x60>
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <IsDataAvailable+0x7c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <IsDataAvailable+0x7c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fc2:	e001      	b.n	8000fc8 <IsDataAvailable+0x64>
	return -1;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	20000b34 	.word	0x20000b34
 8000fd8:	20000940 	.word	0x20000940
 8000fdc:	20000b78 	.word	0x20000b78
 8000fe0:	20000948 	.word	0x20000948

08000fe4 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 8000ff4:	bf00      	nop
 8000ff6:	6839      	ldr	r1, [r7, #0]
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f000 f8b7 	bl	800116c <Wait_for>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b01      	cmp	r3, #1
 8001002:	d1f8      	bne.n	8000ff6 <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	e012      	b.n	8001030 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 800100a:	bf00      	nop
 800100c:	6838      	ldr	r0, [r7, #0]
 800100e:	f7ff ffa9 	bl	8000f64 <IsDataAvailable>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f9      	beq.n	800100c <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 8001018:	6838      	ldr	r0, [r7, #0]
 800101a:	f7ff fed7 	bl	8000dcc <Uart_read>
 800101e:	4601      	mov	r1, r0
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	b2ca      	uxtb	r2, r1
 8001028:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	7afb      	ldrb	r3, [r7, #11]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbe8      	blt.n	800100a <Get_after+0x26>
	}
	return 1;
 8001038:	2301      	movs	r3, #1
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 800104c:	e007      	b.n	800105e <Uart_sendstring+0x1c>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	1c5a      	adds	r2, r3, #1
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	6839      	ldr	r1, [r7, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff17 	bl	8000e8c <Uart_write>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f3      	bne.n	800104e <Uart_sendstring+0xc>
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
	int so_far =0;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f7ff f8bf 	bl	8000204 <strlen>
 8001086:	4603      	mov	r3, r0
 8001088:	617b      	str	r3, [r7, #20]
	int indx = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 800108e:	bf00      	nop
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff67 	bl	8000f64 <IsDataAvailable>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f9      	beq.n	8001090 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 800109c:	e01f      	b.n	80010de <Copy_upto+0x6e>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 800109e:	4b32      	ldr	r3, [pc, #200]	; (8001168 <Copy_upto+0xf8>)
 80010a0:	6819      	ldr	r1, [r3, #0]
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <Copy_upto+0xf8>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	68b8      	ldr	r0, [r7, #8]
 80010ae:	4403      	add	r3, r0
 80010b0:	5c8a      	ldrb	r2, [r1, r2]
 80010b2:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <Copy_upto+0xf8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <Copy_upto+0xf8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	3301      	adds	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 80010d0:	bf00      	nop
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff46 	bl	8000f64 <IsDataAvailable>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f9      	beq.n	80010d2 <Copy_upto+0x62>
	while (Uart_peek(uart) != string[so_far])
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fe2e 	bl	8000d40 <Uart_peek>
 80010e4:	4601      	mov	r1, r0
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	4299      	cmp	r1, r3
 80010f0:	d1d5      	bne.n	800109e <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 80010f2:	e01b      	b.n	800112c <Copy_upto+0xbc>
	{
		so_far++;
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	3301      	adds	r3, #1
 80010f8:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fe66 	bl	8000dcc <Uart_read>
 8001100:	4601      	mov	r1, r0
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	61ba      	str	r2, [r7, #24]
 8001108:	461a      	mov	r2, r3
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	b2ca      	uxtb	r2, r1
 8001110:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	429a      	cmp	r2, r3
 8001118:	d101      	bne.n	800111e <Copy_upto+0xae>
 800111a:	2301      	movs	r3, #1
 800111c:	e01f      	b.n	800115e <Copy_upto+0xee>
		while (!IsDataAvailable(uart));
 800111e:	bf00      	nop
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff1f 	bl	8000f64 <IsDataAvailable>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f9      	beq.n	8001120 <Copy_upto+0xb0>
	while (Uart_peek(uart) == string [so_far])
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff fe07 	bl	8000d40 <Uart_peek>
 8001132:	4601      	mov	r1, r0
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4299      	cmp	r1, r3
 800113e:	d0d9      	beq.n	80010f4 <Copy_upto+0x84>
	}

	if (so_far != len)
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	429a      	cmp	r2, r3
 8001146:	d002      	beq.n	800114e <Copy_upto+0xde>
	{
		so_far = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
		goto again;
 800114c:	e79f      	b.n	800108e <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	429a      	cmp	r2, r3
 8001154:	d101      	bne.n	800115a <Copy_upto+0xea>
 8001156:	2301      	movs	r3, #1
 8001158:	e001      	b.n	800115e <Copy_upto+0xee>
	else return -1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295

}
 800115e:	4618      	mov	r0, r3
 8001160:	3720      	adds	r7, #32
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000940 	.word	0x20000940

0800116c <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff f842 	bl	8000204 <strlen>
 8001180:	4603      	mov	r3, r0
 8001182:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 8001184:	bf00      	nop
 8001186:	6838      	ldr	r0, [r7, #0]
 8001188:	f7ff feec 	bl	8000f64 <IsDataAvailable>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f9      	beq.n	8001186 <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 8001192:	6838      	ldr	r0, [r7, #0]
 8001194:	f7ff fdd4 	bl	8000d40 <Uart_peek>
 8001198:	4601      	mov	r1, r0
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4299      	cmp	r1, r3
 80011a4:	d01e      	beq.n	80011e4 <Wait_for+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <Wait_for+0xb4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <Wait_for+0xb4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 80011bc:	e7e2      	b.n	8001184 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3301      	adds	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f7ff fe01 	bl	8000dcc <Uart_read>
		if (so_far == len) return 1;
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d101      	bne.n	80011d6 <Wait_for+0x6a>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e01f      	b.n	8001216 <Wait_for+0xaa>
		while (!IsDataAvailable(uart));
 80011d6:	bf00      	nop
 80011d8:	6838      	ldr	r0, [r7, #0]
 80011da:	f7ff fec3 	bl	8000f64 <IsDataAvailable>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f9      	beq.n	80011d8 <Wait_for+0x6c>
	while (Uart_peek(uart) == string [so_far])
 80011e4:	6838      	ldr	r0, [r7, #0]
 80011e6:	f7ff fdab 	bl	8000d40 <Uart_peek>
 80011ea:	4601      	mov	r1, r0
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4299      	cmp	r1, r3
 80011f6:	d0e2      	beq.n	80011be <Wait_for+0x52>
	}

	if (so_far != len)
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d002      	beq.n	8001206 <Wait_for+0x9a>
	{
		so_far = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8001204:	e7be      	b.n	8001184 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	429a      	cmp	r2, r3
 800120c:	d101      	bne.n	8001212 <Wait_for+0xa6>
 800120e:	2301      	movs	r3, #1
 8001210:	e001      	b.n	8001216 <Wait_for+0xaa>
	else return -1;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000940 	.word	0x20000940

08001224 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f003 0320 	and.w	r3, r3, #32
 8001242:	2b00      	cmp	r3, #0
 8001244:	d023      	beq.n	800128e <Uart_isr+0x6a>
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	f003 0320 	and.w	r3, r3, #32
 800124c:	2b00      	cmp	r3, #0
 800124e:	d01e      	beq.n	800128e <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a3f      	ldr	r2, [pc, #252]	; (8001360 <Uart_isr+0x13c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d107      	bne.n	8001276 <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8001266:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <Uart_isr+0x140>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fcbe 	bl	8000bf0 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8001274:	e06d      	b.n	8001352 <Uart_isr+0x12e>
        else if (huart == pc_uart)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a3b      	ldr	r2, [pc, #236]	; (8001368 <Uart_isr+0x144>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d169      	bne.n	8001352 <Uart_isr+0x12e>
           	store_char (c, _rx_buffer2);  // store data in buffer
 800127e:	4b3b      	ldr	r3, [pc, #236]	; (800136c <Uart_isr+0x148>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fcb2 	bl	8000bf0 <store_char>
        return;
 800128c:	e061      	b.n	8001352 <Uart_isr+0x12e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001294:	2b00      	cmp	r3, #0
 8001296:	d05f      	beq.n	8001358 <Uart_isr+0x134>
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d05a      	beq.n	8001358 <Uart_isr+0x134>
    {
    	if (huart == device_uart){
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a2e      	ldr	r2, [pc, #184]	; (8001360 <Uart_isr+0x13c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d127      	bne.n	80012fa <Uart_isr+0xd6>
    	if(tx_buffer1.head == tx_buffer1.tail)
 80012aa:	4b31      	ldr	r3, [pc, #196]	; (8001370 <Uart_isr+0x14c>)
 80012ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <Uart_isr+0x14c>)
 80012b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d108      	bne.n	80012cc <Uart_isr+0xa8>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c8:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 80012ca:	e044      	b.n	8001356 <Uart_isr+0x132>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <Uart_isr+0x14c>)
 80012ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80012d2:	4a27      	ldr	r2, [pc, #156]	; (8001370 <Uart_isr+0x14c>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 80012d8:	4b25      	ldr	r3, [pc, #148]	; (8001370 <Uart_isr+0x14c>)
 80012da:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80012de:	3301      	adds	r3, #1
 80012e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012e4:	4a22      	ldr	r2, [pc, #136]	; (8001370 <Uart_isr+0x14c>)
 80012e6:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	7b7a      	ldrb	r2, [r7, #13]
 80012f6:	605a      	str	r2, [r3, #4]
    	return;
 80012f8:	e02d      	b.n	8001356 <Uart_isr+0x132>
    	else if (huart == pc_uart){
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a1a      	ldr	r2, [pc, #104]	; (8001368 <Uart_isr+0x144>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d129      	bne.n	8001356 <Uart_isr+0x132>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <Uart_isr+0x150>)
 8001304:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <Uart_isr+0x150>)
 800130a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800130e:	429a      	cmp	r2, r3
 8001310:	d108      	bne.n	8001324 <Uart_isr+0x100>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001320:	60da      	str	r2, [r3, #12]
    	return;
 8001322:	e018      	b.n	8001356 <Uart_isr+0x132>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <Uart_isr+0x150>)
 8001326:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <Uart_isr+0x150>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <Uart_isr+0x150>)
 8001332:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001336:	3301      	adds	r3, #1
 8001338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <Uart_isr+0x150>)
 800133e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	7bba      	ldrb	r2, [r7, #14]
 800134e:	605a      	str	r2, [r3, #4]
    	return;
 8001350:	e001      	b.n	8001356 <Uart_isr+0x132>
        return;
 8001352:	bf00      	nop
 8001354:	e000      	b.n	8001358 <Uart_isr+0x134>
    	return;
 8001356:	bf00      	nop
    }
}
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000b34 	.word	0x20000b34
 8001364:	20000940 	.word	0x20000940
 8001368:	20000b78 	.word	0x20000b78
 800136c:	20000948 	.word	0x20000948
 8001370:	20000328 	.word	0x20000328
 8001374:	20000738 	.word	0x20000738

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137c:	f002 fae6 	bl	800394c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001380:	f000 f86e 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001384:	f000 fb06 	bl	8001994 <MX_GPIO_Init>
  MX_CRC_Init();
 8001388:	f000 f8d4 	bl	8001534 <MX_CRC_Init>
  MX_DMA2D_Init();
 800138c:	f000 f8e6 	bl	800155c <MX_DMA2D_Init>
  MX_FMC_Init();
 8001390:	f000 fab0 	bl	80018f4 <MX_FMC_Init>
  MX_I2C3_Init();
 8001394:	f000 f914 	bl	80015c0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001398:	f000 f952 	bl	8001640 <MX_LTDC_Init>
  MX_SPI5_Init();
 800139c:	f000 f9d0 	bl	8001740 <MX_SPI5_Init>
  MX_TIM1_Init();
 80013a0:	f000 fa04 	bl	80017ac <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80013a4:	f000 fa7c 	bl	80018a0 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80013a8:	f00b fae8 	bl	800c97c <MX_USB_HOST_Init>
  MX_UART5_Init();
 80013ac:	f000 fa4e 	bl	800184c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 80013b0:	f7ff fbd6 	bl	8000b60 <Ringbuf_init>
  /* USER CODE BEGIN 2 */



  BSP_LCD_Init();
 80013b4:	f001 fca6 	bl	8002d04 <BSP_LCD_Init>
   /* Initialize the LCD Layers */
    BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 80013b8:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80013bc:	2001      	movs	r0, #1
 80013be:	f001 fd23 	bl	8002e08 <BSP_LCD_LayerDefaultInit>


    /* Set LCD Foreground Layer  */
    BSP_LCD_SelectLayer(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f001 fd84 	bl	8002ed0 <BSP_LCD_SelectLayer>

    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80013c8:	481f      	ldr	r0, [pc, #124]	; (8001448 <main+0xd0>)
 80013ca:	f001 fdc3 	bl	8002f54 <BSP_LCD_SetFont>

    /* Clear the LCD */
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80013ce:	f04f 30ff 	mov.w	r0, #4294967295
 80013d2:	f001 fda5 	bl	8002f20 <BSP_LCD_SetBackColor>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80013d6:	f04f 30ff 	mov.w	r0, #4294967295
 80013da:	f001 fdd5 	bl	8002f88 <BSP_LCD_Clear>

    /* Set the LCD Text Color */
    BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80013de:	481b      	ldr	r0, [pc, #108]	; (800144c <main+0xd4>)
 80013e0:	f001 fd86 	bl	8002ef0 <BSP_LCD_SetTextColor>

    /* Display LCD messages */
    BSP_LCD_SetFont(&Font16);
 80013e4:	481a      	ldr	r0, [pc, #104]	; (8001450 <main+0xd8>)
 80013e6:	f001 fdb5 	bl	8002f54 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"KochAm Dagne", CENTER_MODE);
 80013ea:	2301      	movs	r3, #1
 80013ec:	4a19      	ldr	r2, [pc, #100]	; (8001454 <main+0xdc>)
 80013ee:	210a      	movs	r1, #10
 80013f0:	2000      	movs	r0, #0
 80013f2:	f001 fe35 	bl	8003060 <BSP_LCD_DisplayStringAt>

   /* USER CODE END 2 */


  ESP_Init(0,0);
 80013f6:	2100      	movs	r1, #0
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff f8e3 	bl	80005c4 <ESP_Init>
//	{
//		int data = Uart_read(wifi_uart);
//		Uart_write(data, pc_uart);
//	}

	  Server_Start();
 80013fe:	f7ff fadd 	bl	80009bc <Server_Start>

	  if(memcmp(buforek,buforek2,sizeof(buforek))) //jesli sa rozne
 8001402:	2240      	movs	r2, #64	; 0x40
 8001404:	4914      	ldr	r1, [pc, #80]	; (8001458 <main+0xe0>)
 8001406:	4815      	ldr	r0, [pc, #84]	; (800145c <main+0xe4>)
 8001408:	f00b fe00 	bl	800d00c <memcmp>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d016      	beq.n	8001440 <main+0xc8>
	  {
		    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001412:	f04f 30ff 	mov.w	r0, #4294967295
 8001416:	f001 fdb7 	bl	8002f88 <BSP_LCD_Clear>
		    BSP_LCD_SetFont(&Font16);
 800141a:	480d      	ldr	r0, [pc, #52]	; (8001450 <main+0xd8>)
 800141c:	f001 fd9a 	bl	8002f54 <BSP_LCD_SetFont>
		    BSP_LCD_DisplayStringAt(0, 10, buforek, CENTER_MODE);
 8001420:	2301      	movs	r3, #1
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <main+0xe4>)
 8001424:	210a      	movs	r1, #10
 8001426:	2000      	movs	r0, #0
 8001428:	f001 fe1a 	bl	8003060 <BSP_LCD_DisplayStringAt>

		    	//clear buffer
			  memset(buforek,0,sizeof(buforek));
 800142c:	2240      	movs	r2, #64	; 0x40
 800142e:	2100      	movs	r1, #0
 8001430:	480a      	ldr	r0, [pc, #40]	; (800145c <main+0xe4>)
 8001432:	f00b fe09 	bl	800d048 <memset>
			  memset(buforek2,0,sizeof(buforek2));
 8001436:	2240      	movs	r2, #64	; 0x40
 8001438:	2100      	movs	r1, #0
 800143a:	4807      	ldr	r0, [pc, #28]	; (8001458 <main+0xe0>)
 800143c:	f00b fe04 	bl	800d048 <memset>




    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001440:	f00b fac2 	bl	800c9c8 <MX_USB_HOST_Process>
	  Server_Start();
 8001444:	e7db      	b.n	80013fe <main+0x86>
 8001446:	bf00      	nop
 8001448:	20000050 	.word	0x20000050
 800144c:	ff000080 	.word	0xff000080
 8001450:	20000058 	.word	0x20000058
 8001454:	0800df5c 	.word	0x0800df5c
 8001458:	20000c30 	.word	0x20000c30
 800145c:	20000bf0 	.word	0x20000bf0

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	; 0x50
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	2230      	movs	r2, #48	; 0x30
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f00b fdea 	bl	800d048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	4b28      	ldr	r3, [pc, #160]	; (800152c <SystemClock_Config+0xcc>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a27      	ldr	r2, [pc, #156]	; (800152c <SystemClock_Config+0xcc>)
 800148e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <SystemClock_Config+0xcc>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <SystemClock_Config+0xd0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a21      	ldr	r2, [pc, #132]	; (8001530 <SystemClock_Config+0xd0>)
 80014aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <SystemClock_Config+0xd0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014bc:	2301      	movs	r3, #1
 80014be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c6:	2302      	movs	r3, #2
 80014c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014d0:	2308      	movs	r3, #8
 80014d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014da:	2302      	movs	r3, #2
 80014dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014de:	2307      	movs	r3, #7
 80014e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	4618      	mov	r0, r3
 80014e8:	f005 fd1c 	bl	8006f24 <HAL_RCC_OscConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014f2:	f000 fb71 	bl	8001bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f6:	230f      	movs	r3, #15
 80014f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fa:	2302      	movs	r3, #2
 80014fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001502:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001506:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2105      	movs	r1, #5
 8001514:	4618      	mov	r0, r3
 8001516:	f005 ff7d 	bl	8007414 <HAL_RCC_ClockConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001520:	f000 fb5a 	bl	8001bd8 <Error_Handler>
  }
}
 8001524:	bf00      	nop
 8001526:	3750      	adds	r7, #80	; 0x50
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	40007000 	.word	0x40007000

08001534 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_CRC_Init+0x20>)
 800153a:	4a07      	ldr	r2, [pc, #28]	; (8001558 <MX_CRC_Init+0x24>)
 800153c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_CRC_Init+0x20>)
 8001540:	f002 fb4c 	bl	8003bdc <HAL_CRC_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800154a:	f000 fb45 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000950 	.word	0x20000950
 8001558:	40023000 	.word	0x40023000

0800155c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <MX_DMA2D_Init+0x5c>)
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <MX_DMA2D_Init+0x60>)
 8001564:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_DMA2D_Init+0x5c>)
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_DMA2D_Init+0x5c>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_DMA2D_Init+0x5c>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_DMA2D_Init+0x5c>)
 800157a:	2200      	movs	r2, #0
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_DMA2D_Init+0x5c>)
 8001580:	2200      	movs	r2, #0
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_DMA2D_Init+0x5c>)
 8001586:	2200      	movs	r2, #0
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_DMA2D_Init+0x5c>)
 800158c:	2200      	movs	r2, #0
 800158e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001590:	4809      	ldr	r0, [pc, #36]	; (80015b8 <MX_DMA2D_Init+0x5c>)
 8001592:	f002 fcfd 	bl	8003f90 <HAL_DMA2D_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800159c:	f000 fb1c 	bl	8001bd8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80015a0:	2101      	movs	r1, #1
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_DMA2D_Init+0x5c>)
 80015a4:	f002 ff62 	bl	800446c <HAL_DMA2D_ConfigLayer>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80015ae:	f000 fb13 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000958 	.word	0x20000958
 80015bc:	4002b000 	.word	0x4002b000

080015c0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <MX_I2C3_Init+0x74>)
 80015c6:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <MX_I2C3_Init+0x78>)
 80015c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_I2C3_Init+0x74>)
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <MX_I2C3_Init+0x7c>)
 80015ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_I2C3_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_I2C3_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_I2C3_Init+0x74>)
 80015de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015e2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e4:	4b13      	ldr	r3, [pc, #76]	; (8001634 <MX_I2C3_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_I2C3_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MX_I2C3_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_I2C3_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015fc:	480d      	ldr	r0, [pc, #52]	; (8001634 <MX_I2C3_Init+0x74>)
 80015fe:	f004 ff3f 	bl	8006480 <HAL_I2C_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001608:	f000 fae6 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800160c:	2100      	movs	r1, #0
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <MX_I2C3_Init+0x74>)
 8001610:	f005 f87a 	bl	8006708 <HAL_I2CEx_ConfigAnalogFilter>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800161a:	f000 fadd 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800161e:	2100      	movs	r1, #0
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_I2C3_Init+0x74>)
 8001622:	f005 f8ad 	bl	8006780 <HAL_I2CEx_ConfigDigitalFilter>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800162c:	f000 fad4 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000998 	.word	0x20000998
 8001638:	40005c00 	.word	0x40005c00
 800163c:	000186a0 	.word	0x000186a0

08001640 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08e      	sub	sp, #56	; 0x38
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2234      	movs	r2, #52	; 0x34
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f00b fcfb 	bl	800d048 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001652:	4b39      	ldr	r3, [pc, #228]	; (8001738 <MX_LTDC_Init+0xf8>)
 8001654:	4a39      	ldr	r2, [pc, #228]	; (800173c <MX_LTDC_Init+0xfc>)
 8001656:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001658:	4b37      	ldr	r3, [pc, #220]	; (8001738 <MX_LTDC_Init+0xf8>)
 800165a:	2200      	movs	r2, #0
 800165c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800165e:	4b36      	ldr	r3, [pc, #216]	; (8001738 <MX_LTDC_Init+0xf8>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001664:	4b34      	ldr	r3, [pc, #208]	; (8001738 <MX_LTDC_Init+0xf8>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800166a:	4b33      	ldr	r3, [pc, #204]	; (8001738 <MX_LTDC_Init+0xf8>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001670:	4b31      	ldr	r3, [pc, #196]	; (8001738 <MX_LTDC_Init+0xf8>)
 8001672:	2209      	movs	r2, #9
 8001674:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001676:	4b30      	ldr	r3, [pc, #192]	; (8001738 <MX_LTDC_Init+0xf8>)
 8001678:	2201      	movs	r2, #1
 800167a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800167c:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <MX_LTDC_Init+0xf8>)
 800167e:	221d      	movs	r2, #29
 8001680:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001682:	4b2d      	ldr	r3, [pc, #180]	; (8001738 <MX_LTDC_Init+0xf8>)
 8001684:	2203      	movs	r2, #3
 8001686:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001688:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <MX_LTDC_Init+0xf8>)
 800168a:	f240 120d 	movw	r2, #269	; 0x10d
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <MX_LTDC_Init+0xf8>)
 8001692:	f240 1243 	movw	r2, #323	; 0x143
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <MX_LTDC_Init+0xf8>)
 800169a:	f240 1217 	movw	r2, #279	; 0x117
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <MX_LTDC_Init+0xf8>)
 80016a2:	f240 1247 	movw	r2, #327	; 0x147
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <MX_LTDC_Init+0xf8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <MX_LTDC_Init+0xf8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <MX_LTDC_Init+0xf8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80016c0:	481d      	ldr	r0, [pc, #116]	; (8001738 <MX_LTDC_Init+0xf8>)
 80016c2:	f005 f89d 	bl	8006800 <HAL_LTDC_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80016cc:	f000 fa84 	bl	8001bd8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80016d4:	23f0      	movs	r3, #240	; 0xf0
 80016d6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80016dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016e0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80016e2:	2302      	movs	r3, #2
 80016e4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80016e6:	23ff      	movs	r3, #255	; 0xff
 80016e8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80016ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016f2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80016f4:	2307      	movs	r3, #7
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80016f8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80016fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80016fe:	23f0      	movs	r3, #240	; 0xf0
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001702:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_LTDC_Init+0xf8>)
 8001722:	f005 f9ff 	bl	8006b24 <HAL_LTDC_ConfigLayer>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800172c:	f000 fa54 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	3738      	adds	r7, #56	; 0x38
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200009ec 	.word	0x200009ec
 800173c:	40016800 	.word	0x40016800

08001740 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <MX_SPI5_Init+0x64>)
 8001746:	4a18      	ldr	r2, [pc, #96]	; (80017a8 <MX_SPI5_Init+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <MX_SPI5_Init+0x64>)
 800174c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001750:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_SPI5_Init+0x64>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_SPI5_Init+0x64>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_SPI5_Init+0x64>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_SPI5_Init+0x64>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_SPI5_Init+0x64>)
 800176c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001770:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_SPI5_Init+0x64>)
 8001774:	2218      	movs	r2, #24
 8001776:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <MX_SPI5_Init+0x64>)
 800177a:	2200      	movs	r2, #0
 800177c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_SPI5_Init+0x64>)
 8001780:	2200      	movs	r2, #0
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <MX_SPI5_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_SPI5_Init+0x64>)
 800178c:	220a      	movs	r2, #10
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001790:	4804      	ldr	r0, [pc, #16]	; (80017a4 <MX_SPI5_Init+0x64>)
 8001792:	f006 fae2 	bl	8007d5a <HAL_SPI_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800179c:	f000 fa1c 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000a94 	.word	0x20000a94
 80017a8:	40015000 	.word	0x40015000

080017ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017c8:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <MX_TIM1_Init+0x98>)
 80017ca:	4a1f      	ldr	r2, [pc, #124]	; (8001848 <MX_TIM1_Init+0x9c>)
 80017cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017ce:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <MX_TIM1_Init+0x98>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <MX_TIM1_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_TIM1_Init+0x98>)
 80017dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_TIM1_Init+0x98>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017e8:	4b16      	ldr	r3, [pc, #88]	; (8001844 <MX_TIM1_Init+0x98>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <MX_TIM1_Init+0x98>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017f4:	4813      	ldr	r0, [pc, #76]	; (8001844 <MX_TIM1_Init+0x98>)
 80017f6:	f007 f88f 	bl	8008918 <HAL_TIM_Base_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001800:	f000 f9ea 	bl	8001bd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	4619      	mov	r1, r3
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <MX_TIM1_Init+0x98>)
 8001812:	f007 fa49 	bl	8008ca8 <HAL_TIM_ConfigClockSource>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800181c:	f000 f9dc 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001828:	463b      	mov	r3, r7
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_TIM1_Init+0x98>)
 800182e:	f007 fc65 	bl	80090fc <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001838:	f000 f9ce 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000aec 	.word	0x20000aec
 8001848:	40010000 	.word	0x40010000

0800184c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_UART5_Init+0x4c>)
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <MX_UART5_Init+0x50>)
 8001854:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <MX_UART5_Init+0x4c>)
 8001858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800185c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_UART5_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_UART5_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <MX_UART5_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_UART5_Init+0x4c>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <MX_UART5_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_UART5_Init+0x4c>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_UART5_Init+0x4c>)
 8001884:	f007 fcca 	bl	800921c <HAL_UART_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800188e:	f000 f9a3 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000b34 	.word	0x20000b34
 800189c:	40005000 	.word	0x40005000

080018a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_USART1_UART_Init+0x50>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_USART1_UART_Init+0x4c>)
 80018d8:	f007 fca0 	bl	800921c <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018e2:	f000 f979 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000b78 	.word	0x20000b78
 80018f0:	40011000 	.word	0x40011000

080018f4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	615a      	str	r2, [r3, #20]
 800190a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <MX_FMC_Init+0x98>)
 800190e:	4a20      	ldr	r2, [pc, #128]	; (8001990 <MX_FMC_Init+0x9c>)
 8001910:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001912:	4b1e      	ldr	r3, [pc, #120]	; (800198c <MX_FMC_Init+0x98>)
 8001914:	2201      	movs	r2, #1
 8001916:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <MX_FMC_Init+0x98>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <MX_FMC_Init+0x98>)
 8001920:	2204      	movs	r2, #4
 8001922:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <MX_FMC_Init+0x98>)
 8001926:	2210      	movs	r2, #16
 8001928:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <MX_FMC_Init+0x98>)
 800192c:	2240      	movs	r2, #64	; 0x40
 800192e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <MX_FMC_Init+0x98>)
 8001932:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001936:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_FMC_Init+0x98>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <MX_FMC_Init+0x98>)
 8001940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001944:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_FMC_Init+0x98>)
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_FMC_Init+0x98>)
 800194e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001954:	2302      	movs	r3, #2
 8001956:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001958:	2307      	movs	r3, #7
 800195a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800195c:	2304      	movs	r3, #4
 800195e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001960:	2307      	movs	r3, #7
 8001962:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001964:	2303      	movs	r3, #3
 8001966:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001968:	2302      	movs	r3, #2
 800196a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800196c:	2302      	movs	r3, #2
 800196e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_FMC_Init+0x98>)
 8001976:	f006 f95f 	bl	8007c38 <HAL_SDRAM_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001980:	f000 f92a 	bl	8001bd8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001984:	bf00      	nop
 8001986:	3720      	adds	r7, #32
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000bbc 	.word	0x20000bbc
 8001990:	a0000140 	.word	0xa0000140

08001994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08e      	sub	sp, #56	; 0x38
 8001998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
 80019ae:	4b7b      	ldr	r3, [pc, #492]	; (8001b9c <MX_GPIO_Init+0x208>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a7a      	ldr	r2, [pc, #488]	; (8001b9c <MX_GPIO_Init+0x208>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b78      	ldr	r3, [pc, #480]	; (8001b9c <MX_GPIO_Init+0x208>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	623b      	str	r3, [r7, #32]
 80019c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	4b74      	ldr	r3, [pc, #464]	; (8001b9c <MX_GPIO_Init+0x208>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a73      	ldr	r2, [pc, #460]	; (8001b9c <MX_GPIO_Init+0x208>)
 80019d0:	f043 0320 	orr.w	r3, r3, #32
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b71      	ldr	r3, [pc, #452]	; (8001b9c <MX_GPIO_Init+0x208>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	4b6d      	ldr	r3, [pc, #436]	; (8001b9c <MX_GPIO_Init+0x208>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a6c      	ldr	r2, [pc, #432]	; (8001b9c <MX_GPIO_Init+0x208>)
 80019ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b6a      	ldr	r3, [pc, #424]	; (8001b9c <MX_GPIO_Init+0x208>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fa:	61bb      	str	r3, [r7, #24]
 80019fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	4b66      	ldr	r3, [pc, #408]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a65      	ldr	r2, [pc, #404]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b63      	ldr	r3, [pc, #396]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a5e      	ldr	r2, [pc, #376]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b5c      	ldr	r3, [pc, #368]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a57      	ldr	r2, [pc, #348]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b55      	ldr	r3, [pc, #340]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b51      	ldr	r3, [pc, #324]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a50      	ldr	r2, [pc, #320]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b4e      	ldr	r3, [pc, #312]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b4a      	ldr	r3, [pc, #296]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a49      	ldr	r2, [pc, #292]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a78:	f043 0308 	orr.w	r3, r3, #8
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <MX_GPIO_Init+0x208>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2116      	movs	r1, #22
 8001a8e:	4844      	ldr	r0, [pc, #272]	; (8001ba0 <MX_GPIO_Init+0x20c>)
 8001a90:	f003 f8d2 	bl	8004c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2180      	movs	r1, #128	; 0x80
 8001a98:	4842      	ldr	r0, [pc, #264]	; (8001ba4 <MX_GPIO_Init+0x210>)
 8001a9a:	f003 f8cd 	bl	8004c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001aa4:	4840      	ldr	r0, [pc, #256]	; (8001ba8 <MX_GPIO_Init+0x214>)
 8001aa6:	f003 f8c7 	bl	8004c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001ab0:	483e      	ldr	r0, [pc, #248]	; (8001bac <MX_GPIO_Init+0x218>)
 8001ab2:	f003 f8c1 	bl	8004c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001ab6:	2316      	movs	r3, #22
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aca:	4619      	mov	r1, r3
 8001acc:	4834      	ldr	r0, [pc, #208]	; (8001ba0 <MX_GPIO_Init+0x20c>)
 8001ace:	f002 fdfb 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001ad2:	f248 0307 	movw	r3, #32775	; 0x8007
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ad8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	482e      	ldr	r0, [pc, #184]	; (8001ba4 <MX_GPIO_Init+0x210>)
 8001aea:	f002 fded 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af2:	2301      	movs	r3, #1
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b02:	4619      	mov	r1, r3
 8001b04:	4827      	ldr	r0, [pc, #156]	; (8001ba4 <MX_GPIO_Init+0x210>)
 8001b06:	f002 fddf 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b0e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4820      	ldr	r0, [pc, #128]	; (8001ba0 <MX_GPIO_Init+0x20c>)
 8001b20:	f002 fdd2 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001b24:	2304      	movs	r3, #4
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b34:	4619      	mov	r1, r3
 8001b36:	481e      	ldr	r0, [pc, #120]	; (8001bb0 <MX_GPIO_Init+0x21c>)
 8001b38:	f002 fdc6 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001b3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4815      	ldr	r0, [pc, #84]	; (8001ba8 <MX_GPIO_Init+0x214>)
 8001b52:	f002 fdb9 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001b56:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	480e      	ldr	r0, [pc, #56]	; (8001ba8 <MX_GPIO_Init+0x214>)
 8001b70:	f002 fdaa 	bl	80046c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001b74:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4807      	ldr	r0, [pc, #28]	; (8001bac <MX_GPIO_Init+0x218>)
 8001b8e:	f002 fd9b 	bl	80046c8 <HAL_GPIO_Init>

}
 8001b92:	bf00      	nop
 8001b94:	3738      	adds	r7, #56	; 0x38
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	40020c00 	.word	0x40020c00
 8001bac:	40021800 	.word	0x40021800
 8001bb0:	40020400 	.word	0x40020400

08001bb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bc6:	f001 fee3 	bl	8003990 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40001000 	.word	0x40001000

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
}
 8001bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <Error_Handler+0x8>
	...

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <HAL_MspInit+0x4c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a0f      	ldr	r2, [pc, #60]	; (8001c30 <HAL_MspInit+0x4c>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_MspInit+0x4c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_MspInit+0x4c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <HAL_MspInit+0x4c>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_MspInit+0x4c>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <HAL_CRC_MspInit+0x3c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d10d      	bne.n	8001c62 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_CRC_MspInit+0x40>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_CRC_MspInit+0x40>)
 8001c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <HAL_CRC_MspInit+0x40>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c62:	bf00      	nop
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023000 	.word	0x40023000
 8001c74:	40023800 	.word	0x40023800

08001c78 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <HAL_DMA2D_MspInit+0x48>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d115      	bne.n	8001cb6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_DMA2D_MspInit+0x4c>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <HAL_DMA2D_MspInit+0x4c>)
 8001c94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_DMA2D_MspInit+0x4c>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2105      	movs	r1, #5
 8001caa:	205a      	movs	r0, #90	; 0x5a
 8001cac:	f001 ff6c 	bl	8003b88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001cb0:	205a      	movs	r0, #90	; 0x5a
 8001cb2:	f001 ff85 	bl	8003bc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	4002b000 	.word	0x4002b000
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a29      	ldr	r2, [pc, #164]	; (8001d8c <HAL_I2C_MspInit+0xc4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d14b      	bne.n	8001d82 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_I2C_MspInit+0xc8>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <HAL_I2C_MspInit+0xc8>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <HAL_I2C_MspInit+0xc8>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <HAL_I2C_MspInit+0xc8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a20      	ldr	r2, [pc, #128]	; (8001d90 <HAL_I2C_MspInit+0xc8>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_I2C_MspInit+0xc8>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001d22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d28:	2312      	movs	r3, #18
 8001d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d34:	2304      	movs	r3, #4
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4815      	ldr	r0, [pc, #84]	; (8001d94 <HAL_I2C_MspInit+0xcc>)
 8001d40:	f002 fcc2 	bl	80046c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4a:	2312      	movs	r3, #18
 8001d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d56:	2304      	movs	r3, #4
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480d      	ldr	r0, [pc, #52]	; (8001d98 <HAL_I2C_MspInit+0xd0>)
 8001d62:	f002 fcb1 	bl	80046c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_I2C_MspInit+0xc8>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a08      	ldr	r2, [pc, #32]	; (8001d90 <HAL_I2C_MspInit+0xc8>)
 8001d70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_I2C_MspInit+0xc8>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d82:	bf00      	nop
 8001d84:	3728      	adds	r7, #40	; 0x28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40005c00 	.word	0x40005c00
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020000 	.word	0x40020000

08001d9c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b09a      	sub	sp, #104	; 0x68
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db8:	2230      	movs	r2, #48	; 0x30
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f00b f943 	bl	800d048 <memset>
  if(hltdc->Instance==LTDC)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a85      	ldr	r2, [pc, #532]	; (8001fdc <HAL_LTDC_MspInit+0x240>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	f040 8103 	bne.w	8001fd4 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001dce:	2308      	movs	r3, #8
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001dd2:	23c0      	movs	r3, #192	; 0xc0
 8001dd4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dde:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de4:	4618      	mov	r0, r3
 8001de6:	f005 fd67 	bl	80078b8 <HAL_RCCEx_PeriphCLKConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001df0:	f7ff fef2 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	623b      	str	r3, [r7, #32]
 8001df8:	4b79      	ldr	r3, [pc, #484]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfc:	4a78      	ldr	r2, [pc, #480]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001dfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e02:	6453      	str	r3, [r2, #68]	; 0x44
 8001e04:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e0c:	623b      	str	r3, [r7, #32]
 8001e0e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	4b72      	ldr	r3, [pc, #456]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	4a71      	ldr	r2, [pc, #452]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e1a:	f043 0320 	orr.w	r3, r3, #32
 8001e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e20:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	4b6b      	ldr	r3, [pc, #428]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	4a6a      	ldr	r2, [pc, #424]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3c:	4b68      	ldr	r3, [pc, #416]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	4b64      	ldr	r3, [pc, #400]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	4a63      	ldr	r2, [pc, #396]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e52:	f043 0302 	orr.w	r3, r3, #2
 8001e56:	6313      	str	r3, [r2, #48]	; 0x30
 8001e58:	4b61      	ldr	r3, [pc, #388]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	4a5c      	ldr	r2, [pc, #368]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e72:	6313      	str	r3, [r2, #48]	; 0x30
 8001e74:	4b5a      	ldr	r3, [pc, #360]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	4b56      	ldr	r3, [pc, #344]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	4a55      	ldr	r2, [pc, #340]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e90:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	4b4f      	ldr	r3, [pc, #316]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	4a4e      	ldr	r2, [pc, #312]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001ea6:	f043 0308 	orr.w	r3, r3, #8
 8001eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001eac:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <HAL_LTDC_MspInit+0x244>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ebc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eca:	230e      	movs	r3, #14
 8001ecc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4843      	ldr	r0, [pc, #268]	; (8001fe4 <HAL_LTDC_MspInit+0x248>)
 8001ed6:	f002 fbf7 	bl	80046c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001eda:	f641 0358 	movw	r3, #6232	; 0x1858
 8001ede:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eec:	230e      	movs	r3, #14
 8001eee:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	483c      	ldr	r0, [pc, #240]	; (8001fe8 <HAL_LTDC_MspInit+0x24c>)
 8001ef8:	f002 fbe6 	bl	80046c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001efc:	2303      	movs	r3, #3
 8001efe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001f0c:	2309      	movs	r3, #9
 8001f0e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f14:	4619      	mov	r1, r3
 8001f16:	4835      	ldr	r0, [pc, #212]	; (8001fec <HAL_LTDC_MspInit+0x250>)
 8001f18:	f002 fbd6 	bl	80046c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001f1c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001f20:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f2e:	230e      	movs	r3, #14
 8001f30:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f36:	4619      	mov	r1, r3
 8001f38:	482c      	ldr	r0, [pc, #176]	; (8001fec <HAL_LTDC_MspInit+0x250>)
 8001f3a:	f002 fbc5 	bl	80046c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001f3e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001f42:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f50:	230e      	movs	r3, #14
 8001f52:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4825      	ldr	r0, [pc, #148]	; (8001ff0 <HAL_LTDC_MspInit+0x254>)
 8001f5c:	f002 fbb4 	bl	80046c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001f60:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001f64:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f72:	230e      	movs	r3, #14
 8001f74:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	481d      	ldr	r0, [pc, #116]	; (8001ff4 <HAL_LTDC_MspInit+0x258>)
 8001f7e:	f002 fba3 	bl	80046c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001f82:	2348      	movs	r3, #72	; 0x48
 8001f84:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f92:	230e      	movs	r3, #14
 8001f94:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4816      	ldr	r0, [pc, #88]	; (8001ff8 <HAL_LTDC_MspInit+0x25c>)
 8001f9e:	f002 fb93 	bl	80046c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001fa2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fa6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001fb4:	2309      	movs	r3, #9
 8001fb6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <HAL_LTDC_MspInit+0x254>)
 8001fc0:	f002 fb82 	bl	80046c8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2105      	movs	r1, #5
 8001fc8:	2058      	movs	r0, #88	; 0x58
 8001fca:	f001 fddd 	bl	8003b88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001fce:	2058      	movs	r0, #88	; 0x58
 8001fd0:	f001 fdf6 	bl	8003bc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3768      	adds	r7, #104	; 0x68
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40016800 	.word	0x40016800
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40021400 	.word	0x40021400
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	40020400 	.word	0x40020400
 8001ff0:	40021800 	.word	0x40021800
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00

08001ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	; 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a19      	ldr	r2, [pc, #100]	; (8002080 <HAL_SPI_MspInit+0x84>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d12c      	bne.n	8002078 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_SPI_MspInit+0x88>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a17      	ldr	r2, [pc, #92]	; (8002084 <HAL_SPI_MspInit+0x88>)
 8002028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_SPI_MspInit+0x88>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_SPI_MspInit+0x88>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a10      	ldr	r2, [pc, #64]	; (8002084 <HAL_SPI_MspInit+0x88>)
 8002044:	f043 0320 	orr.w	r3, r3, #32
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_SPI_MspInit+0x88>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002056:	f44f 7360 	mov.w	r3, #896	; 0x380
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002068:	2305      	movs	r3, #5
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <HAL_SPI_MspInit+0x8c>)
 8002074:	f002 fb28 	bl	80046c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002078:	bf00      	nop
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40015000 	.word	0x40015000
 8002084:	40023800 	.word	0x40023800
 8002088:	40021400 	.word	0x40021400

0800208c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_SPI_MspDeInit+0x30>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d10a      	bne.n	80020b4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <HAL_SPI_MspDeInit+0x34>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <HAL_SPI_MspDeInit+0x34>)
 80020a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020a8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80020aa:	f44f 7160 	mov.w	r1, #896	; 0x380
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <HAL_SPI_MspDeInit+0x38>)
 80020b0:	f002 fcb6 	bl	8004a20 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40015000 	.word	0x40015000
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40021400 	.word	0x40021400

080020c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <HAL_TIM_Base_MspInit+0x3c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d10d      	bne.n	80020f6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_TIM_Base_MspInit+0x40>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_TIM_Base_MspInit+0x40>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_TIM_Base_MspInit+0x40>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40010000 	.word	0x40010000
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08c      	sub	sp, #48	; 0x30
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a4a      	ldr	r2, [pc, #296]	; (8002254 <HAL_UART_MspInit+0x148>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d153      	bne.n	80021d6 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	4b49      	ldr	r3, [pc, #292]	; (8002258 <HAL_UART_MspInit+0x14c>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a48      	ldr	r2, [pc, #288]	; (8002258 <HAL_UART_MspInit+0x14c>)
 8002138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b46      	ldr	r3, [pc, #280]	; (8002258 <HAL_UART_MspInit+0x14c>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	4b42      	ldr	r3, [pc, #264]	; (8002258 <HAL_UART_MspInit+0x14c>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a41      	ldr	r2, [pc, #260]	; (8002258 <HAL_UART_MspInit+0x14c>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b3f      	ldr	r3, [pc, #252]	; (8002258 <HAL_UART_MspInit+0x14c>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <HAL_UART_MspInit+0x14c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a3a      	ldr	r2, [pc, #232]	; (8002258 <HAL_UART_MspInit+0x14c>)
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b38      	ldr	r3, [pc, #224]	; (8002258 <HAL_UART_MspInit+0x14c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002194:	2308      	movs	r3, #8
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	4619      	mov	r1, r3
 800219e:	482f      	ldr	r0, [pc, #188]	; (800225c <HAL_UART_MspInit+0x150>)
 80021a0:	f002 fa92 	bl	80046c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021a4:	2304      	movs	r3, #4
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80021b4:	2308      	movs	r3, #8
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	4828      	ldr	r0, [pc, #160]	; (8002260 <HAL_UART_MspInit+0x154>)
 80021c0:	f002 fa82 	bl	80046c8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2100      	movs	r1, #0
 80021c8:	2035      	movs	r0, #53	; 0x35
 80021ca:	f001 fcdd 	bl	8003b88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80021ce:	2035      	movs	r0, #53	; 0x35
 80021d0:	f001 fcf6 	bl	8003bc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021d4:	e039      	b.n	800224a <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_UART_MspInit+0x158>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d134      	bne.n	800224a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <HAL_UART_MspInit+0x14c>)
 80021e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e8:	4a1b      	ldr	r2, [pc, #108]	; (8002258 <HAL_UART_MspInit+0x14c>)
 80021ea:	f043 0310 	orr.w	r3, r3, #16
 80021ee:	6453      	str	r3, [r2, #68]	; 0x44
 80021f0:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_UART_MspInit+0x14c>)
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	4b15      	ldr	r3, [pc, #84]	; (8002258 <HAL_UART_MspInit+0x14c>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <HAL_UART_MspInit+0x14c>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6313      	str	r3, [r2, #48]	; 0x30
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_UART_MspInit+0x14c>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002218:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800221c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002226:	2303      	movs	r3, #3
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800222a:	2307      	movs	r3, #7
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222e:	f107 031c 	add.w	r3, r7, #28
 8002232:	4619      	mov	r1, r3
 8002234:	480c      	ldr	r0, [pc, #48]	; (8002268 <HAL_UART_MspInit+0x15c>)
 8002236:	f002 fa47 	bl	80046c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	2025      	movs	r0, #37	; 0x25
 8002240:	f001 fca2 	bl	8003b88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002244:	2025      	movs	r0, #37	; 0x25
 8002246:	f001 fcbb 	bl	8003bc0 <HAL_NVIC_EnableIRQ>
}
 800224a:	bf00      	nop
 800224c:	3730      	adds	r7, #48	; 0x30
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40005000 	.word	0x40005000
 8002258:	40023800 	.word	0x40023800
 800225c:	40020800 	.word	0x40020800
 8002260:	40020c00 	.word	0x40020c00
 8002264:	40011000 	.word	0x40011000
 8002268:	40020000 	.word	0x40020000

0800226c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002280:	4b3b      	ldr	r3, [pc, #236]	; (8002370 <HAL_FMC_MspInit+0x104>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d16f      	bne.n	8002368 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002288:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_FMC_MspInit+0x104>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	4b38      	ldr	r3, [pc, #224]	; (8002374 <HAL_FMC_MspInit+0x108>)
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	4a37      	ldr	r2, [pc, #220]	; (8002374 <HAL_FMC_MspInit+0x108>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6393      	str	r3, [r2, #56]	; 0x38
 800229e:	4b35      	ldr	r3, [pc, #212]	; (8002374 <HAL_FMC_MspInit+0x108>)
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80022aa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80022ae:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022bc:	230c      	movs	r3, #12
 80022be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	482c      	ldr	r0, [pc, #176]	; (8002378 <HAL_FMC_MspInit+0x10c>)
 80022c6:	f002 f9ff 	bl	80046c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80022ca:	2301      	movs	r3, #1
 80022cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022da:	230c      	movs	r3, #12
 80022dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	4619      	mov	r1, r3
 80022e2:	4826      	ldr	r0, [pc, #152]	; (800237c <HAL_FMC_MspInit+0x110>)
 80022e4:	f002 f9f0 	bl	80046c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80022e8:	f248 1333 	movw	r3, #33075	; 0x8133
 80022ec:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f6:	2303      	movs	r3, #3
 80022f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022fa:	230c      	movs	r3, #12
 80022fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	4619      	mov	r1, r3
 8002302:	481f      	ldr	r0, [pc, #124]	; (8002380 <HAL_FMC_MspInit+0x114>)
 8002304:	f002 f9e0 	bl	80046c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002308:	f64f 7383 	movw	r3, #65411	; 0xff83
 800230c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800231a:	230c      	movs	r3, #12
 800231c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	4619      	mov	r1, r3
 8002322:	4818      	ldr	r0, [pc, #96]	; (8002384 <HAL_FMC_MspInit+0x118>)
 8002324:	f002 f9d0 	bl	80046c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002328:	f24c 7303 	movw	r3, #50947	; 0xc703
 800232c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002336:	2303      	movs	r3, #3
 8002338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800233a:	230c      	movs	r3, #12
 800233c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	4619      	mov	r1, r3
 8002342:	4811      	ldr	r0, [pc, #68]	; (8002388 <HAL_FMC_MspInit+0x11c>)
 8002344:	f002 f9c0 	bl	80046c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002348:	2360      	movs	r3, #96	; 0x60
 800234a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002358:	230c      	movs	r3, #12
 800235a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	4619      	mov	r1, r3
 8002360:	480a      	ldr	r0, [pc, #40]	; (800238c <HAL_FMC_MspInit+0x120>)
 8002362:	f002 f9b1 	bl	80046c8 <HAL_GPIO_Init>
 8002366:	e000      	b.n	800236a <HAL_FMC_MspInit+0xfe>
    return;
 8002368:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000c70 	.word	0x20000c70
 8002374:	40023800 	.word	0x40023800
 8002378:	40021400 	.word	0x40021400
 800237c:	40020800 	.word	0x40020800
 8002380:	40021800 	.word	0x40021800
 8002384:	40021000 	.word	0x40021000
 8002388:	40020c00 	.word	0x40020c00
 800238c:	40020400 	.word	0x40020400

08002390 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002398:	f7ff ff68 	bl	800226c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08e      	sub	sp, #56	; 0x38
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	4b33      	ldr	r3, [pc, #204]	; (8002488 <HAL_InitTick+0xe4>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	4a32      	ldr	r2, [pc, #200]	; (8002488 <HAL_InitTick+0xe4>)
 80023be:	f043 0310 	orr.w	r3, r3, #16
 80023c2:	6413      	str	r3, [r2, #64]	; 0x40
 80023c4:	4b30      	ldr	r3, [pc, #192]	; (8002488 <HAL_InitTick+0xe4>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023d0:	f107 0210 	add.w	r2, r7, #16
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f005 fa3a 	bl	8007854 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d103      	bne.n	80023f2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023ea:	f005 fa0b 	bl	8007804 <HAL_RCC_GetPCLK1Freq>
 80023ee:	6378      	str	r0, [r7, #52]	; 0x34
 80023f0:	e004      	b.n	80023fc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023f2:	f005 fa07 	bl	8007804 <HAL_RCC_GetPCLK1Freq>
 80023f6:	4603      	mov	r3, r0
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fe:	4a23      	ldr	r2, [pc, #140]	; (800248c <HAL_InitTick+0xe8>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	0c9b      	lsrs	r3, r3, #18
 8002406:	3b01      	subs	r3, #1
 8002408:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <HAL_InitTick+0xec>)
 800240c:	4a21      	ldr	r2, [pc, #132]	; (8002494 <HAL_InitTick+0xf0>)
 800240e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <HAL_InitTick+0xec>)
 8002412:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002416:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <HAL_InitTick+0xec>)
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800241e:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <HAL_InitTick+0xec>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002424:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_InitTick+0xec>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800242a:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_InitTick+0xec>)
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002430:	4817      	ldr	r0, [pc, #92]	; (8002490 <HAL_InitTick+0xec>)
 8002432:	f006 fa71 	bl	8008918 <HAL_TIM_Base_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800243c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002440:	2b00      	cmp	r3, #0
 8002442:	d11b      	bne.n	800247c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002444:	4812      	ldr	r0, [pc, #72]	; (8002490 <HAL_InitTick+0xec>)
 8002446:	f006 fab7 	bl	80089b8 <HAL_TIM_Base_Start_IT>
 800244a:	4603      	mov	r3, r0
 800244c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002450:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002454:	2b00      	cmp	r3, #0
 8002456:	d111      	bne.n	800247c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002458:	2036      	movs	r0, #54	; 0x36
 800245a:	f001 fbb1 	bl	8003bc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d808      	bhi.n	8002476 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002464:	2200      	movs	r2, #0
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	2036      	movs	r0, #54	; 0x36
 800246a:	f001 fb8d 	bl	8003b88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <HAL_InitTick+0xf4>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	e002      	b.n	800247c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800247c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002480:	4618      	mov	r0, r3
 8002482:	3738      	adds	r7, #56	; 0x38
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	431bde83 	.word	0x431bde83
 8002490:	20000c74 	.word	0x20000c74
 8002494:	40001000 	.word	0x40001000
 8002498:	20000064 	.word	0x20000064

0800249c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <NMI_Handler+0x4>

080024a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a6:	e7fe      	b.n	80024a6 <HardFault_Handler+0x4>

080024a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024ac:	e7fe      	b.n	80024ac <MemManage_Handler+0x4>

080024ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b2:	e7fe      	b.n	80024b2 <BusFault_Handler+0x4>

080024b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <UsageFault_Handler+0x4>

080024ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <USART1_IRQHandler+0x10>)
 80024fa:	f7fe fe93 	bl	8001224 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000b78 	.word	0x20000b78

08002508 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	Uart_isr(&huart5);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <UART5_IRQHandler+0x10>)
 800250e:	f7fe fe89 	bl	8001224 <Uart_isr>
  /* USER CODE END UART5_IRQn 0 */
//  HAL_UART_IRQHandler(&huart5);
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000b34 	.word	0x20000b34

0800251c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <TIM6_DAC_IRQHandler+0x10>)
 8002522:	f006 fab9 	bl	8008a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000c74 	.word	0x20000c74

08002530 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <OTG_HS_IRQHandler+0x10>)
 8002536:	f002 fe03 	bl	8005140 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200012f4 	.word	0x200012f4

08002544 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <LTDC_IRQHandler+0x10>)
 800254a:	f004 fa29 	bl	80069a0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200009ec 	.word	0x200009ec

08002558 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <DMA2D_IRQHandler+0x10>)
 800255e:	f001 fe74 	bl	800424a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000958 	.word	0x20000958

0800256c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002574:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <_sbrk+0x5c>)
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <_sbrk+0x60>)
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <_sbrk+0x64>)
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <_sbrk+0x68>)
 800258c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	429a      	cmp	r2, r3
 800259a:	d207      	bcs.n	80025ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800259c:	f00a fcfc 	bl	800cf98 <__errno>
 80025a0:	4603      	mov	r3, r0
 80025a2:	220c      	movs	r2, #12
 80025a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	e009      	b.n	80025c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <_sbrk+0x64>)
 80025bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20030000 	.word	0x20030000
 80025cc:	00000400 	.word	0x00000400
 80025d0:	20000cbc 	.word	0x20000cbc
 80025d4:	20001608 	.word	0x20001608

080025d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <SystemInit+0x20>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <SystemInit+0x20>)
 80025e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002634 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002600:	480d      	ldr	r0, [pc, #52]	; (8002638 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002602:	490e      	ldr	r1, [pc, #56]	; (800263c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002604:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002618:	4c0b      	ldr	r4, [pc, #44]	; (8002648 <LoopFillZerobss+0x26>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002626:	f7ff ffd7 	bl	80025d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262a:	f00a fcbb 	bl	800cfa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262e:	f7fe fea3 	bl	8001378 <main>
  bx  lr    
 8002632:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002634:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8002640:	0801066c 	.word	0x0801066c
  ldr r2, =_sbss
 8002644:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8002648:	20001608 	.word	0x20001608

0800264c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC_IRQHandler>

0800264e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002652:	f000 fa5d 	bl	8002b10 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002656:	20ca      	movs	r0, #202	; 0xca
 8002658:	f000 f95d 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800265c:	20c3      	movs	r0, #195	; 0xc3
 800265e:	f000 f967 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002662:	2008      	movs	r0, #8
 8002664:	f000 f964 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002668:	2050      	movs	r0, #80	; 0x50
 800266a:	f000 f961 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800266e:	20cf      	movs	r0, #207	; 0xcf
 8002670:	f000 f951 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002674:	2000      	movs	r0, #0
 8002676:	f000 f95b 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800267a:	20c1      	movs	r0, #193	; 0xc1
 800267c:	f000 f958 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002680:	2030      	movs	r0, #48	; 0x30
 8002682:	f000 f955 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002686:	20ed      	movs	r0, #237	; 0xed
 8002688:	f000 f945 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800268c:	2064      	movs	r0, #100	; 0x64
 800268e:	f000 f94f 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002692:	2003      	movs	r0, #3
 8002694:	f000 f94c 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002698:	2012      	movs	r0, #18
 800269a:	f000 f949 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800269e:	2081      	movs	r0, #129	; 0x81
 80026a0:	f000 f946 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80026a4:	20e8      	movs	r0, #232	; 0xe8
 80026a6:	f000 f936 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80026aa:	2085      	movs	r0, #133	; 0x85
 80026ac:	f000 f940 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80026b0:	2000      	movs	r0, #0
 80026b2:	f000 f93d 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80026b6:	2078      	movs	r0, #120	; 0x78
 80026b8:	f000 f93a 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80026bc:	20cb      	movs	r0, #203	; 0xcb
 80026be:	f000 f92a 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80026c2:	2039      	movs	r0, #57	; 0x39
 80026c4:	f000 f934 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80026c8:	202c      	movs	r0, #44	; 0x2c
 80026ca:	f000 f931 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f000 f92e 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80026d4:	2034      	movs	r0, #52	; 0x34
 80026d6:	f000 f92b 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80026da:	2002      	movs	r0, #2
 80026dc:	f000 f928 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80026e0:	20f7      	movs	r0, #247	; 0xf7
 80026e2:	f000 f918 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80026e6:	2020      	movs	r0, #32
 80026e8:	f000 f922 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80026ec:	20ea      	movs	r0, #234	; 0xea
 80026ee:	f000 f912 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f000 f91c 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f000 f919 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80026fe:	20b1      	movs	r0, #177	; 0xb1
 8002700:	f000 f909 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002704:	2000      	movs	r0, #0
 8002706:	f000 f913 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800270a:	201b      	movs	r0, #27
 800270c:	f000 f910 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002710:	20b6      	movs	r0, #182	; 0xb6
 8002712:	f000 f900 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002716:	200a      	movs	r0, #10
 8002718:	f000 f90a 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800271c:	20a2      	movs	r0, #162	; 0xa2
 800271e:	f000 f907 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002722:	20c0      	movs	r0, #192	; 0xc0
 8002724:	f000 f8f7 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002728:	2010      	movs	r0, #16
 800272a:	f000 f901 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800272e:	20c1      	movs	r0, #193	; 0xc1
 8002730:	f000 f8f1 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002734:	2010      	movs	r0, #16
 8002736:	f000 f8fb 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800273a:	20c5      	movs	r0, #197	; 0xc5
 800273c:	f000 f8eb 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002740:	2045      	movs	r0, #69	; 0x45
 8002742:	f000 f8f5 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002746:	2015      	movs	r0, #21
 8002748:	f000 f8f2 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800274c:	20c7      	movs	r0, #199	; 0xc7
 800274e:	f000 f8e2 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002752:	2090      	movs	r0, #144	; 0x90
 8002754:	f000 f8ec 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002758:	2036      	movs	r0, #54	; 0x36
 800275a:	f000 f8dc 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800275e:	20c8      	movs	r0, #200	; 0xc8
 8002760:	f000 f8e6 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002764:	20f2      	movs	r0, #242	; 0xf2
 8002766:	f000 f8d6 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800276a:	2000      	movs	r0, #0
 800276c:	f000 f8e0 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002770:	20b0      	movs	r0, #176	; 0xb0
 8002772:	f000 f8d0 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002776:	20c2      	movs	r0, #194	; 0xc2
 8002778:	f000 f8da 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800277c:	20b6      	movs	r0, #182	; 0xb6
 800277e:	f000 f8ca 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002782:	200a      	movs	r0, #10
 8002784:	f000 f8d4 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002788:	20a7      	movs	r0, #167	; 0xa7
 800278a:	f000 f8d1 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800278e:	2027      	movs	r0, #39	; 0x27
 8002790:	f000 f8ce 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002794:	2004      	movs	r0, #4
 8002796:	f000 f8cb 	bl	8002930 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800279a:	202a      	movs	r0, #42	; 0x2a
 800279c:	f000 f8bb 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f000 f8c5 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f000 f8c2 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027ac:	2000      	movs	r0, #0
 80027ae:	f000 f8bf 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80027b2:	20ef      	movs	r0, #239	; 0xef
 80027b4:	f000 f8bc 	bl	8002930 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80027b8:	202b      	movs	r0, #43	; 0x2b
 80027ba:	f000 f8ac 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027be:	2000      	movs	r0, #0
 80027c0:	f000 f8b6 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f000 f8b3 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80027ca:	2001      	movs	r0, #1
 80027cc:	f000 f8b0 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80027d0:	203f      	movs	r0, #63	; 0x3f
 80027d2:	f000 f8ad 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80027d6:	20f6      	movs	r0, #246	; 0xf6
 80027d8:	f000 f89d 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80027dc:	2001      	movs	r0, #1
 80027de:	f000 f8a7 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027e2:	2000      	movs	r0, #0
 80027e4:	f000 f8a4 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80027e8:	2006      	movs	r0, #6
 80027ea:	f000 f8a1 	bl	8002930 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80027ee:	202c      	movs	r0, #44	; 0x2c
 80027f0:	f000 f891 	bl	8002916 <ili9341_WriteReg>
  LCD_Delay(200);
 80027f4:	20c8      	movs	r0, #200	; 0xc8
 80027f6:	f000 fa79 	bl	8002cec <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80027fa:	2026      	movs	r0, #38	; 0x26
 80027fc:	f000 f88b 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002800:	2001      	movs	r0, #1
 8002802:	f000 f895 	bl	8002930 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002806:	20e0      	movs	r0, #224	; 0xe0
 8002808:	f000 f885 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800280c:	200f      	movs	r0, #15
 800280e:	f000 f88f 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002812:	2029      	movs	r0, #41	; 0x29
 8002814:	f000 f88c 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002818:	2024      	movs	r0, #36	; 0x24
 800281a:	f000 f889 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800281e:	200c      	movs	r0, #12
 8002820:	f000 f886 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002824:	200e      	movs	r0, #14
 8002826:	f000 f883 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800282a:	2009      	movs	r0, #9
 800282c:	f000 f880 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002830:	204e      	movs	r0, #78	; 0x4e
 8002832:	f000 f87d 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002836:	2078      	movs	r0, #120	; 0x78
 8002838:	f000 f87a 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800283c:	203c      	movs	r0, #60	; 0x3c
 800283e:	f000 f877 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002842:	2009      	movs	r0, #9
 8002844:	f000 f874 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002848:	2013      	movs	r0, #19
 800284a:	f000 f871 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800284e:	2005      	movs	r0, #5
 8002850:	f000 f86e 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002854:	2017      	movs	r0, #23
 8002856:	f000 f86b 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800285a:	2011      	movs	r0, #17
 800285c:	f000 f868 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002860:	2000      	movs	r0, #0
 8002862:	f000 f865 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002866:	20e1      	movs	r0, #225	; 0xe1
 8002868:	f000 f855 	bl	8002916 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800286c:	2000      	movs	r0, #0
 800286e:	f000 f85f 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002872:	2016      	movs	r0, #22
 8002874:	f000 f85c 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002878:	201b      	movs	r0, #27
 800287a:	f000 f859 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800287e:	2004      	movs	r0, #4
 8002880:	f000 f856 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002884:	2011      	movs	r0, #17
 8002886:	f000 f853 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800288a:	2007      	movs	r0, #7
 800288c:	f000 f850 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002890:	2031      	movs	r0, #49	; 0x31
 8002892:	f000 f84d 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002896:	2033      	movs	r0, #51	; 0x33
 8002898:	f000 f84a 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800289c:	2042      	movs	r0, #66	; 0x42
 800289e:	f000 f847 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80028a2:	2005      	movs	r0, #5
 80028a4:	f000 f844 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80028a8:	200c      	movs	r0, #12
 80028aa:	f000 f841 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80028ae:	200a      	movs	r0, #10
 80028b0:	f000 f83e 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80028b4:	2028      	movs	r0, #40	; 0x28
 80028b6:	f000 f83b 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80028ba:	202f      	movs	r0, #47	; 0x2f
 80028bc:	f000 f838 	bl	8002930 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80028c0:	200f      	movs	r0, #15
 80028c2:	f000 f835 	bl	8002930 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80028c6:	2011      	movs	r0, #17
 80028c8:	f000 f825 	bl	8002916 <ili9341_WriteReg>
  LCD_Delay(200);
 80028cc:	20c8      	movs	r0, #200	; 0xc8
 80028ce:	f000 fa0d 	bl	8002cec <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80028d2:	2029      	movs	r0, #41	; 0x29
 80028d4:	f000 f81f 	bl	8002916 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80028d8:	202c      	movs	r0, #44	; 0x2c
 80028da:	f000 f81c 	bl	8002916 <ili9341_WriteReg>
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80028e6:	f000 f913 	bl	8002b10 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80028ea:	2103      	movs	r1, #3
 80028ec:	20d3      	movs	r0, #211	; 0xd3
 80028ee:	f000 f82c 	bl	800294a <ili9341_ReadData>
 80028f2:	4603      	mov	r3, r0
 80028f4:	b29b      	uxth	r3, r3
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	bd80      	pop	{r7, pc}

080028fa <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80028fe:	2029      	movs	r0, #41	; 0x29
 8002900:	f000 f809 	bl	8002916 <ili9341_WriteReg>
}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}

08002908 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800290c:	2028      	movs	r0, #40	; 0x28
 800290e:	f000 f802 	bl	8002916 <ili9341_WriteReg>
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}

08002916 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f98e 	bl	8002c44 <LCD_IO_WriteReg>
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f95f 	bl	8002c00 <LCD_IO_WriteData>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	460a      	mov	r2, r1
 8002954:	80fb      	strh	r3, [r7, #6]
 8002956:	4613      	mov	r3, r2
 8002958:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800295a:	797a      	ldrb	r2, [r7, #5]
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f991 	bl	8002c88 <LCD_IO_ReadData>
 8002966:	4603      	mov	r3, r0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002974:	23f0      	movs	r3, #240	; 0xf0
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002984:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002998:	4819      	ldr	r0, [pc, #100]	; (8002a00 <SPIx_Init+0x6c>)
 800299a:	f005 fe7e 	bl	800869a <HAL_SPI_GetState>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d12b      	bne.n	80029fc <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80029a4:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <SPIx_Init+0x6c>)
 80029a6:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <SPIx_Init+0x70>)
 80029a8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <SPIx_Init+0x6c>)
 80029ac:	2218      	movs	r2, #24
 80029ae:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <SPIx_Init+0x6c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <SPIx_Init+0x6c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <SPIx_Init+0x6c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80029c2:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <SPIx_Init+0x6c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <SPIx_Init+0x6c>)
 80029ca:	2207      	movs	r2, #7
 80029cc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <SPIx_Init+0x6c>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <SPIx_Init+0x6c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <SPIx_Init+0x6c>)
 80029dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <SPIx_Init+0x6c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <SPIx_Init+0x6c>)
 80029ea:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029ee:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80029f0:	4803      	ldr	r0, [pc, #12]	; (8002a00 <SPIx_Init+0x6c>)
 80029f2:	f000 f853 	bl	8002a9c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80029f6:	4802      	ldr	r0, [pc, #8]	; (8002a00 <SPIx_Init+0x6c>)
 80029f8:	f005 f9af 	bl	8007d5a <HAL_SPI_Init>
  } 
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000cc0 	.word	0x20000cc0
 8002a04:	40015000 	.word	0x40015000

08002a08 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <SPIx_Read+0x38>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f107 0108 	add.w	r1, r7, #8
 8002a22:	4808      	ldr	r0, [pc, #32]	; (8002a44 <SPIx_Read+0x3c>)
 8002a24:	f005 fb86 	bl	8008134 <HAL_SPI_Receive>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002a32:	f000 f827 	bl	8002a84 <SPIx_Error>
  }
  
  return readvalue;
 8002a36:	68bb      	ldr	r3, [r7, #8]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	2000004c 	.word	0x2000004c
 8002a44:	20000cc0 	.word	0x20000cc0

08002a48 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <SPIx_Write+0x34>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	1db9      	adds	r1, r7, #6
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	4808      	ldr	r0, [pc, #32]	; (8002a80 <SPIx_Write+0x38>)
 8002a60:	f005 fa2c 	bl	8007ebc <HAL_SPI_Transmit>
 8002a64:	4603      	mov	r3, r0
 8002a66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002a6e:	f000 f809 	bl	8002a84 <SPIx_Error>
  }
}
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	2000004c 	.word	0x2000004c
 8002a80:	20000cc0 	.word	0x20000cc0

08002a84 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002a88:	4803      	ldr	r0, [pc, #12]	; (8002a98 <SPIx_Error+0x14>)
 8002a8a:	f005 f9ef 	bl	8007e6c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002a8e:	f7ff ff81 	bl	8002994 <SPIx_Init>
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000cc0 	.word	0x20000cc0

08002a9c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	4b17      	ldr	r3, [pc, #92]	; (8002b08 <SPIx_MspInit+0x6c>)
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <SPIx_MspInit+0x6c>)
 8002aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <SPIx_MspInit+0x6c>)
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <SPIx_MspInit+0x6c>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <SPIx_MspInit+0x6c>)
 8002aca:	f043 0320 	orr.w	r3, r3, #32
 8002ace:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <SPIx_MspInit+0x6c>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002adc:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002aea:	2301      	movs	r3, #1
 8002aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002aee:	2305      	movs	r3, #5
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002af2:	f107 0314 	add.w	r3, r7, #20
 8002af6:	4619      	mov	r1, r3
 8002af8:	4804      	ldr	r0, [pc, #16]	; (8002b0c <SPIx_MspInit+0x70>)
 8002afa:	f001 fde5 	bl	80046c8 <HAL_GPIO_Init>
}
 8002afe:	bf00      	nop
 8002b00:	3728      	adds	r7, #40	; 0x28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40021400 	.word	0x40021400

08002b10 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002b16:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <LCD_IO_Init+0xe0>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d164      	bne.n	8002be8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002b1e:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <LCD_IO_Init+0xe0>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	4b32      	ldr	r3, [pc, #200]	; (8002bf4 <LCD_IO_Init+0xe4>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	4a31      	ldr	r2, [pc, #196]	; (8002bf4 <LCD_IO_Init+0xe4>)
 8002b2e:	f043 0308 	orr.w	r3, r3, #8
 8002b32:	6313      	str	r3, [r2, #48]	; 0x30
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <LCD_IO_Init+0xe4>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002b46:	2301      	movs	r3, #1
 8002b48:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002b52:	f107 030c 	add.w	r3, r7, #12
 8002b56:	4619      	mov	r1, r3
 8002b58:	4827      	ldr	r0, [pc, #156]	; (8002bf8 <LCD_IO_Init+0xe8>)
 8002b5a:	f001 fdb5 	bl	80046c8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <LCD_IO_Init+0xe4>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	4a23      	ldr	r2, [pc, #140]	; (8002bf4 <LCD_IO_Init+0xe4>)
 8002b68:	f043 0308 	orr.w	r3, r3, #8
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6e:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <LCD_IO_Init+0xe4>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002b80:	2301      	movs	r3, #1
 8002b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	4619      	mov	r1, r3
 8002b92:	4819      	ldr	r0, [pc, #100]	; (8002bf8 <LCD_IO_Init+0xe8>)
 8002b94:	f001 fd98 	bl	80046c8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <LCD_IO_Init+0xe4>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	4a14      	ldr	r2, [pc, #80]	; (8002bf4 <LCD_IO_Init+0xe4>)
 8002ba2:	f043 0304 	orr.w	r3, r3, #4
 8002ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba8:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <LCD_IO_Init+0xe4>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002bc4:	f107 030c 	add.w	r3, r7, #12
 8002bc8:	4619      	mov	r1, r3
 8002bca:	480c      	ldr	r0, [pc, #48]	; (8002bfc <LCD_IO_Init+0xec>)
 8002bcc:	f001 fd7c 	bl	80046c8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2104      	movs	r1, #4
 8002bd4:	4809      	ldr	r0, [pc, #36]	; (8002bfc <LCD_IO_Init+0xec>)
 8002bd6:	f002 f82f 	bl	8004c38 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002bda:	2201      	movs	r2, #1
 8002bdc:	2104      	movs	r1, #4
 8002bde:	4807      	ldr	r0, [pc, #28]	; (8002bfc <LCD_IO_Init+0xec>)
 8002be0:	f002 f82a 	bl	8004c38 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002be4:	f7ff fed6 	bl	8002994 <SPIx_Init>
  }
}
 8002be8:	bf00      	nop
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000d18 	.word	0x20000d18
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40020c00 	.word	0x40020c00
 8002bfc:	40020800 	.word	0x40020800

08002c00 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c10:	480a      	ldr	r0, [pc, #40]	; (8002c3c <LCD_IO_WriteData+0x3c>)
 8002c12:	f002 f811 	bl	8004c38 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002c16:	2200      	movs	r2, #0
 8002c18:	2104      	movs	r1, #4
 8002c1a:	4809      	ldr	r0, [pc, #36]	; (8002c40 <LCD_IO_WriteData+0x40>)
 8002c1c:	f002 f80c 	bl	8004c38 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff10 	bl	8002a48 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002c28:	2201      	movs	r2, #1
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <LCD_IO_WriteData+0x40>)
 8002c2e:	f002 f803 	bl	8004c38 <HAL_GPIO_WritePin>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40020c00 	.word	0x40020c00
 8002c40:	40020800 	.word	0x40020800

08002c44 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c54:	480a      	ldr	r0, [pc, #40]	; (8002c80 <LCD_IO_WriteReg+0x3c>)
 8002c56:	f001 ffef 	bl	8004c38 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2104      	movs	r1, #4
 8002c5e:	4809      	ldr	r0, [pc, #36]	; (8002c84 <LCD_IO_WriteReg+0x40>)
 8002c60:	f001 ffea 	bl	8004c38 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff feed 	bl	8002a48 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002c6e:	2201      	movs	r2, #1
 8002c70:	2104      	movs	r1, #4
 8002c72:	4804      	ldr	r0, [pc, #16]	; (8002c84 <LCD_IO_WriteReg+0x40>)
 8002c74:	f001 ffe0 	bl	8004c38 <HAL_GPIO_WritePin>
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40020c00 	.word	0x40020c00
 8002c84:	40020800 	.word	0x40020800

08002c88 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	460a      	mov	r2, r1
 8002c92:	80fb      	strh	r3, [r7, #6]
 8002c94:	4613      	mov	r3, r2
 8002c96:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2104      	movs	r1, #4
 8002ca0:	4810      	ldr	r0, [pc, #64]	; (8002ce4 <LCD_IO_ReadData+0x5c>)
 8002ca2:	f001 ffc9 	bl	8004c38 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cac:	480e      	ldr	r0, [pc, #56]	; (8002ce8 <LCD_IO_ReadData+0x60>)
 8002cae:	f001 ffc3 	bl	8004c38 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fec7 	bl	8002a48 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002cba:	797b      	ldrb	r3, [r7, #5]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fea3 	bl	8002a08 <SPIx_Read>
 8002cc2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cca:	4807      	ldr	r0, [pc, #28]	; (8002ce8 <LCD_IO_ReadData+0x60>)
 8002ccc:	f001 ffb4 	bl	8004c38 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	4803      	ldr	r0, [pc, #12]	; (8002ce4 <LCD_IO_ReadData+0x5c>)
 8002cd6:	f001 ffaf 	bl	8004c38 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002cda:	68fb      	ldr	r3, [r7, #12]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40020800 	.word	0x40020800
 8002ce8:	40020c00 	.word	0x40020c00

08002cec <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fe6b 	bl	80039d0 <HAL_Delay>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002d08:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d0a:	4a2e      	ldr	r2, [pc, #184]	; (8002dc4 <BSP_LCD_Init+0xc0>)
 8002d0c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002d0e:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d10:	2209      	movs	r2, #9
 8002d12:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002d1a:	4b29      	ldr	r3, [pc, #164]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d1c:	221d      	movs	r2, #29
 8002d1e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002d20:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d22:	2203      	movs	r2, #3
 8002d24:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d28:	f240 120d 	movw	r2, #269	; 0x10d
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002d2e:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d30:	f240 1243 	movw	r2, #323	; 0x143
 8002d34:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002d36:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d38:	f240 1217 	movw	r2, #279	; 0x117
 8002d3c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d40:	f240 1247 	movw	r2, #327	; 0x147
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002d46:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002d4e:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002d56:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <BSP_LCD_Init+0xc4>)
 8002d60:	2208      	movs	r2, #8
 8002d62:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002d64:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <BSP_LCD_Init+0xc4>)
 8002d66:	22c0      	movs	r2, #192	; 0xc0
 8002d68:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <BSP_LCD_Init+0xc4>)
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002d70:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <BSP_LCD_Init+0xc4>)
 8002d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002d78:	4813      	ldr	r0, [pc, #76]	; (8002dc8 <BSP_LCD_Init+0xc4>)
 8002d7a:	f004 fd9d 	bl	80078b8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002d96:	f000 fa21 	bl	80031dc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002d9a:	4809      	ldr	r0, [pc, #36]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d9c:	f003 fd30 	bl	8006800 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <BSP_LCD_Init+0xc8>)
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <BSP_LCD_Init+0xcc>)
 8002da4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <BSP_LCD_Init+0xc8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002dae:	f000 fc03 	bl	80035b8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002db2:	4808      	ldr	r0, [pc, #32]	; (8002dd4 <BSP_LCD_Init+0xd0>)
 8002db4:	f000 f8ce 	bl	8002f54 <BSP_LCD_SetFont>

  return LCD_OK;
 8002db8:	2300      	movs	r3, #0
}  
 8002dba:	4618      	mov	r0, r3
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000d1c 	.word	0x20000d1c
 8002dc4:	40016800 	.word	0x40016800
 8002dc8:	20000e04 	.word	0x20000e04
 8002dcc:	20000e50 	.word	0x20000e50
 8002dd0:	20000014 	.word	0x20000014
 8002dd4:	20000050 	.word	0x20000050

08002dd8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002ddc:	4b03      	ldr	r3, [pc, #12]	; (8002dec <BSP_LCD_GetXSize+0x14>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	4798      	blx	r3
 8002de4:	4603      	mov	r3, r0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000e50 	.word	0x20000e50

08002df0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <BSP_LCD_GetYSize+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	4798      	blx	r3
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000e50 	.word	0x20000e50

08002e08 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b090      	sub	sp, #64	; 0x40
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	6039      	str	r1, [r7, #0]
 8002e12:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002e18:	f7ff ffde 	bl	8002dd8 <BSP_LCD_GetXSize>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002e24:	f7ff ffe4 	bl	8002df0 <BSP_LCD_GetYSize>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002e34:	23ff      	movs	r3, #255	; 0xff
 8002e36:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002e4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002e54:	2307      	movs	r3, #7
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002e58:	f7ff ffbe 	bl	8002dd8 <BSP_LCD_GetXSize>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002e60:	f7ff ffc6 	bl	8002df0 <BSP_LCD_GetYSize>
 8002e64:	4603      	mov	r3, r0
 8002e66:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002e68:	88fa      	ldrh	r2, [r7, #6]
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4814      	ldr	r0, [pc, #80]	; (8002ec4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002e72:	f003 fe57 	bl	8006b24 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	4913      	ldr	r1, [pc, #76]	; (8002ec8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	3304      	adds	r3, #4
 8002e86:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002e8c:	88fa      	ldrh	r2, [r7, #6]
 8002e8e:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	4a0b      	ldr	r2, [pc, #44]	; (8002ecc <BSP_LCD_LayerDefaultInit+0xc4>)
 8002e9e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002ea0:	88fa      	ldrh	r2, [r7, #6]
 8002ea2:	4909      	ldr	r1, [pc, #36]	; (8002ec8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002eb4:	4803      	ldr	r0, [pc, #12]	; (8002ec4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002eb6:	f003 fe73 	bl	8006ba0 <HAL_LTDC_EnableDither>
}
 8002eba:	bf00      	nop
 8002ebc:	3740      	adds	r7, #64	; 0x40
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000d1c 	.word	0x20000d1c
 8002ec8:	20000e38 	.word	0x20000e38
 8002ecc:	20000050 	.word	0x20000050

08002ed0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002ed8:	4a04      	ldr	r2, [pc, #16]	; (8002eec <BSP_LCD_SelectLayer+0x1c>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6013      	str	r3, [r2, #0]
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000e34 	.word	0x20000e34

08002ef0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002ef8:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <BSP_LCD_SetTextColor+0x28>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4907      	ldr	r1, [pc, #28]	; (8002f1c <BSP_LCD_SetTextColor+0x2c>)
 8002efe:	4613      	mov	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	601a      	str	r2, [r3, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	20000e34 	.word	0x20000e34
 8002f1c:	20000e38 	.word	0x20000e38

08002f20 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <BSP_LCD_SetBackColor+0x2c>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4908      	ldr	r1, [pc, #32]	; (8002f50 <BSP_LCD_SetBackColor+0x30>)
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3304      	adds	r3, #4
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	601a      	str	r2, [r3, #0]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000e34 	.word	0x20000e34
 8002f50:	20000e38 	.word	0x20000e38

08002f54 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002f5c:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <BSP_LCD_SetFont+0x2c>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4908      	ldr	r1, [pc, #32]	; (8002f84 <BSP_LCD_SetFont+0x30>)
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	601a      	str	r2, [r3, #0]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000e34 	.word	0x20000e34
 8002f84:	20000e38 	.word	0x20000e38

08002f88 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002f90:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <BSP_LCD_Clear+0x48>)
 8002f92:	681c      	ldr	r4, [r3, #0]
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <BSP_LCD_Clear+0x48>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <BSP_LCD_Clear+0x4c>)
 8002f9a:	2134      	movs	r1, #52	; 0x34
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	335c      	adds	r3, #92	; 0x5c
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	461e      	mov	r6, r3
 8002fa8:	f7ff ff16 	bl	8002dd8 <BSP_LCD_GetXSize>
 8002fac:	4605      	mov	r5, r0
 8002fae:	f7ff ff1f 	bl	8002df0 <BSP_LCD_GetYSize>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	462a      	mov	r2, r5
 8002fc0:	4631      	mov	r1, r6
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f000 fac0 	bl	8003548 <FillBuffer>
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fd0:	20000e34 	.word	0x20000e34
 8002fd4:	20000d1c 	.word	0x20000d1c

08002fd8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	80fb      	strh	r3, [r7, #6]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	80bb      	strh	r3, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002fea:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <BSP_LCD_DisplayChar+0x80>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	491b      	ldr	r1, [pc, #108]	; (800305c <BSP_LCD_DisplayChar+0x84>)
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <BSP_LCD_DisplayChar+0x80>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4c14      	ldr	r4, [pc, #80]	; (800305c <BSP_LCD_DisplayChar+0x84>)
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4423      	add	r3, r4
 8003016:	3308      	adds	r3, #8
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800301c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003020:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <BSP_LCD_DisplayChar+0x80>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4c0d      	ldr	r4, [pc, #52]	; (800305c <BSP_LCD_DisplayChar+0x84>)
 8003026:	4613      	mov	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4423      	add	r3, r4
 8003030:	3308      	adds	r3, #8
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	889b      	ldrh	r3, [r3, #4]
 8003036:	3307      	adds	r3, #7
 8003038:	2b00      	cmp	r3, #0
 800303a:	da00      	bge.n	800303e <BSP_LCD_DisplayChar+0x66>
 800303c:	3307      	adds	r3, #7
 800303e:	10db      	asrs	r3, r3, #3
 8003040:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003044:	18ca      	adds	r2, r1, r3
 8003046:	88b9      	ldrh	r1, [r7, #4]
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f9c2 	bl	80033d4 <DrawChar>
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bd90      	pop	{r4, r7, pc}
 8003058:	20000e34 	.word	0x20000e34
 800305c:	20000e38 	.word	0x20000e38

08003060 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003060:	b5b0      	push	{r4, r5, r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	60ba      	str	r2, [r7, #8]
 8003068:	461a      	mov	r2, r3
 800306a:	4603      	mov	r3, r0
 800306c:	81fb      	strh	r3, [r7, #14]
 800306e:	460b      	mov	r3, r1
 8003070:	81bb      	strh	r3, [r7, #12]
 8003072:	4613      	mov	r3, r2
 8003074:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003076:	2301      	movs	r3, #1
 8003078:	83fb      	strh	r3, [r7, #30]
 800307a:	2300      	movs	r3, #0
 800307c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800308a:	e002      	b.n	8003092 <BSP_LCD_DisplayStringAt+0x32>
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	3301      	adds	r3, #1
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	617a      	str	r2, [r7, #20]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f6      	bne.n	800308c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800309e:	f7ff fe9b 	bl	8002dd8 <BSP_LCD_GetXSize>
 80030a2:	4601      	mov	r1, r0
 80030a4:	4b4b      	ldr	r3, [pc, #300]	; (80031d4 <BSP_LCD_DisplayStringAt+0x174>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	484b      	ldr	r0, [pc, #300]	; (80031d8 <BSP_LCD_DisplayStringAt+0x178>)
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4403      	add	r3, r0
 80030b4:	3308      	adds	r3, #8
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	889b      	ldrh	r3, [r3, #4]
 80030ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80030be:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d01c      	beq.n	8003100 <BSP_LCD_DisplayStringAt+0xa0>
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	dc33      	bgt.n	8003132 <BSP_LCD_DisplayStringAt+0xd2>
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d002      	beq.n	80030d4 <BSP_LCD_DisplayStringAt+0x74>
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d019      	beq.n	8003106 <BSP_LCD_DisplayStringAt+0xa6>
 80030d2:	e02e      	b.n	8003132 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	1ad1      	subs	r1, r2, r3
 80030da:	4b3e      	ldr	r3, [pc, #248]	; (80031d4 <BSP_LCD_DisplayStringAt+0x174>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	483e      	ldr	r0, [pc, #248]	; (80031d8 <BSP_LCD_DisplayStringAt+0x178>)
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4403      	add	r3, r0
 80030ea:	3308      	adds	r3, #8
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	889b      	ldrh	r3, [r3, #4]
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	085b      	lsrs	r3, r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	89fb      	ldrh	r3, [r7, #14]
 80030fa:	4413      	add	r3, r2
 80030fc:	83fb      	strh	r3, [r7, #30]
      break;
 80030fe:	e01b      	b.n	8003138 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003100:	89fb      	ldrh	r3, [r7, #14]
 8003102:	83fb      	strh	r3, [r7, #30]
      break;
 8003104:	e018      	b.n	8003138 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	b299      	uxth	r1, r3
 800310e:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <BSP_LCD_DisplayStringAt+0x174>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4831      	ldr	r0, [pc, #196]	; (80031d8 <BSP_LCD_DisplayStringAt+0x178>)
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4403      	add	r3, r0
 800311e:	3308      	adds	r3, #8
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	889b      	ldrh	r3, [r3, #4]
 8003124:	fb11 f303 	smulbb	r3, r1, r3
 8003128:	b29a      	uxth	r2, r3
 800312a:	89fb      	ldrh	r3, [r7, #14]
 800312c:	4413      	add	r3, r2
 800312e:	83fb      	strh	r3, [r7, #30]
      break;
 8003130:	e002      	b.n	8003138 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003132:	89fb      	ldrh	r3, [r7, #14]
 8003134:	83fb      	strh	r3, [r7, #30]
      break;
 8003136:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003138:	e01a      	b.n	8003170 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	781a      	ldrb	r2, [r3, #0]
 800313e:	89b9      	ldrh	r1, [r7, #12]
 8003140:	8bfb      	ldrh	r3, [r7, #30]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff ff48 	bl	8002fd8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <BSP_LCD_DisplayStringAt+0x174>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4922      	ldr	r1, [pc, #136]	; (80031d8 <BSP_LCD_DisplayStringAt+0x178>)
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3308      	adds	r3, #8
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	889a      	ldrh	r2, [r3, #4]
 800315e:	8bfb      	ldrh	r3, [r7, #30]
 8003160:	4413      	add	r3, r2
 8003162:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	3301      	adds	r3, #1
 8003168:	60bb      	str	r3, [r7, #8]
    i++;
 800316a:	8bbb      	ldrh	r3, [r7, #28]
 800316c:	3301      	adds	r3, #1
 800316e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2dc      	uxtb	r4, r3
 800317e:	f7ff fe2b 	bl	8002dd8 <BSP_LCD_GetXSize>
 8003182:	8bb9      	ldrh	r1, [r7, #28]
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <BSP_LCD_DisplayStringAt+0x174>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4d13      	ldr	r5, [pc, #76]	; (80031d8 <BSP_LCD_DisplayStringAt+0x178>)
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	442b      	add	r3, r5
 8003194:	3308      	adds	r3, #8
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	889b      	ldrh	r3, [r3, #4]
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	1ac3      	subs	r3, r0, r3
 80031a0:	b299      	uxth	r1, r3
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <BSP_LCD_DisplayStringAt+0x174>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	480c      	ldr	r0, [pc, #48]	; (80031d8 <BSP_LCD_DisplayStringAt+0x178>)
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4403      	add	r3, r0
 80031b2:	3308      	adds	r3, #8
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	889b      	ldrh	r3, [r3, #4]
 80031b8:	4299      	cmp	r1, r3
 80031ba:	bf2c      	ite	cs
 80031bc:	2301      	movcs	r3, #1
 80031be:	2300      	movcc	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	4023      	ands	r3, r4
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1b7      	bne.n	800313a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bdb0      	pop	{r4, r5, r7, pc}
 80031d4:	20000e34 	.word	0x20000e34
 80031d8:	20000e38 	.word	0x20000e38

080031dc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08e      	sub	sp, #56	; 0x38
 80031e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	623b      	str	r3, [r7, #32]
 80031e6:	4b61      	ldr	r3, [pc, #388]	; (800336c <BSP_LCD_MspInit+0x190>)
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	4a60      	ldr	r2, [pc, #384]	; (800336c <BSP_LCD_MspInit+0x190>)
 80031ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031f0:	6453      	str	r3, [r2, #68]	; 0x44
 80031f2:	4b5e      	ldr	r3, [pc, #376]	; (800336c <BSP_LCD_MspInit+0x190>)
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031fa:	623b      	str	r3, [r7, #32]
 80031fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	4b5a      	ldr	r3, [pc, #360]	; (800336c <BSP_LCD_MspInit+0x190>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a59      	ldr	r2, [pc, #356]	; (800336c <BSP_LCD_MspInit+0x190>)
 8003208:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b57      	ldr	r3, [pc, #348]	; (800336c <BSP_LCD_MspInit+0x190>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	4b53      	ldr	r3, [pc, #332]	; (800336c <BSP_LCD_MspInit+0x190>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a52      	ldr	r2, [pc, #328]	; (800336c <BSP_LCD_MspInit+0x190>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4b50      	ldr	r3, [pc, #320]	; (800336c <BSP_LCD_MspInit+0x190>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	4b4c      	ldr	r3, [pc, #304]	; (800336c <BSP_LCD_MspInit+0x190>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a4b      	ldr	r2, [pc, #300]	; (800336c <BSP_LCD_MspInit+0x190>)
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b49      	ldr	r3, [pc, #292]	; (800336c <BSP_LCD_MspInit+0x190>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	4b45      	ldr	r3, [pc, #276]	; (800336c <BSP_LCD_MspInit+0x190>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4a44      	ldr	r2, [pc, #272]	; (800336c <BSP_LCD_MspInit+0x190>)
 800325c:	f043 0304 	orr.w	r3, r3, #4
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4b42      	ldr	r3, [pc, #264]	; (800336c <BSP_LCD_MspInit+0x190>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b3e      	ldr	r3, [pc, #248]	; (800336c <BSP_LCD_MspInit+0x190>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a3d      	ldr	r2, [pc, #244]	; (800336c <BSP_LCD_MspInit+0x190>)
 8003278:	f043 0308 	orr.w	r3, r3, #8
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b3b      	ldr	r3, [pc, #236]	; (800336c <BSP_LCD_MspInit+0x190>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	4b37      	ldr	r3, [pc, #220]	; (800336c <BSP_LCD_MspInit+0x190>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	4a36      	ldr	r2, [pc, #216]	; (800336c <BSP_LCD_MspInit+0x190>)
 8003294:	f043 0320 	orr.w	r3, r3, #32
 8003298:	6313      	str	r3, [r2, #48]	; 0x30
 800329a:	4b34      	ldr	r3, [pc, #208]	; (800336c <BSP_LCD_MspInit+0x190>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	4b30      	ldr	r3, [pc, #192]	; (800336c <BSP_LCD_MspInit+0x190>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ae:	4a2f      	ldr	r2, [pc, #188]	; (800336c <BSP_LCD_MspInit+0x190>)
 80032b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b4:	6313      	str	r3, [r2, #48]	; 0x30
 80032b6:	4b2d      	ldr	r3, [pc, #180]	; (800336c <BSP_LCD_MspInit+0x190>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80032c2:	f641 0358 	movw	r3, #6232	; 0x1858
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80032d0:	2302      	movs	r3, #2
 80032d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80032d4:	230e      	movs	r3, #14
 80032d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80032d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032dc:	4619      	mov	r1, r3
 80032de:	4824      	ldr	r0, [pc, #144]	; (8003370 <BSP_LCD_MspInit+0x194>)
 80032e0:	f001 f9f2 	bl	80046c8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80032e4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80032ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ee:	4619      	mov	r1, r3
 80032f0:	4820      	ldr	r0, [pc, #128]	; (8003374 <BSP_LCD_MspInit+0x198>)
 80032f2:	f001 f9e9 	bl	80046c8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80032f6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80032fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003300:	4619      	mov	r1, r3
 8003302:	481d      	ldr	r0, [pc, #116]	; (8003378 <BSP_LCD_MspInit+0x19c>)
 8003304:	f001 f9e0 	bl	80046c8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003308:	2348      	movs	r3, #72	; 0x48
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800330c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003310:	4619      	mov	r1, r3
 8003312:	481a      	ldr	r0, [pc, #104]	; (800337c <BSP_LCD_MspInit+0x1a0>)
 8003314:	f001 f9d8 	bl	80046c8 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800331e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003322:	4619      	mov	r1, r3
 8003324:	4816      	ldr	r0, [pc, #88]	; (8003380 <BSP_LCD_MspInit+0x1a4>)
 8003326:	f001 f9cf 	bl	80046c8 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800332a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003334:	4619      	mov	r1, r3
 8003336:	4813      	ldr	r0, [pc, #76]	; (8003384 <BSP_LCD_MspInit+0x1a8>)
 8003338:	f001 f9c6 	bl	80046c8 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800333c:	2303      	movs	r3, #3
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003340:	2309      	movs	r3, #9
 8003342:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003348:	4619      	mov	r1, r3
 800334a:	480a      	ldr	r0, [pc, #40]	; (8003374 <BSP_LCD_MspInit+0x198>)
 800334c:	f001 f9bc 	bl	80046c8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003350:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800335a:	4619      	mov	r1, r3
 800335c:	4809      	ldr	r0, [pc, #36]	; (8003384 <BSP_LCD_MspInit+0x1a8>)
 800335e:	f001 f9b3 	bl	80046c8 <HAL_GPIO_Init>
}
 8003362:	bf00      	nop
 8003364:	3738      	adds	r7, #56	; 0x38
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800
 8003370:	40020000 	.word	0x40020000
 8003374:	40020400 	.word	0x40020400
 8003378:	40020800 	.word	0x40020800
 800337c:	40020c00 	.word	0x40020c00
 8003380:	40021400 	.word	0x40021400
 8003384:	40021800 	.word	0x40021800

08003388 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003388:	b5b0      	push	{r4, r5, r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	603a      	str	r2, [r7, #0]
 8003392:	80fb      	strh	r3, [r7, #6]
 8003394:	460b      	mov	r3, r1
 8003396:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <BSP_LCD_DrawPixel+0x44>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <BSP_LCD_DrawPixel+0x48>)
 800339e:	2134      	movs	r1, #52	; 0x34
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	335c      	adds	r3, #92	; 0x5c
 80033a8:	681c      	ldr	r4, [r3, #0]
 80033aa:	88bd      	ldrh	r5, [r7, #4]
 80033ac:	f7ff fd14 	bl	8002dd8 <BSP_LCD_GetXSize>
 80033b0:	4603      	mov	r3, r0
 80033b2:	fb03 f205 	mul.w	r2, r3, r5
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4423      	add	r3, r4
 80033be:	461a      	mov	r2, r3
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6013      	str	r3, [r2, #0]
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bdb0      	pop	{r4, r5, r7, pc}
 80033cc:	20000e34 	.word	0x20000e34
 80033d0:	20000d1c 	.word	0x20000d1c

080033d4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	603a      	str	r2, [r7, #0]
 80033de:	80fb      	strh	r3, [r7, #6]
 80033e0:	460b      	mov	r3, r1
 80033e2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	2300      	movs	r3, #0
 80033ea:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <DrawChar+0x16c>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4953      	ldr	r1, [pc, #332]	; (8003544 <DrawChar+0x170>)
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	3308      	adds	r3, #8
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	88db      	ldrh	r3, [r3, #6]
 8003406:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003408:	4b4d      	ldr	r3, [pc, #308]	; (8003540 <DrawChar+0x16c>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	494d      	ldr	r1, [pc, #308]	; (8003544 <DrawChar+0x170>)
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	3308      	adds	r3, #8
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	889b      	ldrh	r3, [r3, #4]
 800341e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003420:	8a3b      	ldrh	r3, [r7, #16]
 8003422:	3307      	adds	r3, #7
 8003424:	2b00      	cmp	r3, #0
 8003426:	da00      	bge.n	800342a <DrawChar+0x56>
 8003428:	3307      	adds	r3, #7
 800342a:	10db      	asrs	r3, r3, #3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	b2da      	uxtb	r2, r3
 8003432:	8a3b      	ldrh	r3, [r7, #16]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	e076      	b.n	800352e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003440:	8a3b      	ldrh	r3, [r7, #16]
 8003442:	3307      	adds	r3, #7
 8003444:	2b00      	cmp	r3, #0
 8003446:	da00      	bge.n	800344a <DrawChar+0x76>
 8003448:	3307      	adds	r3, #7
 800344a:	10db      	asrs	r3, r3, #3
 800344c:	461a      	mov	r2, r3
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	4413      	add	r3, r2
 8003458:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800345a:	8a3b      	ldrh	r3, [r7, #16]
 800345c:	3307      	adds	r3, #7
 800345e:	2b00      	cmp	r3, #0
 8003460:	da00      	bge.n	8003464 <DrawChar+0x90>
 8003462:	3307      	adds	r3, #7
 8003464:	10db      	asrs	r3, r3, #3
 8003466:	2b01      	cmp	r3, #1
 8003468:	d002      	beq.n	8003470 <DrawChar+0x9c>
 800346a:	2b02      	cmp	r3, #2
 800346c:	d004      	beq.n	8003478 <DrawChar+0xa4>
 800346e:	e00c      	b.n	800348a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	617b      	str	r3, [r7, #20]
      break;
 8003476:	e016      	b.n	80034a6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	3201      	adds	r2, #1
 8003482:	7812      	ldrb	r2, [r2, #0]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
      break;
 8003488:	e00d      	b.n	80034a6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	041a      	lsls	r2, r3, #16
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	3301      	adds	r3, #1
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	4313      	orrs	r3, r2
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	3202      	adds	r2, #2
 800349e:	7812      	ldrb	r2, [r2, #0]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
      break;
 80034a4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	e036      	b.n	800351a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80034ac:	8a3a      	ldrh	r2, [r7, #16]
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	1ad2      	subs	r2, r2, r3
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	4413      	add	r3, r2
 80034b6:	3b01      	subs	r3, #1
 80034b8:	2201      	movs	r2, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d012      	beq.n	80034ee <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	4413      	add	r3, r2
 80034d0:	b298      	uxth	r0, r3
 80034d2:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <DrawChar+0x16c>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	491b      	ldr	r1, [pc, #108]	; (8003544 <DrawChar+0x170>)
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	88bb      	ldrh	r3, [r7, #4]
 80034e6:	4619      	mov	r1, r3
 80034e8:	f7ff ff4e 	bl	8003388 <BSP_LCD_DrawPixel>
 80034ec:	e012      	b.n	8003514 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	4413      	add	r3, r2
 80034f6:	b298      	uxth	r0, r3
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <DrawChar+0x16c>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4911      	ldr	r1, [pc, #68]	; (8003544 <DrawChar+0x170>)
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	3304      	adds	r3, #4
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	88bb      	ldrh	r3, [r7, #4]
 800350e:	4619      	mov	r1, r3
 8003510:	f7ff ff3a 	bl	8003388 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	3301      	adds	r3, #1
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	8a3b      	ldrh	r3, [r7, #16]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	429a      	cmp	r2, r3
 8003520:	d3c4      	bcc.n	80034ac <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003522:	88bb      	ldrh	r3, [r7, #4]
 8003524:	3301      	adds	r3, #1
 8003526:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	3301      	adds	r3, #1
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	8a7b      	ldrh	r3, [r7, #18]
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	429a      	cmp	r2, r3
 8003534:	d384      	bcc.n	8003440 <DrawChar+0x6c>
  }
}
 8003536:	bf00      	nop
 8003538:	bf00      	nop
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20000e34 	.word	0x20000e34
 8003544:	20000e38 	.word	0x20000e38

08003548 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003556:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <FillBuffer+0x68>)
 8003558:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800355c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <FillBuffer+0x68>)
 8003560:	2200      	movs	r2, #0
 8003562:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003564:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <FillBuffer+0x68>)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800356a:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <FillBuffer+0x68>)
 800356c:	4a11      	ldr	r2, [pc, #68]	; (80035b4 <FillBuffer+0x6c>)
 800356e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003570:	480f      	ldr	r0, [pc, #60]	; (80035b0 <FillBuffer+0x68>)
 8003572:	f000 fd0d 	bl	8003f90 <HAL_DMA2D_Init>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d115      	bne.n	80035a8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800357c:	68f9      	ldr	r1, [r7, #12]
 800357e:	480c      	ldr	r0, [pc, #48]	; (80035b0 <FillBuffer+0x68>)
 8003580:	f000 ff74 	bl	800446c <HAL_DMA2D_ConfigLayer>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10e      	bne.n	80035a8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69f9      	ldr	r1, [r7, #28]
 8003594:	4806      	ldr	r0, [pc, #24]	; (80035b0 <FillBuffer+0x68>)
 8003596:	f000 fd44 	bl	8004022 <HAL_DMA2D_Start>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d103      	bne.n	80035a8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80035a0:	210a      	movs	r1, #10
 80035a2:	4803      	ldr	r0, [pc, #12]	; (80035b0 <FillBuffer+0x68>)
 80035a4:	f000 fd68 	bl	8004078 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80035a8:	bf00      	nop
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20000dc4 	.word	0x20000dc4
 80035b4:	4002b000 	.word	0x4002b000

080035b8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80035bc:	4b29      	ldr	r3, [pc, #164]	; (8003664 <BSP_SDRAM_Init+0xac>)
 80035be:	4a2a      	ldr	r2, [pc, #168]	; (8003668 <BSP_SDRAM_Init+0xb0>)
 80035c0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <BSP_SDRAM_Init+0xb4>)
 80035c4:	2202      	movs	r2, #2
 80035c6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80035c8:	4b28      	ldr	r3, [pc, #160]	; (800366c <BSP_SDRAM_Init+0xb4>)
 80035ca:	2207      	movs	r2, #7
 80035cc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80035ce:	4b27      	ldr	r3, [pc, #156]	; (800366c <BSP_SDRAM_Init+0xb4>)
 80035d0:	2204      	movs	r2, #4
 80035d2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80035d4:	4b25      	ldr	r3, [pc, #148]	; (800366c <BSP_SDRAM_Init+0xb4>)
 80035d6:	2207      	movs	r2, #7
 80035d8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80035da:	4b24      	ldr	r3, [pc, #144]	; (800366c <BSP_SDRAM_Init+0xb4>)
 80035dc:	2202      	movs	r2, #2
 80035de:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80035e0:	4b22      	ldr	r3, [pc, #136]	; (800366c <BSP_SDRAM_Init+0xb4>)
 80035e2:	2202      	movs	r2, #2
 80035e4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <BSP_SDRAM_Init+0xb4>)
 80035e8:	2202      	movs	r2, #2
 80035ea:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80035ec:	4b1d      	ldr	r3, [pc, #116]	; (8003664 <BSP_SDRAM_Init+0xac>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80035f2:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <BSP_SDRAM_Init+0xac>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80035f8:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <BSP_SDRAM_Init+0xac>)
 80035fa:	2204      	movs	r2, #4
 80035fc:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80035fe:	4b19      	ldr	r3, [pc, #100]	; (8003664 <BSP_SDRAM_Init+0xac>)
 8003600:	2210      	movs	r2, #16
 8003602:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003604:	4b17      	ldr	r3, [pc, #92]	; (8003664 <BSP_SDRAM_Init+0xac>)
 8003606:	2240      	movs	r2, #64	; 0x40
 8003608:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800360a:	4b16      	ldr	r3, [pc, #88]	; (8003664 <BSP_SDRAM_Init+0xac>)
 800360c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003610:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003612:	4b14      	ldr	r3, [pc, #80]	; (8003664 <BSP_SDRAM_Init+0xac>)
 8003614:	2200      	movs	r2, #0
 8003616:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003618:	4b12      	ldr	r3, [pc, #72]	; (8003664 <BSP_SDRAM_Init+0xac>)
 800361a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800361e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003620:	4b10      	ldr	r3, [pc, #64]	; (8003664 <BSP_SDRAM_Init+0xac>)
 8003622:	2200      	movs	r2, #0
 8003624:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <BSP_SDRAM_Init+0xac>)
 8003628:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800362c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800362e:	2100      	movs	r1, #0
 8003630:	480c      	ldr	r0, [pc, #48]	; (8003664 <BSP_SDRAM_Init+0xac>)
 8003632:	f000 f87f 	bl	8003734 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003636:	490d      	ldr	r1, [pc, #52]	; (800366c <BSP_SDRAM_Init+0xb4>)
 8003638:	480a      	ldr	r0, [pc, #40]	; (8003664 <BSP_SDRAM_Init+0xac>)
 800363a:	f004 fafd 	bl	8007c38 <HAL_SDRAM_Init>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003644:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <BSP_SDRAM_Init+0xb8>)
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	e002      	b.n	8003652 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <BSP_SDRAM_Init+0xb8>)
 800364e:	2200      	movs	r2, #0
 8003650:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003652:	f240 506a 	movw	r0, #1386	; 0x56a
 8003656:	f000 f80d 	bl	8003674 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <BSP_SDRAM_Init+0xb8>)
 800365c:	781b      	ldrb	r3, [r3, #0]
}
 800365e:	4618      	mov	r0, r3
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000e54 	.word	0x20000e54
 8003668:	a0000140 	.word	0xa0000140
 800366c:	20000e88 	.word	0x20000e88
 8003670:	20000060 	.word	0x20000060

08003674 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003680:	4b2a      	ldr	r3, [pc, #168]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003686:	4b29      	ldr	r3, [pc, #164]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003688:	2208      	movs	r2, #8
 800368a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800368c:	4b27      	ldr	r3, [pc, #156]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800368e:	2201      	movs	r2, #1
 8003690:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003692:	4b26      	ldr	r3, [pc, #152]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003694:	2200      	movs	r2, #0
 8003696:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800369c:	4923      	ldr	r1, [pc, #140]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800369e:	4824      	ldr	r0, [pc, #144]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036a0:	f004 fafe 	bl	8007ca0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80036a4:	2001      	movs	r0, #1
 80036a6:	f000 f993 	bl	80039d0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80036aa:	4b20      	ldr	r3, [pc, #128]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036ac:	2202      	movs	r2, #2
 80036ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80036b0:	4b1e      	ldr	r3, [pc, #120]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036b2:	2208      	movs	r2, #8
 80036b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80036b6:	4b1d      	ldr	r3, [pc, #116]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036be:	2200      	movs	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80036c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036c6:	4919      	ldr	r1, [pc, #100]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036c8:	4819      	ldr	r0, [pc, #100]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036ca:	f004 fae9 	bl	8007ca0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80036ce:	4b17      	ldr	r3, [pc, #92]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036d0:	2203      	movs	r2, #3
 80036d2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80036d4:	4b15      	ldr	r3, [pc, #84]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036d6:	2208      	movs	r2, #8
 80036d8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036dc:	2204      	movs	r2, #4
 80036de:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80036e0:	4b12      	ldr	r3, [pc, #72]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80036e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036ea:	4910      	ldr	r1, [pc, #64]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036ec:	4810      	ldr	r0, [pc, #64]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036ee:	f004 fad7 	bl	8007ca0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80036f2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80036f6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036fa:	2204      	movs	r2, #4
 80036fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80036fe:	4b0b      	ldr	r3, [pc, #44]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003700:	2208      	movs	r2, #8
 8003702:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003706:	2201      	movs	r2, #1
 8003708:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4a07      	ldr	r2, [pc, #28]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800370e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003714:	4905      	ldr	r1, [pc, #20]	; (800372c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003716:	4806      	ldr	r0, [pc, #24]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003718:	f004 fac2 	bl	8007ca0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4804      	ldr	r0, [pc, #16]	; (8003730 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003720:	f004 faf3 	bl	8007d0a <HAL_SDRAM_ProgramRefreshRate>
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000ea4 	.word	0x20000ea4
 8003730:	20000e54 	.word	0x20000e54

08003734 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b090      	sub	sp, #64	; 0x40
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80ec 	beq.w	800391e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
 800374a:	4b77      	ldr	r3, [pc, #476]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	4a76      	ldr	r2, [pc, #472]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6393      	str	r3, [r2, #56]	; 0x38
 8003756:	4b74      	ldr	r3, [pc, #464]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
 8003766:	4b70      	ldr	r3, [pc, #448]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	4a6f      	ldr	r2, [pc, #444]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 800376c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003770:	6313      	str	r3, [r2, #48]	; 0x30
 8003772:	4b6d      	ldr	r3, [pc, #436]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	623b      	str	r3, [r7, #32]
 8003782:	4b69      	ldr	r3, [pc, #420]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	4a68      	ldr	r2, [pc, #416]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 8003788:	f043 0302 	orr.w	r3, r3, #2
 800378c:	6313      	str	r3, [r2, #48]	; 0x30
 800378e:	4b66      	ldr	r3, [pc, #408]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	623b      	str	r3, [r7, #32]
 8003798:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
 800379e:	4b62      	ldr	r3, [pc, #392]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	4a61      	ldr	r2, [pc, #388]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 80037a4:	f043 0304 	orr.w	r3, r3, #4
 80037a8:	6313      	str	r3, [r2, #48]	; 0x30
 80037aa:	4b5f      	ldr	r3, [pc, #380]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	4b5b      	ldr	r3, [pc, #364]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a5a      	ldr	r2, [pc, #360]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 80037c0:	f043 0308 	orr.w	r3, r3, #8
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b58      	ldr	r3, [pc, #352]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	61bb      	str	r3, [r7, #24]
 80037d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	4b54      	ldr	r3, [pc, #336]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	4a53      	ldr	r2, [pc, #332]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 80037dc:	f043 0310 	orr.w	r3, r3, #16
 80037e0:	6313      	str	r3, [r2, #48]	; 0x30
 80037e2:	4b51      	ldr	r3, [pc, #324]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	4b4d      	ldr	r3, [pc, #308]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a4c      	ldr	r2, [pc, #304]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 80037f8:	f043 0320 	orr.w	r3, r3, #32
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	4b46      	ldr	r3, [pc, #280]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	4a45      	ldr	r2, [pc, #276]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 8003814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003818:	6313      	str	r3, [r2, #48]	; 0x30
 800381a:	4b43      	ldr	r3, [pc, #268]	; (8003928 <BSP_SDRAM_MspInit+0x1f4>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003826:	2302      	movs	r3, #2
 8003828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800382a:	2302      	movs	r3, #2
 800382c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003832:	230c      	movs	r3, #12
 8003834:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003836:	2360      	movs	r3, #96	; 0x60
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800383a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800383e:	4619      	mov	r1, r3
 8003840:	483a      	ldr	r0, [pc, #232]	; (800392c <BSP_SDRAM_MspInit+0x1f8>)
 8003842:	f000 ff41 	bl	80046c8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003846:	2301      	movs	r3, #1
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800384a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800384e:	4619      	mov	r1, r3
 8003850:	4837      	ldr	r0, [pc, #220]	; (8003930 <BSP_SDRAM_MspInit+0x1fc>)
 8003852:	f000 ff39 	bl	80046c8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003856:	f24c 7303 	movw	r3, #50947	; 0xc703
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800385c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003860:	4619      	mov	r1, r3
 8003862:	4834      	ldr	r0, [pc, #208]	; (8003934 <BSP_SDRAM_MspInit+0x200>)
 8003864:	f000 ff30 	bl	80046c8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003868:	f64f 7383 	movw	r3, #65411	; 0xff83
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800386e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003872:	4619      	mov	r1, r3
 8003874:	4830      	ldr	r0, [pc, #192]	; (8003938 <BSP_SDRAM_MspInit+0x204>)
 8003876:	f000 ff27 	bl	80046c8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800387a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003884:	4619      	mov	r1, r3
 8003886:	482d      	ldr	r0, [pc, #180]	; (800393c <BSP_SDRAM_MspInit+0x208>)
 8003888:	f000 ff1e 	bl	80046c8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800388c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003896:	4619      	mov	r1, r3
 8003898:	4829      	ldr	r0, [pc, #164]	; (8003940 <BSP_SDRAM_MspInit+0x20c>)
 800389a:	f000 ff15 	bl	80046c8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800389e:	4b29      	ldr	r3, [pc, #164]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80038a4:	4b27      	ldr	r3, [pc, #156]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038a6:	2280      	movs	r2, #128	; 0x80
 80038a8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80038aa:	4b26      	ldr	r3, [pc, #152]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038b0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80038b2:	4b24      	ldr	r3, [pc, #144]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038b8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038ba:	4b22      	ldr	r3, [pc, #136]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038c0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80038c2:	4b20      	ldr	r3, [pc, #128]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038c8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80038ca:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80038d0:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038d6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038da:	2200      	movs	r2, #0
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80038de:	4b19      	ldr	r3, [pc, #100]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038e0:	2203      	movs	r2, #3
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80038e4:	4b17      	ldr	r3, [pc, #92]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80038ea:	4b16      	ldr	r3, [pc, #88]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80038f0:	4b14      	ldr	r3, [pc, #80]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038f2:	4a15      	ldr	r2, [pc, #84]	; (8003948 <BSP_SDRAM_MspInit+0x214>)
 80038f4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a12      	ldr	r2, [pc, #72]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
 80038fc:	4a11      	ldr	r2, [pc, #68]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003902:	4810      	ldr	r0, [pc, #64]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 8003904:	f000 fa34 	bl	8003d70 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003908:	480e      	ldr	r0, [pc, #56]	; (8003944 <BSP_SDRAM_MspInit+0x210>)
 800390a:	f000 f983 	bl	8003c14 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800390e:	2200      	movs	r2, #0
 8003910:	210f      	movs	r1, #15
 8003912:	2038      	movs	r0, #56	; 0x38
 8003914:	f000 f938 	bl	8003b88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003918:	2038      	movs	r0, #56	; 0x38
 800391a:	f000 f951 	bl	8003bc0 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800391e:	bf00      	nop
 8003920:	3740      	adds	r7, #64	; 0x40
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40023800 	.word	0x40023800
 800392c:	40020400 	.word	0x40020400
 8003930:	40020800 	.word	0x40020800
 8003934:	40020c00 	.word	0x40020c00
 8003938:	40021000 	.word	0x40021000
 800393c:	40021400 	.word	0x40021400
 8003940:	40021800 	.word	0x40021800
 8003944:	20000eb4 	.word	0x20000eb4
 8003948:	40026410 	.word	0x40026410

0800394c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003950:	4b0e      	ldr	r3, [pc, #56]	; (800398c <HAL_Init+0x40>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a0d      	ldr	r2, [pc, #52]	; (800398c <HAL_Init+0x40>)
 8003956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800395a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_Init+0x40>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0a      	ldr	r2, [pc, #40]	; (800398c <HAL_Init+0x40>)
 8003962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003968:	4b08      	ldr	r3, [pc, #32]	; (800398c <HAL_Init+0x40>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a07      	ldr	r2, [pc, #28]	; (800398c <HAL_Init+0x40>)
 800396e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003974:	2003      	movs	r0, #3
 8003976:	f000 f8fc 	bl	8003b72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800397a:	200f      	movs	r0, #15
 800397c:	f7fe fd12 	bl	80023a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003980:	f7fe f930 	bl	8001be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40023c00 	.word	0x40023c00

08003990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <HAL_IncTick+0x20>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_IncTick+0x24>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4413      	add	r3, r2
 80039a0:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <HAL_IncTick+0x24>)
 80039a2:	6013      	str	r3, [r2, #0]
}
 80039a4:	bf00      	nop
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000068 	.word	0x20000068
 80039b4:	20000f14 	.word	0x20000f14

080039b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return uwTick;
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <HAL_GetTick+0x14>)
 80039be:	681b      	ldr	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000f14 	.word	0x20000f14

080039d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039d8:	f7ff ffee 	bl	80039b8 <HAL_GetTick>
 80039dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d005      	beq.n	80039f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ea:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <HAL_Delay+0x44>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039f6:	bf00      	nop
 80039f8:	f7ff ffde 	bl	80039b8 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d8f7      	bhi.n	80039f8 <HAL_Delay+0x28>
  {
  }
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000068 	.word	0x20000068

08003a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <__NVIC_SetPriorityGrouping+0x44>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a34:	4013      	ands	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a4a:	4a04      	ldr	r2, [pc, #16]	; (8003a5c <__NVIC_SetPriorityGrouping+0x44>)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	60d3      	str	r3, [r2, #12]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <__NVIC_GetPriorityGrouping+0x18>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	f003 0307 	and.w	r3, r3, #7
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	db0b      	blt.n	8003aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	f003 021f 	and.w	r2, r3, #31
 8003a94:	4907      	ldr	r1, [pc, #28]	; (8003ab4 <__NVIC_EnableIRQ+0x38>)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000e100 	.word	0xe000e100

08003ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	6039      	str	r1, [r7, #0]
 8003ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	db0a      	blt.n	8003ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	490c      	ldr	r1, [pc, #48]	; (8003b04 <__NVIC_SetPriority+0x4c>)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	0112      	lsls	r2, r2, #4
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	440b      	add	r3, r1
 8003adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae0:	e00a      	b.n	8003af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	4908      	ldr	r1, [pc, #32]	; (8003b08 <__NVIC_SetPriority+0x50>)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	3b04      	subs	r3, #4
 8003af0:	0112      	lsls	r2, r2, #4
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	440b      	add	r3, r1
 8003af6:	761a      	strb	r2, [r3, #24]
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000e100 	.word	0xe000e100
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b089      	sub	sp, #36	; 0x24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f1c3 0307 	rsb	r3, r3, #7
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	bf28      	it	cs
 8003b2a:	2304      	movcs	r3, #4
 8003b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2b06      	cmp	r3, #6
 8003b34:	d902      	bls.n	8003b3c <NVIC_EncodePriority+0x30>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3b03      	subs	r3, #3
 8003b3a:	e000      	b.n	8003b3e <NVIC_EncodePriority+0x32>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b40:	f04f 32ff 	mov.w	r2, #4294967295
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	401a      	ands	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b54:	f04f 31ff 	mov.w	r1, #4294967295
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5e:	43d9      	mvns	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b64:	4313      	orrs	r3, r2
         );
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3724      	adds	r7, #36	; 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b082      	sub	sp, #8
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff ff4c 	bl	8003a18 <__NVIC_SetPriorityGrouping>
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b9a:	f7ff ff61 	bl	8003a60 <__NVIC_GetPriorityGrouping>
 8003b9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	6978      	ldr	r0, [r7, #20]
 8003ba6:	f7ff ffb1 	bl	8003b0c <NVIC_EncodePriority>
 8003baa:	4602      	mov	r2, r0
 8003bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff ff80 	bl	8003ab8 <__NVIC_SetPriority>
}
 8003bb8:	bf00      	nop
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff ff54 	bl	8003a7c <__NVIC_EnableIRQ>
}
 8003bd4:	bf00      	nop
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e00e      	b.n	8003c0c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	795b      	ldrb	r3, [r3, #5]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fe f818 	bl	8001c34 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c20:	f7ff feca 	bl	80039b8 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e099      	b.n	8003d64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0201 	bic.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c50:	e00f      	b.n	8003c72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c52:	f7ff feb1 	bl	80039b8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b05      	cmp	r3, #5
 8003c5e:	d908      	bls.n	8003c72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2203      	movs	r2, #3
 8003c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e078      	b.n	8003d64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e8      	bne.n	8003c52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4b38      	ldr	r3, [pc, #224]	; (8003d6c <HAL_DMA_Init+0x158>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d107      	bne.n	8003cdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 0307 	bic.w	r3, r3, #7
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d117      	bne.n	8003d36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00e      	beq.n	8003d36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f8bd 	bl	8003e98 <DMA_CheckFifoParam>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2240      	movs	r2, #64	; 0x40
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d32:	2301      	movs	r3, #1
 8003d34:	e016      	b.n	8003d64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f874 	bl	8003e2c <DMA_CalcBaseAndBitshift>
 8003d44:	4603      	mov	r3, r0
 8003d46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4c:	223f      	movs	r2, #63	; 0x3f
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	f010803f 	.word	0xf010803f

08003d70 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e050      	b.n	8003e24 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d101      	bne.n	8003d92 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e048      	b.n	8003e24 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0201 	bic.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2200      	movs	r2, #0
 8003db0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2221      	movs	r2, #33	; 0x21
 8003dd0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f82a 	bl	8003e2c <DMA_CalcBaseAndBitshift>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e04:	223f      	movs	r2, #63	; 0x3f
 8003e06:	409a      	lsls	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	3b10      	subs	r3, #16
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <DMA_CalcBaseAndBitshift+0x64>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e46:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <DMA_CalcBaseAndBitshift+0x68>)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d909      	bls.n	8003e6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	1d1a      	adds	r2, r3, #4
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e6c:	e007      	b.n	8003e7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e76:	f023 0303 	bic.w	r3, r3, #3
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	aaaaaaab 	.word	0xaaaaaaab
 8003e94:	08010620 	.word	0x08010620

08003e98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d11f      	bne.n	8003ef2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d856      	bhi.n	8003f66 <DMA_CheckFifoParam+0xce>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <DMA_CheckFifoParam+0x28>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ed1 	.word	0x08003ed1
 8003ec4:	08003ee3 	.word	0x08003ee3
 8003ec8:	08003ed1 	.word	0x08003ed1
 8003ecc:	08003f67 	.word	0x08003f67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d046      	beq.n	8003f6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee0:	e043      	b.n	8003f6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003eea:	d140      	bne.n	8003f6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef0:	e03d      	b.n	8003f6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efa:	d121      	bne.n	8003f40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d837      	bhi.n	8003f72 <DMA_CheckFifoParam+0xda>
 8003f02:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <DMA_CheckFifoParam+0x70>)
 8003f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f08:	08003f19 	.word	0x08003f19
 8003f0c:	08003f1f 	.word	0x08003f1f
 8003f10:	08003f19 	.word	0x08003f19
 8003f14:	08003f31 	.word	0x08003f31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f1c:	e030      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d025      	beq.n	8003f76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f2e:	e022      	b.n	8003f76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f38:	d11f      	bne.n	8003f7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f3e:	e01c      	b.n	8003f7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d903      	bls.n	8003f4e <DMA_CheckFifoParam+0xb6>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d003      	beq.n	8003f54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f4c:	e018      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
      break;
 8003f52:	e015      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00e      	beq.n	8003f7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
      break;
 8003f64:	e00b      	b.n	8003f7e <DMA_CheckFifoParam+0xe6>
      break;
 8003f66:	bf00      	nop
 8003f68:	e00a      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e008      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e006      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f72:	bf00      	nop
 8003f74:	e004      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f76:	bf00      	nop
 8003f78:	e002      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f7e:	bf00      	nop
    }
  } 
  
  return status; 
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop

08003f90 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e03b      	b.n	800401a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd fe5e 	bl	8001c78 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe0:	f023 0107 	bic.w	r1, r3, #7
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ffa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68d1      	ldr	r1, [r2, #12]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	430b      	orrs	r3, r1
 8004008:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b086      	sub	sp, #24
 8004026:	af02      	add	r7, sp, #8
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_DMA2D_Start+0x1c>
 800403a:	2302      	movs	r3, #2
 800403c:	e018      	b.n	8004070 <HAL_DMA2D_Start+0x4e>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2202      	movs	r2, #2
 800404a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fa99 	bl	8004590 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d056      	beq.n	8004142 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004094:	f7ff fc90 	bl	80039b8 <HAL_GetTick>
 8004098:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800409a:	e04b      	b.n	8004134 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d023      	beq.n	80040f6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040bc:	f043 0202 	orr.w	r2, r3, #2
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d2:	f043 0201 	orr.w	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2221      	movs	r2, #33	; 0x21
 80040e0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2204      	movs	r2, #4
 80040e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0a5      	b.n	8004242 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d01a      	beq.n	8004134 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040fe:	f7ff fc5b 	bl	80039b8 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <HAL_DMA2D_PollForTransfer+0x9c>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10f      	bne.n	8004134 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	f043 0220 	orr.w	r2, r3, #32
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2203      	movs	r2, #3
 8004124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e086      	b.n	8004242 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0ac      	beq.n	800409c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d061      	beq.n	8004228 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004164:	f7ff fc28 	bl	80039b8 <HAL_GetTick>
 8004168:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800416a:	e056      	b.n	800421a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800417a:	2b00      	cmp	r3, #0
 800417c:	d02e      	beq.n	80041dc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418c:	f043 0204 	orr.w	r2, r3, #4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	2b00      	cmp	r3, #0
 800419c:	d005      	beq.n	80041aa <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a2:	f043 0202 	orr.w	r2, r3, #2
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	f043 0201 	orr.w	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2229      	movs	r2, #41	; 0x29
 80041c6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2204      	movs	r2, #4
 80041cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e032      	b.n	8004242 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e2:	d01a      	beq.n	800421a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041e4:	f7ff fbe8 	bl	80039b8 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d302      	bcc.n	80041fa <HAL_DMA2D_PollForTransfer+0x182>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10f      	bne.n	800421a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	f043 0220 	orr.w	r2, r3, #32
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2203      	movs	r2, #3
 800420a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e013      	b.n	8004242 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0a1      	beq.n	800416c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2212      	movs	r2, #18
 800422e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d026      	beq.n	80042ba <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004272:	2b00      	cmp	r3, #0
 8004274:	d021      	beq.n	80042ba <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004284:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	f043 0201 	orr.w	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2201      	movs	r2, #1
 8004298:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2204      	movs	r2, #4
 800429e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d026      	beq.n	8004312 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d021      	beq.n	8004312 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042dc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2220      	movs	r2, #32
 80042e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	f043 0202 	orr.w	r2, r3, #2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2204      	movs	r2, #4
 80042f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d026      	beq.n	800436a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004322:	2b00      	cmp	r3, #0
 8004324:	d021      	beq.n	800436a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004334:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	2208      	movs	r2, #8
 800433c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004342:	f043 0204 	orr.w	r2, r3, #4
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2204      	movs	r2, #4
 800434e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00e      	beq.n	800439c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2204      	movs	r2, #4
 8004394:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f853 	bl	8004442 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d024      	beq.n	80043f0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01f      	beq.n	80043f0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043be:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2202      	movs	r2, #2
 80043c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01f      	beq.n	800443a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01a      	beq.n	800443a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004412:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2210      	movs	r2, #16
 800441a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f80e 	bl	8004456 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
	...

0800446c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_DMA2D_ConfigLayer+0x20>
 8004488:	2302      	movs	r3, #2
 800448a:	e079      	b.n	8004580 <HAL_DMA2D_ConfigLayer+0x114>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	3318      	adds	r3, #24
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	4413      	add	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	041b      	lsls	r3, r3, #16
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80044b6:	4b35      	ldr	r3, [pc, #212]	; (800458c <HAL_DMA2D_ConfigLayer+0x120>)
 80044b8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b0a      	cmp	r3, #10
 80044c0:	d003      	beq.n	80044ca <HAL_DMA2D_ConfigLayer+0x5e>
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b09      	cmp	r3, #9
 80044c8:	d107      	bne.n	80044da <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	e005      	b.n	80044e6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	061b      	lsls	r3, r3, #24
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d120      	bne.n	800452e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	43db      	mvns	r3, r3
 80044f6:	ea02 0103 	and.w	r1, r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	430a      	orrs	r2, r1
 8004502:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	6812      	ldr	r2, [r2, #0]
 800450c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b0a      	cmp	r3, #10
 8004514:	d003      	beq.n	800451e <HAL_DMA2D_ConfigLayer+0xb2>
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b09      	cmp	r3, #9
 800451c:	d127      	bne.n	800456e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800452a:	629a      	str	r2, [r3, #40]	; 0x28
 800452c:	e01f      	b.n	800456e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69da      	ldr	r2, [r3, #28]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	43db      	mvns	r3, r3
 8004538:	ea02 0103 	and.w	r1, r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	430a      	orrs	r2, r1
 8004544:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b0a      	cmp	r3, #10
 8004556:	d003      	beq.n	8004560 <HAL_DMA2D_ConfigLayer+0xf4>
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b09      	cmp	r3, #9
 800455e:	d106      	bne.n	800456e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800456c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	ff03000f 	.word	0xff03000f

08004590 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004590:	b480      	push	{r7}
 8004592:	b08b      	sub	sp, #44	; 0x2c
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	041a      	lsls	r2, r3, #16
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	431a      	orrs	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045c8:	d174      	bne.n	80046b4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80045d0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045d8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80045e0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d108      	bne.n	8004602 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004600:	e053      	b.n	80046aa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d106      	bne.n	8004618 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4313      	orrs	r3, r2
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
 8004616:	e048      	b.n	80046aa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d111      	bne.n	8004644 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	0cdb      	lsrs	r3, r3, #19
 8004624:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	0a9b      	lsrs	r3, r3, #10
 800462a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	08db      	lsrs	r3, r3, #3
 8004630:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	02db      	lsls	r3, r3, #11
 800463a:	4313      	orrs	r3, r2
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
 8004642:	e032      	b.n	80046aa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d117      	bne.n	800467c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	0fdb      	lsrs	r3, r3, #31
 8004650:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	0cdb      	lsrs	r3, r3, #19
 8004656:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	0adb      	lsrs	r3, r3, #11
 800465c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	08db      	lsrs	r3, r3, #3
 8004662:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	029b      	lsls	r3, r3, #10
 800466c:	431a      	orrs	r2, r3
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	03db      	lsls	r3, r3, #15
 8004672:	4313      	orrs	r3, r2
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
 800467a:	e016      	b.n	80046aa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	0f1b      	lsrs	r3, r3, #28
 8004680:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	0d1b      	lsrs	r3, r3, #20
 8004686:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	0b1b      	lsrs	r3, r3, #12
 800468c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	011a      	lsls	r2, r3, #4
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	431a      	orrs	r2, r3
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	031b      	lsls	r3, r3, #12
 80046a2:	4313      	orrs	r3, r2
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80046b2:	e003      	b.n	80046bc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	60da      	str	r2, [r3, #12]
}
 80046bc:	bf00      	nop
 80046be:	372c      	adds	r7, #44	; 0x2c
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b089      	sub	sp, #36	; 0x24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	e177      	b.n	80049d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046e4:	2201      	movs	r2, #1
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4013      	ands	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	f040 8166 	bne.w	80049ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	2b01      	cmp	r3, #1
 800470c:	d005      	beq.n	800471a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004716:	2b02      	cmp	r3, #2
 8004718:	d130      	bne.n	800477c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	2203      	movs	r2, #3
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4313      	orrs	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004750:	2201      	movs	r2, #1
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 0201 	and.w	r2, r3, #1
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	2b03      	cmp	r3, #3
 8004786:	d017      	beq.n	80047b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	2203      	movs	r2, #3
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	43db      	mvns	r3, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4013      	ands	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d123      	bne.n	800480c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	08da      	lsrs	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3208      	adds	r2, #8
 80047cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	220f      	movs	r2, #15
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	08da      	lsrs	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3208      	adds	r2, #8
 8004806:	69b9      	ldr	r1, [r7, #24]
 8004808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	2203      	movs	r2, #3
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4013      	ands	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 0203 	and.w	r2, r3, #3
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4313      	orrs	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80c0 	beq.w	80049ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	4b66      	ldr	r3, [pc, #408]	; (80049ec <HAL_GPIO_Init+0x324>)
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	4a65      	ldr	r2, [pc, #404]	; (80049ec <HAL_GPIO_Init+0x324>)
 8004858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800485c:	6453      	str	r3, [r2, #68]	; 0x44
 800485e:	4b63      	ldr	r3, [pc, #396]	; (80049ec <HAL_GPIO_Init+0x324>)
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800486a:	4a61      	ldr	r2, [pc, #388]	; (80049f0 <HAL_GPIO_Init+0x328>)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	089b      	lsrs	r3, r3, #2
 8004870:	3302      	adds	r3, #2
 8004872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	220f      	movs	r2, #15
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a58      	ldr	r2, [pc, #352]	; (80049f4 <HAL_GPIO_Init+0x32c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d037      	beq.n	8004906 <HAL_GPIO_Init+0x23e>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a57      	ldr	r2, [pc, #348]	; (80049f8 <HAL_GPIO_Init+0x330>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d031      	beq.n	8004902 <HAL_GPIO_Init+0x23a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a56      	ldr	r2, [pc, #344]	; (80049fc <HAL_GPIO_Init+0x334>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d02b      	beq.n	80048fe <HAL_GPIO_Init+0x236>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a55      	ldr	r2, [pc, #340]	; (8004a00 <HAL_GPIO_Init+0x338>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d025      	beq.n	80048fa <HAL_GPIO_Init+0x232>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a54      	ldr	r2, [pc, #336]	; (8004a04 <HAL_GPIO_Init+0x33c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d01f      	beq.n	80048f6 <HAL_GPIO_Init+0x22e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a53      	ldr	r2, [pc, #332]	; (8004a08 <HAL_GPIO_Init+0x340>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d019      	beq.n	80048f2 <HAL_GPIO_Init+0x22a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a52      	ldr	r2, [pc, #328]	; (8004a0c <HAL_GPIO_Init+0x344>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <HAL_GPIO_Init+0x226>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a51      	ldr	r2, [pc, #324]	; (8004a10 <HAL_GPIO_Init+0x348>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00d      	beq.n	80048ea <HAL_GPIO_Init+0x222>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a50      	ldr	r2, [pc, #320]	; (8004a14 <HAL_GPIO_Init+0x34c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d007      	beq.n	80048e6 <HAL_GPIO_Init+0x21e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a4f      	ldr	r2, [pc, #316]	; (8004a18 <HAL_GPIO_Init+0x350>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d101      	bne.n	80048e2 <HAL_GPIO_Init+0x21a>
 80048de:	2309      	movs	r3, #9
 80048e0:	e012      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048e2:	230a      	movs	r3, #10
 80048e4:	e010      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048e6:	2308      	movs	r3, #8
 80048e8:	e00e      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048ea:	2307      	movs	r3, #7
 80048ec:	e00c      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048ee:	2306      	movs	r3, #6
 80048f0:	e00a      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048f2:	2305      	movs	r3, #5
 80048f4:	e008      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048f6:	2304      	movs	r3, #4
 80048f8:	e006      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048fa:	2303      	movs	r3, #3
 80048fc:	e004      	b.n	8004908 <HAL_GPIO_Init+0x240>
 80048fe:	2302      	movs	r3, #2
 8004900:	e002      	b.n	8004908 <HAL_GPIO_Init+0x240>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <HAL_GPIO_Init+0x240>
 8004906:	2300      	movs	r3, #0
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	f002 0203 	and.w	r2, r2, #3
 800490e:	0092      	lsls	r2, r2, #2
 8004910:	4093      	lsls	r3, r2
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004918:	4935      	ldr	r1, [pc, #212]	; (80049f0 <HAL_GPIO_Init+0x328>)
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	089b      	lsrs	r3, r3, #2
 800491e:	3302      	adds	r3, #2
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004926:	4b3d      	ldr	r3, [pc, #244]	; (8004a1c <HAL_GPIO_Init+0x354>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	43db      	mvns	r3, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4013      	ands	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800494a:	4a34      	ldr	r2, [pc, #208]	; (8004a1c <HAL_GPIO_Init+0x354>)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004950:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <HAL_GPIO_Init+0x354>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	43db      	mvns	r3, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004974:	4a29      	ldr	r2, [pc, #164]	; (8004a1c <HAL_GPIO_Init+0x354>)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800497a:	4b28      	ldr	r3, [pc, #160]	; (8004a1c <HAL_GPIO_Init+0x354>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	43db      	mvns	r3, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4013      	ands	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800499e:	4a1f      	ldr	r2, [pc, #124]	; (8004a1c <HAL_GPIO_Init+0x354>)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049a4:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <HAL_GPIO_Init+0x354>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4013      	ands	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049c8:	4a14      	ldr	r2, [pc, #80]	; (8004a1c <HAL_GPIO_Init+0x354>)
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3301      	adds	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b0f      	cmp	r3, #15
 80049d8:	f67f ae84 	bls.w	80046e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	3724      	adds	r7, #36	; 0x24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40013800 	.word	0x40013800
 80049f4:	40020000 	.word	0x40020000
 80049f8:	40020400 	.word	0x40020400
 80049fc:	40020800 	.word	0x40020800
 8004a00:	40020c00 	.word	0x40020c00
 8004a04:	40021000 	.word	0x40021000
 8004a08:	40021400 	.word	0x40021400
 8004a0c:	40021800 	.word	0x40021800
 8004a10:	40021c00 	.word	0x40021c00
 8004a14:	40022000 	.word	0x40022000
 8004a18:	40022400 	.word	0x40022400
 8004a1c:	40013c00 	.word	0x40013c00

08004a20 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	e0d9      	b.n	8004bf0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	f040 80c9 	bne.w	8004bea <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004a58:	4a6b      	ldr	r2, [pc, #428]	; (8004c08 <HAL_GPIO_DeInit+0x1e8>)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	089b      	lsrs	r3, r3, #2
 8004a5e:	3302      	adds	r3, #2
 8004a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a64:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f003 0303 	and.w	r3, r3, #3
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	220f      	movs	r2, #15
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	4013      	ands	r3, r2
 8004a78:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a63      	ldr	r2, [pc, #396]	; (8004c0c <HAL_GPIO_DeInit+0x1ec>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d037      	beq.n	8004af2 <HAL_GPIO_DeInit+0xd2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a62      	ldr	r2, [pc, #392]	; (8004c10 <HAL_GPIO_DeInit+0x1f0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d031      	beq.n	8004aee <HAL_GPIO_DeInit+0xce>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a61      	ldr	r2, [pc, #388]	; (8004c14 <HAL_GPIO_DeInit+0x1f4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d02b      	beq.n	8004aea <HAL_GPIO_DeInit+0xca>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a60      	ldr	r2, [pc, #384]	; (8004c18 <HAL_GPIO_DeInit+0x1f8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d025      	beq.n	8004ae6 <HAL_GPIO_DeInit+0xc6>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a5f      	ldr	r2, [pc, #380]	; (8004c1c <HAL_GPIO_DeInit+0x1fc>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01f      	beq.n	8004ae2 <HAL_GPIO_DeInit+0xc2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a5e      	ldr	r2, [pc, #376]	; (8004c20 <HAL_GPIO_DeInit+0x200>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d019      	beq.n	8004ade <HAL_GPIO_DeInit+0xbe>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a5d      	ldr	r2, [pc, #372]	; (8004c24 <HAL_GPIO_DeInit+0x204>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d013      	beq.n	8004ada <HAL_GPIO_DeInit+0xba>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a5c      	ldr	r2, [pc, #368]	; (8004c28 <HAL_GPIO_DeInit+0x208>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d00d      	beq.n	8004ad6 <HAL_GPIO_DeInit+0xb6>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a5b      	ldr	r2, [pc, #364]	; (8004c2c <HAL_GPIO_DeInit+0x20c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d007      	beq.n	8004ad2 <HAL_GPIO_DeInit+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a5a      	ldr	r2, [pc, #360]	; (8004c30 <HAL_GPIO_DeInit+0x210>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d101      	bne.n	8004ace <HAL_GPIO_DeInit+0xae>
 8004aca:	2309      	movs	r3, #9
 8004acc:	e012      	b.n	8004af4 <HAL_GPIO_DeInit+0xd4>
 8004ace:	230a      	movs	r3, #10
 8004ad0:	e010      	b.n	8004af4 <HAL_GPIO_DeInit+0xd4>
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	e00e      	b.n	8004af4 <HAL_GPIO_DeInit+0xd4>
 8004ad6:	2307      	movs	r3, #7
 8004ad8:	e00c      	b.n	8004af4 <HAL_GPIO_DeInit+0xd4>
 8004ada:	2306      	movs	r3, #6
 8004adc:	e00a      	b.n	8004af4 <HAL_GPIO_DeInit+0xd4>
 8004ade:	2305      	movs	r3, #5
 8004ae0:	e008      	b.n	8004af4 <HAL_GPIO_DeInit+0xd4>
 8004ae2:	2304      	movs	r3, #4
 8004ae4:	e006      	b.n	8004af4 <HAL_GPIO_DeInit+0xd4>
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e004      	b.n	8004af4 <HAL_GPIO_DeInit+0xd4>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e002      	b.n	8004af4 <HAL_GPIO_DeInit+0xd4>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <HAL_GPIO_DeInit+0xd4>
 8004af2:	2300      	movs	r3, #0
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	f002 0203 	and.w	r2, r2, #3
 8004afa:	0092      	lsls	r2, r2, #2
 8004afc:	4093      	lsls	r3, r2
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d132      	bne.n	8004b6a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004b04:	4b4b      	ldr	r3, [pc, #300]	; (8004c34 <HAL_GPIO_DeInit+0x214>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	4949      	ldr	r1, [pc, #292]	; (8004c34 <HAL_GPIO_DeInit+0x214>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004b12:	4b48      	ldr	r3, [pc, #288]	; (8004c34 <HAL_GPIO_DeInit+0x214>)
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	4946      	ldr	r1, [pc, #280]	; (8004c34 <HAL_GPIO_DeInit+0x214>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004b20:	4b44      	ldr	r3, [pc, #272]	; (8004c34 <HAL_GPIO_DeInit+0x214>)
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	43db      	mvns	r3, r3
 8004b28:	4942      	ldr	r1, [pc, #264]	; (8004c34 <HAL_GPIO_DeInit+0x214>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004b2e:	4b41      	ldr	r3, [pc, #260]	; (8004c34 <HAL_GPIO_DeInit+0x214>)
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	43db      	mvns	r3, r3
 8004b36:	493f      	ldr	r1, [pc, #252]	; (8004c34 <HAL_GPIO_DeInit+0x214>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	220f      	movs	r2, #15
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004b4c:	4a2e      	ldr	r2, [pc, #184]	; (8004c08 <HAL_GPIO_DeInit+0x1e8>)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	089b      	lsrs	r3, r3, #2
 8004b52:	3302      	adds	r3, #2
 8004b54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	43da      	mvns	r2, r3
 8004b5c:	482a      	ldr	r0, [pc, #168]	; (8004c08 <HAL_GPIO_DeInit+0x1e8>)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	089b      	lsrs	r3, r3, #2
 8004b62:	400a      	ands	r2, r1
 8004b64:	3302      	adds	r3, #2
 8004b66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	2103      	movs	r1, #3
 8004b74:	fa01 f303 	lsl.w	r3, r1, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	401a      	ands	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	08da      	lsrs	r2, r3, #3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3208      	adds	r2, #8
 8004b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	220f      	movs	r2, #15
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	08d2      	lsrs	r2, r2, #3
 8004ba0:	4019      	ands	r1, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3208      	adds	r2, #8
 8004ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	2103      	movs	r1, #3
 8004bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	401a      	ands	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	401a      	ands	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	2103      	movs	r1, #3
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	401a      	ands	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	3301      	adds	r3, #1
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2b0f      	cmp	r3, #15
 8004bf4:	f67f af22 	bls.w	8004a3c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40013800 	.word	0x40013800
 8004c0c:	40020000 	.word	0x40020000
 8004c10:	40020400 	.word	0x40020400
 8004c14:	40020800 	.word	0x40020800
 8004c18:	40020c00 	.word	0x40020c00
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	40021400 	.word	0x40021400
 8004c24:	40021800 	.word	0x40021800
 8004c28:	40021c00 	.word	0x40021c00
 8004c2c:	40022000 	.word	0x40022000
 8004c30:	40022400 	.word	0x40022400
 8004c34:	40013c00 	.word	0x40013c00

08004c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	807b      	strh	r3, [r7, #2]
 8004c44:	4613      	mov	r3, r2
 8004c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c48:	787b      	ldrb	r3, [r7, #1]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c4e:	887a      	ldrh	r2, [r7, #2]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c54:	e003      	b.n	8004c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c56:	887b      	ldrh	r3, [r7, #2]
 8004c58:	041a      	lsls	r2, r3, #16
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	619a      	str	r2, [r3, #24]
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c6c:	b08f      	sub	sp, #60	; 0x3c
 8004c6e:	af0a      	add	r7, sp, #40	; 0x28
 8004c70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e054      	b.n	8004d26 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f007 fece 	bl	800ca38 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f004 fefc 	bl	8009ab8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	603b      	str	r3, [r7, #0]
 8004cc6:	687e      	ldr	r6, [r7, #4]
 8004cc8:	466d      	mov	r5, sp
 8004cca:	f106 0410 	add.w	r4, r6, #16
 8004cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cda:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cde:	1d33      	adds	r3, r6, #4
 8004ce0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ce2:	6838      	ldr	r0, [r7, #0]
 8004ce4:	f004 fe76 	bl	80099d4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f004 fef3 	bl	8009ada <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	603b      	str	r3, [r7, #0]
 8004cfa:	687e      	ldr	r6, [r7, #4]
 8004cfc:	466d      	mov	r5, sp
 8004cfe:	f106 0410 	add.w	r4, r6, #16
 8004d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d12:	1d33      	adds	r3, r6, #4
 8004d14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d16:	6838      	ldr	r0, [r7, #0]
 8004d18:	f005 f87c 	bl	8009e14 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d2e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004d2e:	b590      	push	{r4, r7, lr}
 8004d30:	b089      	sub	sp, #36	; 0x24
 8004d32:	af04      	add	r7, sp, #16
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	4608      	mov	r0, r1
 8004d38:	4611      	mov	r1, r2
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	70fb      	strb	r3, [r7, #3]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70bb      	strb	r3, [r7, #2]
 8004d44:	4613      	mov	r3, r2
 8004d46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_HCD_HC_Init+0x28>
 8004d52:	2302      	movs	r3, #2
 8004d54:	e076      	b.n	8004e44 <HAL_HCD_HC_Init+0x116>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	212c      	movs	r1, #44	; 0x2c
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	4413      	add	r3, r2
 8004d6a:	333d      	adds	r3, #61	; 0x3d
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	212c      	movs	r1, #44	; 0x2c
 8004d76:	fb01 f303 	mul.w	r3, r1, r3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3338      	adds	r3, #56	; 0x38
 8004d7e:	787a      	ldrb	r2, [r7, #1]
 8004d80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	212c      	movs	r1, #44	; 0x2c
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	3340      	adds	r3, #64	; 0x40
 8004d90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004d92:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	212c      	movs	r1, #44	; 0x2c
 8004d9a:	fb01 f303 	mul.w	r3, r1, r3
 8004d9e:	4413      	add	r3, r2
 8004da0:	3339      	adds	r3, #57	; 0x39
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	212c      	movs	r1, #44	; 0x2c
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	4413      	add	r3, r2
 8004db2:	333f      	adds	r3, #63	; 0x3f
 8004db4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004db8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	78ba      	ldrb	r2, [r7, #2]
 8004dbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dc2:	b2d0      	uxtb	r0, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	212c      	movs	r1, #44	; 0x2c
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	4413      	add	r3, r2
 8004dce:	333a      	adds	r3, #58	; 0x3a
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004dd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	da09      	bge.n	8004df0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	212c      	movs	r1, #44	; 0x2c
 8004de2:	fb01 f303 	mul.w	r3, r1, r3
 8004de6:	4413      	add	r3, r2
 8004de8:	333b      	adds	r3, #59	; 0x3b
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	e008      	b.n	8004e02 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	212c      	movs	r1, #44	; 0x2c
 8004df6:	fb01 f303 	mul.w	r3, r1, r3
 8004dfa:	4413      	add	r3, r2
 8004dfc:	333b      	adds	r3, #59	; 0x3b
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	212c      	movs	r1, #44	; 0x2c
 8004e08:	fb01 f303 	mul.w	r3, r1, r3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	333c      	adds	r3, #60	; 0x3c
 8004e10:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004e14:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	787c      	ldrb	r4, [r7, #1]
 8004e1c:	78ba      	ldrb	r2, [r7, #2]
 8004e1e:	78f9      	ldrb	r1, [r7, #3]
 8004e20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e22:	9302      	str	r3, [sp, #8]
 8004e24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	4623      	mov	r3, r4
 8004e32:	f005 f975 	bl	800a120 <USB_HC_Init>
 8004e36:	4603      	mov	r3, r0
 8004e38:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd90      	pop	{r4, r7, pc}

08004e4c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d101      	bne.n	8004e6a <HAL_HCD_HC_Halt+0x1e>
 8004e66:	2302      	movs	r3, #2
 8004e68:	e00f      	b.n	8004e8a <HAL_HCD_HC_Halt+0x3e>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	4611      	mov	r1, r2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f005 fbc5 	bl	800a60a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	4608      	mov	r0, r1
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	70fb      	strb	r3, [r7, #3]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	70bb      	strb	r3, [r7, #2]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	212c      	movs	r1, #44	; 0x2c
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	4413      	add	r3, r2
 8004eba:	333b      	adds	r3, #59	; 0x3b
 8004ebc:	78ba      	ldrb	r2, [r7, #2]
 8004ebe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	212c      	movs	r1, #44	; 0x2c
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	333f      	adds	r3, #63	; 0x3f
 8004ece:	787a      	ldrb	r2, [r7, #1]
 8004ed0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004ed2:	7c3b      	ldrb	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d112      	bne.n	8004efe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	212c      	movs	r1, #44	; 0x2c
 8004ede:	fb01 f303 	mul.w	r3, r1, r3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3342      	adds	r3, #66	; 0x42
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	212c      	movs	r1, #44	; 0x2c
 8004ef0:	fb01 f303 	mul.w	r3, r1, r3
 8004ef4:	4413      	add	r3, r2
 8004ef6:	333d      	adds	r3, #61	; 0x3d
 8004ef8:	7f3a      	ldrb	r2, [r7, #28]
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	e008      	b.n	8004f10 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	212c      	movs	r1, #44	; 0x2c
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	4413      	add	r3, r2
 8004f0a:	3342      	adds	r3, #66	; 0x42
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004f10:	787b      	ldrb	r3, [r7, #1]
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	f200 80c6 	bhi.w	80050a4 <HAL_HCD_HC_SubmitRequest+0x210>
 8004f18:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1e:	bf00      	nop
 8004f20:	08004f31 	.word	0x08004f31
 8004f24:	08005091 	.word	0x08005091
 8004f28:	08004f95 	.word	0x08004f95
 8004f2c:	08005013 	.word	0x08005013
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004f30:	7c3b      	ldrb	r3, [r7, #16]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	f040 80b8 	bne.w	80050a8 <HAL_HCD_HC_SubmitRequest+0x214>
 8004f38:	78bb      	ldrb	r3, [r7, #2]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f040 80b4 	bne.w	80050a8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004f40:	8b3b      	ldrh	r3, [r7, #24]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d108      	bne.n	8004f58 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	212c      	movs	r1, #44	; 0x2c
 8004f4c:	fb01 f303 	mul.w	r3, r1, r3
 8004f50:	4413      	add	r3, r2
 8004f52:	3355      	adds	r3, #85	; 0x55
 8004f54:	2201      	movs	r2, #1
 8004f56:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	212c      	movs	r1, #44	; 0x2c
 8004f5e:	fb01 f303 	mul.w	r3, r1, r3
 8004f62:	4413      	add	r3, r2
 8004f64:	3355      	adds	r3, #85	; 0x55
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d109      	bne.n	8004f80 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	212c      	movs	r1, #44	; 0x2c
 8004f72:	fb01 f303 	mul.w	r3, r1, r3
 8004f76:	4413      	add	r3, r2
 8004f78:	3342      	adds	r3, #66	; 0x42
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004f7e:	e093      	b.n	80050a8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	212c      	movs	r1, #44	; 0x2c
 8004f86:	fb01 f303 	mul.w	r3, r1, r3
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3342      	adds	r3, #66	; 0x42
 8004f8e:	2202      	movs	r2, #2
 8004f90:	701a      	strb	r2, [r3, #0]
      break;
 8004f92:	e089      	b.n	80050a8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004f94:	78bb      	ldrb	r3, [r7, #2]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d11d      	bne.n	8004fd6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	212c      	movs	r1, #44	; 0x2c
 8004fa0:	fb01 f303 	mul.w	r3, r1, r3
 8004fa4:	4413      	add	r3, r2
 8004fa6:	3355      	adds	r3, #85	; 0x55
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d109      	bne.n	8004fc2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	212c      	movs	r1, #44	; 0x2c
 8004fb4:	fb01 f303 	mul.w	r3, r1, r3
 8004fb8:	4413      	add	r3, r2
 8004fba:	3342      	adds	r3, #66	; 0x42
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004fc0:	e073      	b.n	80050aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	212c      	movs	r1, #44	; 0x2c
 8004fc8:	fb01 f303 	mul.w	r3, r1, r3
 8004fcc:	4413      	add	r3, r2
 8004fce:	3342      	adds	r3, #66	; 0x42
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	701a      	strb	r2, [r3, #0]
      break;
 8004fd4:	e069      	b.n	80050aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	212c      	movs	r1, #44	; 0x2c
 8004fdc:	fb01 f303 	mul.w	r3, r1, r3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3354      	adds	r3, #84	; 0x54
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	212c      	movs	r1, #44	; 0x2c
 8004ff0:	fb01 f303 	mul.w	r3, r1, r3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	3342      	adds	r3, #66	; 0x42
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	701a      	strb	r2, [r3, #0]
      break;
 8004ffc:	e055      	b.n	80050aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	212c      	movs	r1, #44	; 0x2c
 8005004:	fb01 f303 	mul.w	r3, r1, r3
 8005008:	4413      	add	r3, r2
 800500a:	3342      	adds	r3, #66	; 0x42
 800500c:	2202      	movs	r2, #2
 800500e:	701a      	strb	r2, [r3, #0]
      break;
 8005010:	e04b      	b.n	80050aa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005012:	78bb      	ldrb	r3, [r7, #2]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11d      	bne.n	8005054 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	212c      	movs	r1, #44	; 0x2c
 800501e:	fb01 f303 	mul.w	r3, r1, r3
 8005022:	4413      	add	r3, r2
 8005024:	3355      	adds	r3, #85	; 0x55
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	212c      	movs	r1, #44	; 0x2c
 8005032:	fb01 f303 	mul.w	r3, r1, r3
 8005036:	4413      	add	r3, r2
 8005038:	3342      	adds	r3, #66	; 0x42
 800503a:	2200      	movs	r2, #0
 800503c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800503e:	e034      	b.n	80050aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005040:	78fb      	ldrb	r3, [r7, #3]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	212c      	movs	r1, #44	; 0x2c
 8005046:	fb01 f303 	mul.w	r3, r1, r3
 800504a:	4413      	add	r3, r2
 800504c:	3342      	adds	r3, #66	; 0x42
 800504e:	2202      	movs	r2, #2
 8005050:	701a      	strb	r2, [r3, #0]
      break;
 8005052:	e02a      	b.n	80050aa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	212c      	movs	r1, #44	; 0x2c
 800505a:	fb01 f303 	mul.w	r3, r1, r3
 800505e:	4413      	add	r3, r2
 8005060:	3354      	adds	r3, #84	; 0x54
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d109      	bne.n	800507c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	212c      	movs	r1, #44	; 0x2c
 800506e:	fb01 f303 	mul.w	r3, r1, r3
 8005072:	4413      	add	r3, r2
 8005074:	3342      	adds	r3, #66	; 0x42
 8005076:	2200      	movs	r2, #0
 8005078:	701a      	strb	r2, [r3, #0]
      break;
 800507a:	e016      	b.n	80050aa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	212c      	movs	r1, #44	; 0x2c
 8005082:	fb01 f303 	mul.w	r3, r1, r3
 8005086:	4413      	add	r3, r2
 8005088:	3342      	adds	r3, #66	; 0x42
 800508a:	2202      	movs	r2, #2
 800508c:	701a      	strb	r2, [r3, #0]
      break;
 800508e:	e00c      	b.n	80050aa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	212c      	movs	r1, #44	; 0x2c
 8005096:	fb01 f303 	mul.w	r3, r1, r3
 800509a:	4413      	add	r3, r2
 800509c:	3342      	adds	r3, #66	; 0x42
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
      break;
 80050a2:	e002      	b.n	80050aa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80050a4:	bf00      	nop
 80050a6:	e000      	b.n	80050aa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80050a8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80050aa:	78fb      	ldrb	r3, [r7, #3]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	212c      	movs	r1, #44	; 0x2c
 80050b0:	fb01 f303 	mul.w	r3, r1, r3
 80050b4:	4413      	add	r3, r2
 80050b6:	3344      	adds	r3, #68	; 0x44
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	8b3a      	ldrh	r2, [r7, #24]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	202c      	movs	r0, #44	; 0x2c
 80050c4:	fb00 f303 	mul.w	r3, r0, r3
 80050c8:	440b      	add	r3, r1
 80050ca:	334c      	adds	r3, #76	; 0x4c
 80050cc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	212c      	movs	r1, #44	; 0x2c
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	4413      	add	r3, r2
 80050da:	3360      	adds	r3, #96	; 0x60
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	212c      	movs	r1, #44	; 0x2c
 80050e6:	fb01 f303 	mul.w	r3, r1, r3
 80050ea:	4413      	add	r3, r2
 80050ec:	3350      	adds	r3, #80	; 0x50
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	212c      	movs	r1, #44	; 0x2c
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	4413      	add	r3, r2
 80050fe:	3339      	adds	r3, #57	; 0x39
 8005100:	78fa      	ldrb	r2, [r7, #3]
 8005102:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	212c      	movs	r1, #44	; 0x2c
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	4413      	add	r3, r2
 8005110:	3361      	adds	r3, #97	; 0x61
 8005112:	2200      	movs	r2, #0
 8005114:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	78fb      	ldrb	r3, [r7, #3]
 800511c:	222c      	movs	r2, #44	; 0x2c
 800511e:	fb02 f303 	mul.w	r3, r2, r3
 8005122:	3338      	adds	r3, #56	; 0x38
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	18d1      	adds	r1, r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	f005 f918 	bl	800a364 <USB_HC_StartXfer>
 8005134:	4603      	mov	r3, r0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop

08005140 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f004 fe19 	bl	8009d8e <USB_GetMode>
 800515c:	4603      	mov	r3, r0
 800515e:	2b01      	cmp	r3, #1
 8005160:	f040 80f6 	bne.w	8005350 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f004 fdfd 	bl	8009d68 <USB_ReadInterrupts>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80ec 	beq.w	800534e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4618      	mov	r0, r3
 800517c:	f004 fdf4 	bl	8009d68 <USB_ReadInterrupts>
 8005180:	4603      	mov	r3, r0
 8005182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800518a:	d104      	bne.n	8005196 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005194:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f004 fde4 	bl	8009d68 <USB_ReadInterrupts>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051aa:	d104      	bne.n	80051b6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f004 fdd4 	bl	8009d68 <USB_ReadInterrupts>
 80051c0:	4603      	mov	r3, r0
 80051c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051ca:	d104      	bne.n	80051d6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80051d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f004 fdc4 	bl	8009d68 <USB_ReadInterrupts>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d103      	bne.n	80051f2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2202      	movs	r2, #2
 80051f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f004 fdb6 	bl	8009d68 <USB_ReadInterrupts>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005206:	d11c      	bne.n	8005242 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005210:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10f      	bne.n	8005242 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005222:	2110      	movs	r1, #16
 8005224:	6938      	ldr	r0, [r7, #16]
 8005226:	f004 fca5 	bl	8009b74 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800522a:	6938      	ldr	r0, [r7, #16]
 800522c:	f004 fcd6 	bl	8009bdc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2101      	movs	r1, #1
 8005236:	4618      	mov	r0, r3
 8005238:	f004 feac 	bl	8009f94 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f007 fc75 	bl	800cb2c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f004 fd8e 	bl	8009d68 <USB_ReadInterrupts>
 800524c:	4603      	mov	r3, r0
 800524e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005252:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005256:	d102      	bne.n	800525e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f001 f89e 	bl	800639a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f004 fd80 	bl	8009d68 <USB_ReadInterrupts>
 8005268:	4603      	mov	r3, r0
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b08      	cmp	r3, #8
 8005270:	d106      	bne.n	8005280 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f007 fc3e 	bl	800caf4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2208      	movs	r2, #8
 800527e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f004 fd6f 	bl	8009d68 <USB_ReadInterrupts>
 800528a:	4603      	mov	r3, r0
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b10      	cmp	r3, #16
 8005292:	d101      	bne.n	8005298 <HAL_HCD_IRQHandler+0x158>
 8005294:	2301      	movs	r3, #1
 8005296:	e000      	b.n	800529a <HAL_HCD_IRQHandler+0x15a>
 8005298:	2300      	movs	r3, #0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d012      	beq.n	80052c4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699a      	ldr	r2, [r3, #24]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0210 	bic.w	r2, r2, #16
 80052ac:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 ffa1 	bl	80061f6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0210 	orr.w	r2, r2, #16
 80052c2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f004 fd4d 	bl	8009d68 <USB_ReadInterrupts>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052d8:	d13a      	bne.n	8005350 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f005 f982 	bl	800a5e8 <USB_HC_ReadInterrupt>
 80052e4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	e025      	b.n	8005338 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	fa22 f303 	lsr.w	r3, r2, r3
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d018      	beq.n	8005332 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005316:	d106      	bne.n	8005326 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f8ab 	bl	800547a <HCD_HC_IN_IRQHandler>
 8005324:	e005      	b.n	8005332 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	4619      	mov	r1, r3
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fbf9 	bl	8005b24 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	3301      	adds	r3, #1
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	429a      	cmp	r2, r3
 8005340:	d3d4      	bcc.n	80052ec <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800534a:	615a      	str	r2, [r3, #20]
 800534c:	e000      	b.n	8005350 <HAL_HCD_IRQHandler+0x210>
      return;
 800534e:	bf00      	nop
    }
  }
}
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005364:	2b01      	cmp	r3, #1
 8005366:	d101      	bne.n	800536c <HAL_HCD_Start+0x16>
 8005368:	2302      	movs	r3, #2
 800536a:	e013      	b.n	8005394 <HAL_HCD_Start+0x3e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2101      	movs	r1, #1
 800537a:	4618      	mov	r0, r3
 800537c:	f004 fe6e 	bl	800a05c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f004 fb86 	bl	8009a96 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <HAL_HCD_Stop+0x16>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e00d      	b.n	80053ce <HAL_HCD_Stop+0x32>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f005 fa5c 	bl	800a87c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f004 fe10 	bl	800a008 <USB_ResetPort>
 80053e8:	4603      	mov	r3, r0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	460b      	mov	r3, r1
 80053fc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80053fe:	78fb      	ldrb	r3, [r7, #3]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	212c      	movs	r1, #44	; 0x2c
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	4413      	add	r3, r2
 800540a:	3360      	adds	r3, #96	; 0x60
 800540c:	781b      	ldrb	r3, [r3, #0]
}
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	460b      	mov	r3, r1
 8005424:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005426:	78fb      	ldrb	r3, [r7, #3]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	212c      	movs	r1, #44	; 0x2c
 800542c:	fb01 f303 	mul.w	r3, r1, r3
 8005430:	4413      	add	r3, r2
 8005432:	3350      	adds	r3, #80	; 0x50
 8005434:	681b      	ldr	r3, [r3, #0]
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b082      	sub	sp, #8
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f004 fe54 	bl	800a0fc <USB_GetCurrentFrame>
 8005454:	4603      	mov	r3, r0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f004 fe2f 	bl	800a0ce <USB_GetHostSpeed>
 8005470:	4603      	mov	r3, r0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b086      	sub	sp, #24
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4413      	add	r3, r2
 800549c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d11a      	bne.n	80054e0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b6:	461a      	mov	r2, r3
 80054b8:	2304      	movs	r3, #4
 80054ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	212c      	movs	r1, #44	; 0x2c
 80054c2:	fb01 f303 	mul.w	r3, r1, r3
 80054c6:	4413      	add	r3, r2
 80054c8:	3361      	adds	r3, #97	; 0x61
 80054ca:	2206      	movs	r2, #6
 80054cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	4611      	mov	r1, r2
 80054d8:	4618      	mov	r0, r3
 80054da:	f005 f896 	bl	800a60a <USB_HC_Halt>
 80054de:	e0af      	b.n	8005640 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f6:	d11b      	bne.n	8005530 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005504:	461a      	mov	r2, r3
 8005506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800550a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	212c      	movs	r1, #44	; 0x2c
 8005512:	fb01 f303 	mul.w	r3, r1, r3
 8005516:	4413      	add	r3, r2
 8005518:	3361      	adds	r3, #97	; 0x61
 800551a:	2207      	movs	r2, #7
 800551c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	b2d2      	uxtb	r2, r2
 8005526:	4611      	mov	r1, r2
 8005528:	4618      	mov	r0, r3
 800552a:	f005 f86e 	bl	800a60a <USB_HC_Halt>
 800552e:	e087      	b.n	8005640 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4413      	add	r3, r2
 8005538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b20      	cmp	r3, #32
 8005544:	d109      	bne.n	800555a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	4413      	add	r3, r2
 800554e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005552:	461a      	mov	r2, r3
 8005554:	2320      	movs	r3, #32
 8005556:	6093      	str	r3, [r2, #8]
 8005558:	e072      	b.n	8005640 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4413      	add	r3, r2
 8005562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b08      	cmp	r3, #8
 800556e:	d11a      	bne.n	80055a6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4413      	add	r3, r2
 8005578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557c:	461a      	mov	r2, r3
 800557e:	2308      	movs	r3, #8
 8005580:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	212c      	movs	r1, #44	; 0x2c
 8005588:	fb01 f303 	mul.w	r3, r1, r3
 800558c:	4413      	add	r3, r2
 800558e:	3361      	adds	r3, #97	; 0x61
 8005590:	2205      	movs	r2, #5
 8005592:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	4611      	mov	r1, r2
 800559e:	4618      	mov	r0, r3
 80055a0:	f005 f833 	bl	800a60a <USB_HC_Halt>
 80055a4:	e04c      	b.n	8005640 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055bc:	d11b      	bne.n	80055f6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ca:	461a      	mov	r2, r3
 80055cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	212c      	movs	r1, #44	; 0x2c
 80055d8:	fb01 f303 	mul.w	r3, r1, r3
 80055dc:	4413      	add	r3, r2
 80055de:	3361      	adds	r3, #97	; 0x61
 80055e0:	2208      	movs	r2, #8
 80055e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	4611      	mov	r1, r2
 80055ee:	4618      	mov	r0, r3
 80055f0:	f005 f80b 	bl	800a60a <USB_HC_Halt>
 80055f4:	e024      	b.n	8005640 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005608:	2b80      	cmp	r3, #128	; 0x80
 800560a:	d119      	bne.n	8005640 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	4413      	add	r3, r2
 8005614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005618:	461a      	mov	r2, r3
 800561a:	2380      	movs	r3, #128	; 0x80
 800561c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	212c      	movs	r1, #44	; 0x2c
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	4413      	add	r3, r2
 800562a:	3361      	adds	r3, #97	; 0x61
 800562c:	2206      	movs	r2, #6
 800562e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	4611      	mov	r1, r2
 800563a:	4618      	mov	r0, r3
 800563c:	f004 ffe5 	bl	800a60a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4413      	add	r3, r2
 8005648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005656:	d112      	bne.n	800567e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	4611      	mov	r1, r2
 8005662:	4618      	mov	r0, r3
 8005664:	f004 ffd1 	bl	800a60a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005674:	461a      	mov	r2, r3
 8005676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800567a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800567c:	e24e      	b.n	8005b1c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	4413      	add	r3, r2
 8005686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	2b01      	cmp	r3, #1
 8005692:	f040 80df 	bne.w	8005854 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d019      	beq.n	80056d2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	212c      	movs	r1, #44	; 0x2c
 80056a4:	fb01 f303 	mul.w	r3, r1, r3
 80056a8:	4413      	add	r3, r2
 80056aa:	3348      	adds	r3, #72	; 0x48
 80056ac:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	0159      	lsls	r1, r3, #5
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	440b      	add	r3, r1
 80056b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80056c0:	1ad2      	subs	r2, r2, r3
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	202c      	movs	r0, #44	; 0x2c
 80056c8:	fb00 f303 	mul.w	r3, r0, r3
 80056cc:	440b      	add	r3, r1
 80056ce:	3350      	adds	r3, #80	; 0x50
 80056d0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	212c      	movs	r1, #44	; 0x2c
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	4413      	add	r3, r2
 80056de:	3361      	adds	r3, #97	; 0x61
 80056e0:	2201      	movs	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	212c      	movs	r1, #44	; 0x2c
 80056ea:	fb01 f303 	mul.w	r3, r1, r3
 80056ee:	4413      	add	r3, r2
 80056f0:	335c      	adds	r3, #92	; 0x5c
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005702:	461a      	mov	r2, r3
 8005704:	2301      	movs	r3, #1
 8005706:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	212c      	movs	r1, #44	; 0x2c
 800570e:	fb01 f303 	mul.w	r3, r1, r3
 8005712:	4413      	add	r3, r2
 8005714:	333f      	adds	r3, #63	; 0x3f
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d009      	beq.n	8005730 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	212c      	movs	r1, #44	; 0x2c
 8005722:	fb01 f303 	mul.w	r3, r1, r3
 8005726:	4413      	add	r3, r2
 8005728:	333f      	adds	r3, #63	; 0x3f
 800572a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800572c:	2b02      	cmp	r3, #2
 800572e:	d111      	bne.n	8005754 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f004 ff65 	bl	800a60a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574c:	461a      	mov	r2, r3
 800574e:	2310      	movs	r3, #16
 8005750:	6093      	str	r3, [r2, #8]
 8005752:	e03a      	b.n	80057ca <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	212c      	movs	r1, #44	; 0x2c
 800575a:	fb01 f303 	mul.w	r3, r1, r3
 800575e:	4413      	add	r3, r2
 8005760:	333f      	adds	r3, #63	; 0x3f
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b03      	cmp	r3, #3
 8005766:	d009      	beq.n	800577c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	212c      	movs	r1, #44	; 0x2c
 800576e:	fb01 f303 	mul.w	r3, r1, r3
 8005772:	4413      	add	r3, r2
 8005774:	333f      	adds	r3, #63	; 0x3f
 8005776:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005778:	2b01      	cmp	r3, #1
 800577a:	d126      	bne.n	80057ca <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	4413      	add	r3, r2
 8005784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	0151      	lsls	r1, r2, #5
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	440a      	add	r2, r1
 8005792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005796:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800579a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	212c      	movs	r1, #44	; 0x2c
 80057a2:	fb01 f303 	mul.w	r3, r1, r3
 80057a6:	4413      	add	r3, r2
 80057a8:	3360      	adds	r3, #96	; 0x60
 80057aa:	2201      	movs	r2, #1
 80057ac:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	b2d9      	uxtb	r1, r3
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	202c      	movs	r0, #44	; 0x2c
 80057b8:	fb00 f303 	mul.w	r3, r0, r3
 80057bc:	4413      	add	r3, r2
 80057be:	3360      	adds	r3, #96	; 0x60
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f007 f9bf 	bl	800cb48 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d12b      	bne.n	800582a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	212c      	movs	r1, #44	; 0x2c
 80057d8:	fb01 f303 	mul.w	r3, r1, r3
 80057dc:	4413      	add	r3, r2
 80057de:	3348      	adds	r3, #72	; 0x48
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	202c      	movs	r0, #44	; 0x2c
 80057e8:	fb00 f202 	mul.w	r2, r0, r2
 80057ec:	440a      	add	r2, r1
 80057ee:	3240      	adds	r2, #64	; 0x40
 80057f0:	8812      	ldrh	r2, [r2, #0]
 80057f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 818e 	beq.w	8005b1c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	212c      	movs	r1, #44	; 0x2c
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	4413      	add	r3, r2
 800580c:	3354      	adds	r3, #84	; 0x54
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	f083 0301 	eor.w	r3, r3, #1
 8005814:	b2d8      	uxtb	r0, r3
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	212c      	movs	r1, #44	; 0x2c
 800581c:	fb01 f303 	mul.w	r3, r1, r3
 8005820:	4413      	add	r3, r2
 8005822:	3354      	adds	r3, #84	; 0x54
 8005824:	4602      	mov	r2, r0
 8005826:	701a      	strb	r2, [r3, #0]
}
 8005828:	e178      	b.n	8005b1c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	212c      	movs	r1, #44	; 0x2c
 8005830:	fb01 f303 	mul.w	r3, r1, r3
 8005834:	4413      	add	r3, r2
 8005836:	3354      	adds	r3, #84	; 0x54
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	f083 0301 	eor.w	r3, r3, #1
 800583e:	b2d8      	uxtb	r0, r3
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	212c      	movs	r1, #44	; 0x2c
 8005846:	fb01 f303 	mul.w	r3, r1, r3
 800584a:	4413      	add	r3, r2
 800584c:	3354      	adds	r3, #84	; 0x54
 800584e:	4602      	mov	r2, r0
 8005850:	701a      	strb	r2, [r3, #0]
}
 8005852:	e163      	b.n	8005b1c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4413      	add	r3, r2
 800585c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b02      	cmp	r3, #2
 8005868:	f040 80f6 	bne.w	8005a58 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	212c      	movs	r1, #44	; 0x2c
 8005872:	fb01 f303 	mul.w	r3, r1, r3
 8005876:	4413      	add	r3, r2
 8005878:	3361      	adds	r3, #97	; 0x61
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d109      	bne.n	8005894 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	212c      	movs	r1, #44	; 0x2c
 8005886:	fb01 f303 	mul.w	r3, r1, r3
 800588a:	4413      	add	r3, r2
 800588c:	3360      	adds	r3, #96	; 0x60
 800588e:	2201      	movs	r2, #1
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	e0c9      	b.n	8005a28 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	212c      	movs	r1, #44	; 0x2c
 800589a:	fb01 f303 	mul.w	r3, r1, r3
 800589e:	4413      	add	r3, r2
 80058a0:	3361      	adds	r3, #97	; 0x61
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b05      	cmp	r3, #5
 80058a6:	d109      	bne.n	80058bc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	212c      	movs	r1, #44	; 0x2c
 80058ae:	fb01 f303 	mul.w	r3, r1, r3
 80058b2:	4413      	add	r3, r2
 80058b4:	3360      	adds	r3, #96	; 0x60
 80058b6:	2205      	movs	r2, #5
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	e0b5      	b.n	8005a28 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	212c      	movs	r1, #44	; 0x2c
 80058c2:	fb01 f303 	mul.w	r3, r1, r3
 80058c6:	4413      	add	r3, r2
 80058c8:	3361      	adds	r3, #97	; 0x61
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b06      	cmp	r3, #6
 80058ce:	d009      	beq.n	80058e4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	212c      	movs	r1, #44	; 0x2c
 80058d6:	fb01 f303 	mul.w	r3, r1, r3
 80058da:	4413      	add	r3, r2
 80058dc:	3361      	adds	r3, #97	; 0x61
 80058de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d150      	bne.n	8005986 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	212c      	movs	r1, #44	; 0x2c
 80058ea:	fb01 f303 	mul.w	r3, r1, r3
 80058ee:	4413      	add	r3, r2
 80058f0:	335c      	adds	r3, #92	; 0x5c
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	202c      	movs	r0, #44	; 0x2c
 80058fc:	fb00 f303 	mul.w	r3, r0, r3
 8005900:	440b      	add	r3, r1
 8005902:	335c      	adds	r3, #92	; 0x5c
 8005904:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	212c      	movs	r1, #44	; 0x2c
 800590c:	fb01 f303 	mul.w	r3, r1, r3
 8005910:	4413      	add	r3, r2
 8005912:	335c      	adds	r3, #92	; 0x5c
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d912      	bls.n	8005940 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	212c      	movs	r1, #44	; 0x2c
 8005920:	fb01 f303 	mul.w	r3, r1, r3
 8005924:	4413      	add	r3, r2
 8005926:	335c      	adds	r3, #92	; 0x5c
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	212c      	movs	r1, #44	; 0x2c
 8005932:	fb01 f303 	mul.w	r3, r1, r3
 8005936:	4413      	add	r3, r2
 8005938:	3360      	adds	r3, #96	; 0x60
 800593a:	2204      	movs	r2, #4
 800593c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800593e:	e073      	b.n	8005a28 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	212c      	movs	r1, #44	; 0x2c
 8005946:	fb01 f303 	mul.w	r3, r1, r3
 800594a:	4413      	add	r3, r2
 800594c:	3360      	adds	r3, #96	; 0x60
 800594e:	2202      	movs	r2, #2
 8005950:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	4413      	add	r3, r2
 800595a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005968:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005970:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4413      	add	r3, r2
 800597a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597e:	461a      	mov	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005984:	e050      	b.n	8005a28 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	212c      	movs	r1, #44	; 0x2c
 800598c:	fb01 f303 	mul.w	r3, r1, r3
 8005990:	4413      	add	r3, r2
 8005992:	3361      	adds	r3, #97	; 0x61
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b03      	cmp	r3, #3
 8005998:	d122      	bne.n	80059e0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	212c      	movs	r1, #44	; 0x2c
 80059a0:	fb01 f303 	mul.w	r3, r1, r3
 80059a4:	4413      	add	r3, r2
 80059a6:	3360      	adds	r3, #96	; 0x60
 80059a8:	2202      	movs	r2, #2
 80059aa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059c2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059ca:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d8:	461a      	mov	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	e023      	b.n	8005a28 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	212c      	movs	r1, #44	; 0x2c
 80059e6:	fb01 f303 	mul.w	r3, r1, r3
 80059ea:	4413      	add	r3, r2
 80059ec:	3361      	adds	r3, #97	; 0x61
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b07      	cmp	r3, #7
 80059f2:	d119      	bne.n	8005a28 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	212c      	movs	r1, #44	; 0x2c
 80059fa:	fb01 f303 	mul.w	r3, r1, r3
 80059fe:	4413      	add	r3, r2
 8005a00:	335c      	adds	r3, #92	; 0x5c
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	202c      	movs	r0, #44	; 0x2c
 8005a0c:	fb00 f303 	mul.w	r3, r0, r3
 8005a10:	440b      	add	r3, r1
 8005a12:	335c      	adds	r3, #92	; 0x5c
 8005a14:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	212c      	movs	r1, #44	; 0x2c
 8005a1c:	fb01 f303 	mul.w	r3, r1, r3
 8005a20:	4413      	add	r3, r2
 8005a22:	3360      	adds	r3, #96	; 0x60
 8005a24:	2204      	movs	r2, #4
 8005a26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a34:	461a      	mov	r2, r3
 8005a36:	2302      	movs	r3, #2
 8005a38:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	b2d9      	uxtb	r1, r3
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	202c      	movs	r0, #44	; 0x2c
 8005a44:	fb00 f303 	mul.w	r3, r0, r3
 8005a48:	4413      	add	r3, r2
 8005a4a:	3360      	adds	r3, #96	; 0x60
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f007 f879 	bl	800cb48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005a56:	e061      	b.n	8005b1c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 0310 	and.w	r3, r3, #16
 8005a6a:	2b10      	cmp	r3, #16
 8005a6c:	d156      	bne.n	8005b1c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	212c      	movs	r1, #44	; 0x2c
 8005a74:	fb01 f303 	mul.w	r3, r1, r3
 8005a78:	4413      	add	r3, r2
 8005a7a:	333f      	adds	r3, #63	; 0x3f
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d111      	bne.n	8005aa6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	212c      	movs	r1, #44	; 0x2c
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	335c      	adds	r3, #92	; 0x5c
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f004 fdb3 	bl	800a60a <USB_HC_Halt>
 8005aa4:	e031      	b.n	8005b0a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	212c      	movs	r1, #44	; 0x2c
 8005aac:	fb01 f303 	mul.w	r3, r1, r3
 8005ab0:	4413      	add	r3, r2
 8005ab2:	333f      	adds	r3, #63	; 0x3f
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	212c      	movs	r1, #44	; 0x2c
 8005ac0:	fb01 f303 	mul.w	r3, r1, r3
 8005ac4:	4413      	add	r3, r2
 8005ac6:	333f      	adds	r3, #63	; 0x3f
 8005ac8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d11d      	bne.n	8005b0a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	212c      	movs	r1, #44	; 0x2c
 8005ad4:	fb01 f303 	mul.w	r3, r1, r3
 8005ad8:	4413      	add	r3, r2
 8005ada:	335c      	adds	r3, #92	; 0x5c
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d110      	bne.n	8005b0a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	212c      	movs	r1, #44	; 0x2c
 8005aee:	fb01 f303 	mul.w	r3, r1, r3
 8005af2:	4413      	add	r3, r2
 8005af4:	3361      	adds	r3, #97	; 0x61
 8005af6:	2203      	movs	r2, #3
 8005af8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	4611      	mov	r1, r2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f004 fd80 	bl	800a60a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b16:	461a      	mov	r2, r3
 8005b18:	2310      	movs	r3, #16
 8005b1a:	6093      	str	r3, [r2, #8]
}
 8005b1c:	bf00      	nop
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005b3a:	78fb      	ldrb	r3, [r7, #3]
 8005b3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d11a      	bne.n	8005b8a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b60:	461a      	mov	r2, r3
 8005b62:	2304      	movs	r3, #4
 8005b64:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	212c      	movs	r1, #44	; 0x2c
 8005b6c:	fb01 f303 	mul.w	r3, r1, r3
 8005b70:	4413      	add	r3, r2
 8005b72:	3361      	adds	r3, #97	; 0x61
 8005b74:	2206      	movs	r2, #6
 8005b76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	4611      	mov	r1, r2
 8005b82:	4618      	mov	r0, r3
 8005b84:	f004 fd41 	bl	800a60a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005b88:	e331      	b.n	80061ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d12e      	bne.n	8005bfe <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bac:	461a      	mov	r2, r3
 8005bae:	2320      	movs	r3, #32
 8005bb0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	212c      	movs	r1, #44	; 0x2c
 8005bb8:	fb01 f303 	mul.w	r3, r1, r3
 8005bbc:	4413      	add	r3, r2
 8005bbe:	333d      	adds	r3, #61	; 0x3d
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	f040 8313 	bne.w	80061ee <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	212c      	movs	r1, #44	; 0x2c
 8005bce:	fb01 f303 	mul.w	r3, r1, r3
 8005bd2:	4413      	add	r3, r2
 8005bd4:	333d      	adds	r3, #61	; 0x3d
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	212c      	movs	r1, #44	; 0x2c
 8005be0:	fb01 f303 	mul.w	r3, r1, r3
 8005be4:	4413      	add	r3, r2
 8005be6:	3360      	adds	r3, #96	; 0x60
 8005be8:	2202      	movs	r2, #2
 8005bea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f004 fd07 	bl	800a60a <USB_HC_Halt>
}
 8005bfc:	e2f7      	b.n	80061ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c14:	d112      	bne.n	8005c3c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c22:	461a      	mov	r2, r3
 8005c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c28:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	4611      	mov	r1, r2
 8005c34:	4618      	mov	r0, r3
 8005c36:	f004 fce8 	bl	800a60a <USB_HC_Halt>
}
 8005c3a:	e2d8      	b.n	80061ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d140      	bne.n	8005cd4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	212c      	movs	r1, #44	; 0x2c
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	335c      	adds	r3, #92	; 0x5c
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d111      	bne.n	8005c9e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	212c      	movs	r1, #44	; 0x2c
 8005c80:	fb01 f303 	mul.w	r3, r1, r3
 8005c84:	4413      	add	r3, r2
 8005c86:	333d      	adds	r3, #61	; 0x3d
 8005c88:	2201      	movs	r2, #1
 8005c8a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c98:	461a      	mov	r2, r3
 8005c9a:	2340      	movs	r3, #64	; 0x40
 8005c9c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005caa:	461a      	mov	r2, r3
 8005cac:	2301      	movs	r3, #1
 8005cae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	212c      	movs	r1, #44	; 0x2c
 8005cb6:	fb01 f303 	mul.w	r3, r1, r3
 8005cba:	4413      	add	r3, r2
 8005cbc:	3361      	adds	r3, #97	; 0x61
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f004 fc9c 	bl	800a60a <USB_HC_Halt>
}
 8005cd2:	e28c      	b.n	80061ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce6:	2b40      	cmp	r3, #64	; 0x40
 8005ce8:	d12c      	bne.n	8005d44 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	212c      	movs	r1, #44	; 0x2c
 8005cf0:	fb01 f303 	mul.w	r3, r1, r3
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3361      	adds	r3, #97	; 0x61
 8005cf8:	2204      	movs	r2, #4
 8005cfa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	212c      	movs	r1, #44	; 0x2c
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	4413      	add	r3, r2
 8005d08:	333d      	adds	r3, #61	; 0x3d
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	212c      	movs	r1, #44	; 0x2c
 8005d14:	fb01 f303 	mul.w	r3, r1, r3
 8005d18:	4413      	add	r3, r2
 8005d1a:	335c      	adds	r3, #92	; 0x5c
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	4611      	mov	r1, r2
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f004 fc6d 	bl	800a60a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	2340      	movs	r3, #64	; 0x40
 8005d40:	6093      	str	r3, [r2, #8]
}
 8005d42:	e254      	b.n	80061ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d11a      	bne.n	8005d90 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d66:	461a      	mov	r2, r3
 8005d68:	2308      	movs	r3, #8
 8005d6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	212c      	movs	r1, #44	; 0x2c
 8005d72:	fb01 f303 	mul.w	r3, r1, r3
 8005d76:	4413      	add	r3, r2
 8005d78:	3361      	adds	r3, #97	; 0x61
 8005d7a:	2205      	movs	r2, #5
 8005d7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	4611      	mov	r1, r2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f004 fc3e 	bl	800a60a <USB_HC_Halt>
}
 8005d8e:	e22e      	b.n	80061ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d140      	bne.n	8005e28 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	212c      	movs	r1, #44	; 0x2c
 8005dac:	fb01 f303 	mul.w	r3, r1, r3
 8005db0:	4413      	add	r3, r2
 8005db2:	335c      	adds	r3, #92	; 0x5c
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	212c      	movs	r1, #44	; 0x2c
 8005dbe:	fb01 f303 	mul.w	r3, r1, r3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3361      	adds	r3, #97	; 0x61
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	212c      	movs	r1, #44	; 0x2c
 8005dd0:	fb01 f303 	mul.w	r3, r1, r3
 8005dd4:	4413      	add	r3, r2
 8005dd6:	333d      	adds	r3, #61	; 0x3d
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d112      	bne.n	8005e04 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	212c      	movs	r1, #44	; 0x2c
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	4413      	add	r3, r2
 8005dea:	333c      	adds	r3, #60	; 0x3c
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d108      	bne.n	8005e04 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	212c      	movs	r1, #44	; 0x2c
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	333d      	adds	r3, #61	; 0x3d
 8005e00:	2201      	movs	r2, #1
 8005e02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f004 fbfb 	bl	800a60a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e20:	461a      	mov	r2, r3
 8005e22:	2310      	movs	r3, #16
 8005e24:	6093      	str	r3, [r2, #8]
}
 8005e26:	e1e2      	b.n	80061ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3a:	2b80      	cmp	r3, #128	; 0x80
 8005e3c:	d164      	bne.n	8005f08 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d111      	bne.n	8005e6a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	212c      	movs	r1, #44	; 0x2c
 8005e4c:	fb01 f303 	mul.w	r3, r1, r3
 8005e50:	4413      	add	r3, r2
 8005e52:	3361      	adds	r3, #97	; 0x61
 8005e54:	2206      	movs	r2, #6
 8005e56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f004 fbd1 	bl	800a60a <USB_HC_Halt>
 8005e68:	e044      	b.n	8005ef4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	212c      	movs	r1, #44	; 0x2c
 8005e70:	fb01 f303 	mul.w	r3, r1, r3
 8005e74:	4413      	add	r3, r2
 8005e76:	335c      	adds	r3, #92	; 0x5c
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	202c      	movs	r0, #44	; 0x2c
 8005e82:	fb00 f303 	mul.w	r3, r0, r3
 8005e86:	440b      	add	r3, r1
 8005e88:	335c      	adds	r3, #92	; 0x5c
 8005e8a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	212c      	movs	r1, #44	; 0x2c
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	4413      	add	r3, r2
 8005e98:	335c      	adds	r3, #92	; 0x5c
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d920      	bls.n	8005ee2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	212c      	movs	r1, #44	; 0x2c
 8005ea6:	fb01 f303 	mul.w	r3, r1, r3
 8005eaa:	4413      	add	r3, r2
 8005eac:	335c      	adds	r3, #92	; 0x5c
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	212c      	movs	r1, #44	; 0x2c
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	3360      	adds	r3, #96	; 0x60
 8005ec0:	2204      	movs	r2, #4
 8005ec2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	b2d9      	uxtb	r1, r3
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	202c      	movs	r0, #44	; 0x2c
 8005ece:	fb00 f303 	mul.w	r3, r0, r3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3360      	adds	r3, #96	; 0x60
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f006 fe34 	bl	800cb48 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ee0:	e008      	b.n	8005ef4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	212c      	movs	r1, #44	; 0x2c
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	4413      	add	r3, r2
 8005eee:	3360      	adds	r3, #96	; 0x60
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f00:	461a      	mov	r2, r3
 8005f02:	2380      	movs	r3, #128	; 0x80
 8005f04:	6093      	str	r3, [r2, #8]
}
 8005f06:	e172      	b.n	80061ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f1e:	d11b      	bne.n	8005f58 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	212c      	movs	r1, #44	; 0x2c
 8005f26:	fb01 f303 	mul.w	r3, r1, r3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3361      	adds	r3, #97	; 0x61
 8005f2e:	2208      	movs	r2, #8
 8005f30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f004 fb64 	bl	800a60a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f54:	6093      	str	r3, [r2, #8]
}
 8005f56:	e14a      	b.n	80061ee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	f040 813f 	bne.w	80061ee <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	212c      	movs	r1, #44	; 0x2c
 8005f76:	fb01 f303 	mul.w	r3, r1, r3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	3361      	adds	r3, #97	; 0x61
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d17d      	bne.n	8006080 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	212c      	movs	r1, #44	; 0x2c
 8005f8a:	fb01 f303 	mul.w	r3, r1, r3
 8005f8e:	4413      	add	r3, r2
 8005f90:	3360      	adds	r3, #96	; 0x60
 8005f92:	2201      	movs	r2, #1
 8005f94:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	212c      	movs	r1, #44	; 0x2c
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	333f      	adds	r3, #63	; 0x3f
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d00a      	beq.n	8005fc0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	212c      	movs	r1, #44	; 0x2c
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	333f      	adds	r3, #63	; 0x3f
 8005fb8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	f040 8100 	bne.w	80061c0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d113      	bne.n	8005ff0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	212c      	movs	r1, #44	; 0x2c
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3355      	adds	r3, #85	; 0x55
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	f083 0301 	eor.w	r3, r3, #1
 8005fdc:	b2d8      	uxtb	r0, r3
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	212c      	movs	r1, #44	; 0x2c
 8005fe4:	fb01 f303 	mul.w	r3, r1, r3
 8005fe8:	4413      	add	r3, r2
 8005fea:	3355      	adds	r3, #85	; 0x55
 8005fec:	4602      	mov	r2, r0
 8005fee:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	f040 80e3 	bne.w	80061c0 <HCD_HC_OUT_IRQHandler+0x69c>
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	212c      	movs	r1, #44	; 0x2c
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	4413      	add	r3, r2
 8006006:	334c      	adds	r3, #76	; 0x4c
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 80d8 	beq.w	80061c0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	212c      	movs	r1, #44	; 0x2c
 8006016:	fb01 f303 	mul.w	r3, r1, r3
 800601a:	4413      	add	r3, r2
 800601c:	334c      	adds	r3, #76	; 0x4c
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	202c      	movs	r0, #44	; 0x2c
 8006026:	fb00 f202 	mul.w	r2, r0, r2
 800602a:	440a      	add	r2, r1
 800602c:	3240      	adds	r2, #64	; 0x40
 800602e:	8812      	ldrh	r2, [r2, #0]
 8006030:	4413      	add	r3, r2
 8006032:	3b01      	subs	r3, #1
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	202c      	movs	r0, #44	; 0x2c
 800603a:	fb00 f202 	mul.w	r2, r0, r2
 800603e:	440a      	add	r2, r1
 8006040:	3240      	adds	r2, #64	; 0x40
 8006042:	8812      	ldrh	r2, [r2, #0]
 8006044:	fbb3 f3f2 	udiv	r3, r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 80b5 	beq.w	80061c0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	212c      	movs	r1, #44	; 0x2c
 800605c:	fb01 f303 	mul.w	r3, r1, r3
 8006060:	4413      	add	r3, r2
 8006062:	3355      	adds	r3, #85	; 0x55
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	f083 0301 	eor.w	r3, r3, #1
 800606a:	b2d8      	uxtb	r0, r3
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	212c      	movs	r1, #44	; 0x2c
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	4413      	add	r3, r2
 8006078:	3355      	adds	r3, #85	; 0x55
 800607a:	4602      	mov	r2, r0
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	e09f      	b.n	80061c0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	212c      	movs	r1, #44	; 0x2c
 8006086:	fb01 f303 	mul.w	r3, r1, r3
 800608a:	4413      	add	r3, r2
 800608c:	3361      	adds	r3, #97	; 0x61
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2b03      	cmp	r3, #3
 8006092:	d109      	bne.n	80060a8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	212c      	movs	r1, #44	; 0x2c
 800609a:	fb01 f303 	mul.w	r3, r1, r3
 800609e:	4413      	add	r3, r2
 80060a0:	3360      	adds	r3, #96	; 0x60
 80060a2:	2202      	movs	r2, #2
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	e08b      	b.n	80061c0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	212c      	movs	r1, #44	; 0x2c
 80060ae:	fb01 f303 	mul.w	r3, r1, r3
 80060b2:	4413      	add	r3, r2
 80060b4:	3361      	adds	r3, #97	; 0x61
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d109      	bne.n	80060d0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	212c      	movs	r1, #44	; 0x2c
 80060c2:	fb01 f303 	mul.w	r3, r1, r3
 80060c6:	4413      	add	r3, r2
 80060c8:	3360      	adds	r3, #96	; 0x60
 80060ca:	2202      	movs	r2, #2
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	e077      	b.n	80061c0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	212c      	movs	r1, #44	; 0x2c
 80060d6:	fb01 f303 	mul.w	r3, r1, r3
 80060da:	4413      	add	r3, r2
 80060dc:	3361      	adds	r3, #97	; 0x61
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b05      	cmp	r3, #5
 80060e2:	d109      	bne.n	80060f8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	212c      	movs	r1, #44	; 0x2c
 80060ea:	fb01 f303 	mul.w	r3, r1, r3
 80060ee:	4413      	add	r3, r2
 80060f0:	3360      	adds	r3, #96	; 0x60
 80060f2:	2205      	movs	r2, #5
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	e063      	b.n	80061c0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	212c      	movs	r1, #44	; 0x2c
 80060fe:	fb01 f303 	mul.w	r3, r1, r3
 8006102:	4413      	add	r3, r2
 8006104:	3361      	adds	r3, #97	; 0x61
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b06      	cmp	r3, #6
 800610a:	d009      	beq.n	8006120 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	212c      	movs	r1, #44	; 0x2c
 8006112:	fb01 f303 	mul.w	r3, r1, r3
 8006116:	4413      	add	r3, r2
 8006118:	3361      	adds	r3, #97	; 0x61
 800611a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800611c:	2b08      	cmp	r3, #8
 800611e:	d14f      	bne.n	80061c0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	212c      	movs	r1, #44	; 0x2c
 8006126:	fb01 f303 	mul.w	r3, r1, r3
 800612a:	4413      	add	r3, r2
 800612c:	335c      	adds	r3, #92	; 0x5c
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	202c      	movs	r0, #44	; 0x2c
 8006138:	fb00 f303 	mul.w	r3, r0, r3
 800613c:	440b      	add	r3, r1
 800613e:	335c      	adds	r3, #92	; 0x5c
 8006140:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	212c      	movs	r1, #44	; 0x2c
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	4413      	add	r3, r2
 800614e:	335c      	adds	r3, #92	; 0x5c
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b02      	cmp	r3, #2
 8006154:	d912      	bls.n	800617c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	212c      	movs	r1, #44	; 0x2c
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	4413      	add	r3, r2
 8006162:	335c      	adds	r3, #92	; 0x5c
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	212c      	movs	r1, #44	; 0x2c
 800616e:	fb01 f303 	mul.w	r3, r1, r3
 8006172:	4413      	add	r3, r2
 8006174:	3360      	adds	r3, #96	; 0x60
 8006176:	2204      	movs	r2, #4
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	e021      	b.n	80061c0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	212c      	movs	r1, #44	; 0x2c
 8006182:	fb01 f303 	mul.w	r3, r1, r3
 8006186:	4413      	add	r3, r2
 8006188:	3360      	adds	r3, #96	; 0x60
 800618a:	2202      	movs	r2, #2
 800618c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061a4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ac:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ba:	461a      	mov	r2, r3
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061cc:	461a      	mov	r2, r3
 80061ce:	2302      	movs	r3, #2
 80061d0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	b2d9      	uxtb	r1, r3
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	202c      	movs	r0, #44	; 0x2c
 80061dc:	fb00 f303 	mul.w	r3, r0, r3
 80061e0:	4413      	add	r3, r2
 80061e2:	3360      	adds	r3, #96	; 0x60
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f006 fcad 	bl	800cb48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80061ee:	bf00      	nop
 80061f0:	3720      	adds	r7, #32
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b08a      	sub	sp, #40	; 0x28
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	0c5b      	lsrs	r3, r3, #17
 800621c:	f003 030f 	and.w	r3, r3, #15
 8006220:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	091b      	lsrs	r3, r3, #4
 8006226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800622a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d004      	beq.n	800623c <HCD_RXQLVL_IRQHandler+0x46>
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b05      	cmp	r3, #5
 8006236:	f000 80a9 	beq.w	800638c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800623a:	e0aa      	b.n	8006392 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 80a6 	beq.w	8006390 <HCD_RXQLVL_IRQHandler+0x19a>
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	212c      	movs	r1, #44	; 0x2c
 800624a:	fb01 f303 	mul.w	r3, r1, r3
 800624e:	4413      	add	r3, r2
 8006250:	3344      	adds	r3, #68	; 0x44
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 809b 	beq.w	8006390 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	212c      	movs	r1, #44	; 0x2c
 8006260:	fb01 f303 	mul.w	r3, r1, r3
 8006264:	4413      	add	r3, r2
 8006266:	3350      	adds	r3, #80	; 0x50
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	441a      	add	r2, r3
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	202c      	movs	r0, #44	; 0x2c
 8006274:	fb00 f303 	mul.w	r3, r0, r3
 8006278:	440b      	add	r3, r1
 800627a:	334c      	adds	r3, #76	; 0x4c
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	d87a      	bhi.n	8006378 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	212c      	movs	r1, #44	; 0x2c
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	4413      	add	r3, r2
 8006292:	3344      	adds	r3, #68	; 0x44
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	b292      	uxth	r2, r2
 800629a:	4619      	mov	r1, r3
 800629c:	f003 fd0c 	bl	8009cb8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	212c      	movs	r1, #44	; 0x2c
 80062a6:	fb01 f303 	mul.w	r3, r1, r3
 80062aa:	4413      	add	r3, r2
 80062ac:	3344      	adds	r3, #68	; 0x44
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	441a      	add	r2, r3
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	202c      	movs	r0, #44	; 0x2c
 80062ba:	fb00 f303 	mul.w	r3, r0, r3
 80062be:	440b      	add	r3, r1
 80062c0:	3344      	adds	r3, #68	; 0x44
 80062c2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	212c      	movs	r1, #44	; 0x2c
 80062ca:	fb01 f303 	mul.w	r3, r1, r3
 80062ce:	4413      	add	r3, r2
 80062d0:	3350      	adds	r3, #80	; 0x50
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	441a      	add	r2, r3
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	202c      	movs	r0, #44	; 0x2c
 80062de:	fb00 f303 	mul.w	r3, r0, r3
 80062e2:	440b      	add	r3, r1
 80062e4:	3350      	adds	r3, #80	; 0x50
 80062e6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	0cdb      	lsrs	r3, r3, #19
 80062f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062fc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	212c      	movs	r1, #44	; 0x2c
 8006304:	fb01 f303 	mul.w	r3, r1, r3
 8006308:	4413      	add	r3, r2
 800630a:	3340      	adds	r3, #64	; 0x40
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4293      	cmp	r3, r2
 8006314:	d13c      	bne.n	8006390 <HCD_RXQLVL_IRQHandler+0x19a>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d039      	beq.n	8006390 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	4413      	add	r3, r2
 8006324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006332:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800633a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006348:	461a      	mov	r2, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	212c      	movs	r1, #44	; 0x2c
 8006354:	fb01 f303 	mul.w	r3, r1, r3
 8006358:	4413      	add	r3, r2
 800635a:	3354      	adds	r3, #84	; 0x54
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	f083 0301 	eor.w	r3, r3, #1
 8006362:	b2d8      	uxtb	r0, r3
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	212c      	movs	r1, #44	; 0x2c
 800636a:	fb01 f303 	mul.w	r3, r1, r3
 800636e:	4413      	add	r3, r2
 8006370:	3354      	adds	r3, #84	; 0x54
 8006372:	4602      	mov	r2, r0
 8006374:	701a      	strb	r2, [r3, #0]
      break;
 8006376:	e00b      	b.n	8006390 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	212c      	movs	r1, #44	; 0x2c
 800637e:	fb01 f303 	mul.w	r3, r1, r3
 8006382:	4413      	add	r3, r2
 8006384:	3360      	adds	r3, #96	; 0x60
 8006386:	2204      	movs	r2, #4
 8006388:	701a      	strb	r2, [r3, #0]
      break;
 800638a:	e001      	b.n	8006390 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800638c:	bf00      	nop
 800638e:	e000      	b.n	8006392 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006390:	bf00      	nop
  }
}
 8006392:	bf00      	nop
 8006394:	3728      	adds	r7, #40	; 0x28
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b086      	sub	sp, #24
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80063c6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d10b      	bne.n	80063ea <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d102      	bne.n	80063e2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f006 fb97 	bl	800cb10 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f043 0302 	orr.w	r3, r3, #2
 80063e8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d132      	bne.n	800645a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f043 0308 	orr.w	r3, r3, #8
 80063fa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b04      	cmp	r3, #4
 8006404:	d126      	bne.n	8006454 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d113      	bne.n	8006436 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006414:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006418:	d106      	bne.n	8006428 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2102      	movs	r1, #2
 8006420:	4618      	mov	r0, r3
 8006422:	f003 fdb7 	bl	8009f94 <USB_InitFSLSPClkSel>
 8006426:	e011      	b.n	800644c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2101      	movs	r1, #1
 800642e:	4618      	mov	r0, r3
 8006430:	f003 fdb0 	bl	8009f94 <USB_InitFSLSPClkSel>
 8006434:	e00a      	b.n	800644c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d106      	bne.n	800644c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006444:	461a      	mov	r2, r3
 8006446:	f64e 2360 	movw	r3, #60000	; 0xea60
 800644a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f006 fb89 	bl	800cb64 <HAL_HCD_PortEnabled_Callback>
 8006452:	e002      	b.n	800645a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f006 fb93 	bl	800cb80 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b20      	cmp	r3, #32
 8006462:	d103      	bne.n	800646c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f043 0320 	orr.w	r3, r3, #32
 800646a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006472:	461a      	mov	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6013      	str	r3, [r2, #0]
}
 8006478:	bf00      	nop
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e12b      	b.n	80066ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d106      	bne.n	80064ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fb fc0e 	bl	8001cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2224      	movs	r2, #36	; 0x24
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0201 	bic.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80064e4:	f001 f98e 	bl	8007804 <HAL_RCC_GetPCLK1Freq>
 80064e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	4a81      	ldr	r2, [pc, #516]	; (80066f4 <HAL_I2C_Init+0x274>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d807      	bhi.n	8006504 <HAL_I2C_Init+0x84>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4a80      	ldr	r2, [pc, #512]	; (80066f8 <HAL_I2C_Init+0x278>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	bf94      	ite	ls
 80064fc:	2301      	movls	r3, #1
 80064fe:	2300      	movhi	r3, #0
 8006500:	b2db      	uxtb	r3, r3
 8006502:	e006      	b.n	8006512 <HAL_I2C_Init+0x92>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4a7d      	ldr	r2, [pc, #500]	; (80066fc <HAL_I2C_Init+0x27c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	bf94      	ite	ls
 800650c:	2301      	movls	r3, #1
 800650e:	2300      	movhi	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e0e7      	b.n	80066ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4a78      	ldr	r2, [pc, #480]	; (8006700 <HAL_I2C_Init+0x280>)
 800651e:	fba2 2303 	umull	r2, r3, r2, r3
 8006522:	0c9b      	lsrs	r3, r3, #18
 8006524:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	4a6a      	ldr	r2, [pc, #424]	; (80066f4 <HAL_I2C_Init+0x274>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d802      	bhi.n	8006554 <HAL_I2C_Init+0xd4>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	3301      	adds	r3, #1
 8006552:	e009      	b.n	8006568 <HAL_I2C_Init+0xe8>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800655a:	fb02 f303 	mul.w	r3, r2, r3
 800655e:	4a69      	ldr	r2, [pc, #420]	; (8006704 <HAL_I2C_Init+0x284>)
 8006560:	fba2 2303 	umull	r2, r3, r2, r3
 8006564:	099b      	lsrs	r3, r3, #6
 8006566:	3301      	adds	r3, #1
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6812      	ldr	r2, [r2, #0]
 800656c:	430b      	orrs	r3, r1
 800656e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800657a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	495c      	ldr	r1, [pc, #368]	; (80066f4 <HAL_I2C_Init+0x274>)
 8006584:	428b      	cmp	r3, r1
 8006586:	d819      	bhi.n	80065bc <HAL_I2C_Init+0x13c>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	1e59      	subs	r1, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	fbb1 f3f3 	udiv	r3, r1, r3
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	f640 73fc 	movw	r3, #4092	; 0xffc
 800659c:	400b      	ands	r3, r1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <HAL_I2C_Init+0x138>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1e59      	subs	r1, r3, #1
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80065b0:	3301      	adds	r3, #1
 80065b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065b6:	e051      	b.n	800665c <HAL_I2C_Init+0x1dc>
 80065b8:	2304      	movs	r3, #4
 80065ba:	e04f      	b.n	800665c <HAL_I2C_Init+0x1dc>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d111      	bne.n	80065e8 <HAL_I2C_Init+0x168>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	1e58      	subs	r0, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6859      	ldr	r1, [r3, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	440b      	add	r3, r1
 80065d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065d6:	3301      	adds	r3, #1
 80065d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065dc:	2b00      	cmp	r3, #0
 80065de:	bf0c      	ite	eq
 80065e0:	2301      	moveq	r3, #1
 80065e2:	2300      	movne	r3, #0
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	e012      	b.n	800660e <HAL_I2C_Init+0x18e>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	1e58      	subs	r0, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6859      	ldr	r1, [r3, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	440b      	add	r3, r1
 80065f6:	0099      	lsls	r1, r3, #2
 80065f8:	440b      	add	r3, r1
 80065fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80065fe:	3301      	adds	r3, #1
 8006600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006604:	2b00      	cmp	r3, #0
 8006606:	bf0c      	ite	eq
 8006608:	2301      	moveq	r3, #1
 800660a:	2300      	movne	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <HAL_I2C_Init+0x196>
 8006612:	2301      	movs	r3, #1
 8006614:	e022      	b.n	800665c <HAL_I2C_Init+0x1dc>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10e      	bne.n	800663c <HAL_I2C_Init+0x1bc>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	1e58      	subs	r0, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6859      	ldr	r1, [r3, #4]
 8006626:	460b      	mov	r3, r1
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	440b      	add	r3, r1
 800662c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006630:	3301      	adds	r3, #1
 8006632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800663a:	e00f      	b.n	800665c <HAL_I2C_Init+0x1dc>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	1e58      	subs	r0, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6859      	ldr	r1, [r3, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	440b      	add	r3, r1
 800664a:	0099      	lsls	r1, r3, #2
 800664c:	440b      	add	r3, r1
 800664e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006652:	3301      	adds	r3, #1
 8006654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	6809      	ldr	r1, [r1, #0]
 8006660:	4313      	orrs	r3, r2
 8006662:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69da      	ldr	r2, [r3, #28]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800668a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6911      	ldr	r1, [r2, #16]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	68d2      	ldr	r2, [r2, #12]
 8006696:	4311      	orrs	r1, r2
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	430b      	orrs	r3, r1
 800669e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	000186a0 	.word	0x000186a0
 80066f8:	001e847f 	.word	0x001e847f
 80066fc:	003d08ff 	.word	0x003d08ff
 8006700:	431bde83 	.word	0x431bde83
 8006704:	10624dd3 	.word	0x10624dd3

08006708 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b20      	cmp	r3, #32
 800671c:	d129      	bne.n	8006772 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2224      	movs	r2, #36	; 0x24
 8006722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0201 	bic.w	r2, r2, #1
 8006734:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0210 	bic.w	r2, r2, #16
 8006744:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0201 	orr.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e000      	b.n	8006774 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006772:	2302      	movs	r3, #2
  }
}
 8006774:	4618      	mov	r0, r3
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b20      	cmp	r3, #32
 8006798:	d12a      	bne.n	80067f0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2224      	movs	r2, #36	; 0x24
 800679e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0201 	bic.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80067ba:	89fb      	ldrh	r3, [r7, #14]
 80067bc:	f023 030f 	bic.w	r3, r3, #15
 80067c0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	89fb      	ldrh	r3, [r7, #14]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	89fa      	ldrh	r2, [r7, #14]
 80067d2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0201 	orr.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	e000      	b.n	80067f2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80067f0:	2302      	movs	r3, #2
  }
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
	...

08006800 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e0bf      	b.n	8006992 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7fb fab8 	bl	8001d9c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699a      	ldr	r2, [r3, #24]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006842:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6999      	ldr	r1, [r3, #24]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006858:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6899      	ldr	r1, [r3, #8]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	4b4a      	ldr	r3, [pc, #296]	; (800699c <HAL_LTDC_Init+0x19c>)
 8006874:	400b      	ands	r3, r1
 8006876:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	041b      	lsls	r3, r3, #16
 800687e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6899      	ldr	r1, [r3, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699a      	ldr	r2, [r3, #24]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68d9      	ldr	r1, [r3, #12]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	4b3e      	ldr	r3, [pc, #248]	; (800699c <HAL_LTDC_Init+0x19c>)
 80068a2:	400b      	ands	r3, r1
 80068a4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	041b      	lsls	r3, r3, #16
 80068ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68d9      	ldr	r1, [r3, #12]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1a      	ldr	r2, [r3, #32]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6919      	ldr	r1, [r3, #16]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	4b33      	ldr	r3, [pc, #204]	; (800699c <HAL_LTDC_Init+0x19c>)
 80068d0:	400b      	ands	r3, r1
 80068d2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	041b      	lsls	r3, r3, #16
 80068da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6919      	ldr	r1, [r3, #16]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6959      	ldr	r1, [r3, #20]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	4b27      	ldr	r3, [pc, #156]	; (800699c <HAL_LTDC_Init+0x19c>)
 80068fe:	400b      	ands	r3, r1
 8006900:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	041b      	lsls	r3, r3, #16
 8006908:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6959      	ldr	r1, [r3, #20]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006930:	041b      	lsls	r3, r3, #16
 8006932:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006942:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0206 	orr.w	r2, r2, #6
 800696e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	f000f800 	.word	0xf000f800

080069a0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f003 0304 	and.w	r3, r3, #4
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d023      	beq.n	8006a0a <HAL_LTDC_IRQHandler+0x6a>
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01e      	beq.n	8006a0a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0204 	bic.w	r2, r2, #4
 80069da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2204      	movs	r2, #4
 80069e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80069ea:	f043 0201 	orr.w	r2, r3, #1
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2204      	movs	r2, #4
 80069f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f86f 	bl	8006ae8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d023      	beq.n	8006a5c <HAL_LTDC_IRQHandler+0xbc>
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01e      	beq.n	8006a5c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0202 	bic.w	r2, r2, #2
 8006a2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2202      	movs	r2, #2
 8006a34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a3c:	f043 0202 	orr.w	r2, r3, #2
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2204      	movs	r2, #4
 8006a4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f846 	bl	8006ae8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d01b      	beq.n	8006a9e <HAL_LTDC_IRQHandler+0xfe>
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d016      	beq.n	8006a9e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0201 	bic.w	r2, r2, #1
 8006a7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2201      	movs	r2, #1
 8006a86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f82f 	bl	8006afc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01b      	beq.n	8006ae0 <HAL_LTDC_IRQHandler+0x140>
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f003 0308 	and.w	r3, r3, #8
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d016      	beq.n	8006ae0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0208 	bic.w	r2, r2, #8
 8006ac0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2208      	movs	r2, #8
 8006ac8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f818 	bl	8006b10 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006ae0:	bf00      	nop
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b24:	b5b0      	push	{r4, r5, r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d101      	bne.n	8006b3e <HAL_LTDC_ConfigLayer+0x1a>
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e02c      	b.n	8006b98 <HAL_LTDC_ConfigLayer+0x74>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2202      	movs	r2, #2
 8006b4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2134      	movs	r1, #52	; 0x34
 8006b54:	fb01 f303 	mul.w	r3, r1, r3
 8006b58:	4413      	add	r3, r2
 8006b5a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	4614      	mov	r4, r2
 8006b62:	461d      	mov	r5, r3
 8006b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	68b9      	ldr	r1, [r7, #8]
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f83b 	bl	8006bf4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2201      	movs	r2, #1
 8006b84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bdb0      	pop	{r4, r5, r7, pc}

08006ba0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d101      	bne.n	8006bb6 <HAL_LTDC_EnableDither+0x16>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e016      	b.n	8006be4 <HAL_LTDC_EnableDither+0x44>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006bc6:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <HAL_LTDC_EnableDither+0x50>)
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	4a09      	ldr	r2, [pc, #36]	; (8006bf0 <HAL_LTDC_EnableDither+0x50>)
 8006bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	40016800 	.word	0x40016800

08006bf4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b089      	sub	sp, #36	; 0x24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	0c1b      	lsrs	r3, r3, #16
 8006c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c10:	4413      	add	r3, r2
 8006c12:	041b      	lsls	r3, r3, #16
 8006c14:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	01db      	lsls	r3, r3, #7
 8006c20:	4413      	add	r3, r2
 8006c22:	3384      	adds	r3, #132	; 0x84
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	6812      	ldr	r2, [r2, #0]
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	01d2      	lsls	r2, r2, #7
 8006c30:	440a      	add	r2, r1
 8006c32:	3284      	adds	r2, #132	; 0x84
 8006c34:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c38:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	0c1b      	lsrs	r3, r3, #16
 8006c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006c4a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c4c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4619      	mov	r1, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	01db      	lsls	r3, r3, #7
 8006c58:	440b      	add	r3, r1
 8006c5a:	3384      	adds	r3, #132	; 0x84
 8006c5c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006c62:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c72:	4413      	add	r3, r2
 8006c74:	041b      	lsls	r3, r3, #16
 8006c76:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	01db      	lsls	r3, r3, #7
 8006c82:	4413      	add	r3, r2
 8006c84:	3384      	adds	r3, #132	; 0x84
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	01d2      	lsls	r2, r2, #7
 8006c92:	440a      	add	r2, r1
 8006c94:	3284      	adds	r2, #132	; 0x84
 8006c96:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c9a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	689a      	ldr	r2, [r3, #8]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006caa:	4413      	add	r3, r2
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	01db      	lsls	r3, r3, #7
 8006cb8:	440b      	add	r3, r1
 8006cba:	3384      	adds	r3, #132	; 0x84
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	01db      	lsls	r3, r3, #7
 8006cce:	4413      	add	r3, r2
 8006cd0:	3384      	adds	r3, #132	; 0x84
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	4611      	mov	r1, r2
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	01d2      	lsls	r2, r2, #7
 8006cde:	440a      	add	r2, r1
 8006ce0:	3284      	adds	r2, #132	; 0x84
 8006ce2:	f023 0307 	bic.w	r3, r3, #7
 8006ce6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	01db      	lsls	r3, r3, #7
 8006cf2:	4413      	add	r3, r2
 8006cf4:	3384      	adds	r3, #132	; 0x84
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d04:	021b      	lsls	r3, r3, #8
 8006d06:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d0e:	041b      	lsls	r3, r3, #16
 8006d10:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	061b      	lsls	r3, r3, #24
 8006d18:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	01db      	lsls	r3, r3, #7
 8006d24:	4413      	add	r3, r2
 8006d26:	3384      	adds	r3, #132	; 0x84
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	01db      	lsls	r3, r3, #7
 8006d34:	4413      	add	r3, r2
 8006d36:	3384      	adds	r3, #132	; 0x84
 8006d38:	461a      	mov	r2, r3
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d44:	461a      	mov	r2, r3
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4619      	mov	r1, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	01db      	lsls	r3, r3, #7
 8006d58:	440b      	add	r3, r1
 8006d5a:	3384      	adds	r3, #132	; 0x84
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	01db      	lsls	r3, r3, #7
 8006d6e:	4413      	add	r3, r2
 8006d70:	3384      	adds	r3, #132	; 0x84
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	6812      	ldr	r2, [r2, #0]
 8006d78:	4611      	mov	r1, r2
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	01d2      	lsls	r2, r2, #7
 8006d7e:	440a      	add	r2, r1
 8006d80:	3284      	adds	r2, #132	; 0x84
 8006d82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d86:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	01db      	lsls	r3, r3, #7
 8006d92:	4413      	add	r3, r2
 8006d94:	3384      	adds	r3, #132	; 0x84
 8006d96:	461a      	mov	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	01db      	lsls	r3, r3, #7
 8006da8:	4413      	add	r3, r2
 8006daa:	3384      	adds	r3, #132	; 0x84
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	6812      	ldr	r2, [r2, #0]
 8006db2:	4611      	mov	r1, r2
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	01d2      	lsls	r2, r2, #7
 8006db8:	440a      	add	r2, r1
 8006dba:	3284      	adds	r2, #132	; 0x84
 8006dbc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006dc0:	f023 0307 	bic.w	r3, r3, #7
 8006dc4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	69da      	ldr	r2, [r3, #28]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	6809      	ldr	r1, [r1, #0]
 8006dd2:	4608      	mov	r0, r1
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	01c9      	lsls	r1, r1, #7
 8006dd8:	4401      	add	r1, r0
 8006dda:	3184      	adds	r1, #132	; 0x84
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	461a      	mov	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	01db      	lsls	r3, r3, #7
 8006dea:	4413      	add	r3, r2
 8006dec:	3384      	adds	r3, #132	; 0x84
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	461a      	mov	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	01db      	lsls	r3, r3, #7
 8006dfa:	4413      	add	r3, r2
 8006dfc:	3384      	adds	r3, #132	; 0x84
 8006dfe:	461a      	mov	r2, r3
 8006e00:	2300      	movs	r3, #0
 8006e02:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	01db      	lsls	r3, r3, #7
 8006e0e:	4413      	add	r3, r2
 8006e10:	3384      	adds	r3, #132	; 0x84
 8006e12:	461a      	mov	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006e22:	2304      	movs	r3, #4
 8006e24:	61fb      	str	r3, [r7, #28]
 8006e26:	e01b      	b.n	8006e60 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d102      	bne.n	8006e36 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006e30:	2303      	movs	r3, #3
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	e014      	b.n	8006e60 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d00b      	beq.n	8006e56 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d007      	beq.n	8006e56 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d003      	beq.n	8006e56 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e52:	2b07      	cmp	r3, #7
 8006e54:	d102      	bne.n	8006e5c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006e56:	2302      	movs	r3, #2
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	e001      	b.n	8006e60 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	01db      	lsls	r3, r3, #7
 8006e6a:	4413      	add	r3, r2
 8006e6c:	3384      	adds	r3, #132	; 0x84
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	4611      	mov	r1, r2
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	01d2      	lsls	r2, r2, #7
 8006e7a:	440a      	add	r2, r1
 8006e7c:	3284      	adds	r2, #132	; 0x84
 8006e7e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006e82:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e88:	69fa      	ldr	r2, [r7, #28]
 8006e8a:	fb02 f303 	mul.w	r3, r2, r3
 8006e8e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	6859      	ldr	r1, [r3, #4]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	1acb      	subs	r3, r1, r3
 8006e9a:	69f9      	ldr	r1, [r7, #28]
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006ea2:	68f9      	ldr	r1, [r7, #12]
 8006ea4:	6809      	ldr	r1, [r1, #0]
 8006ea6:	4608      	mov	r0, r1
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	01c9      	lsls	r1, r1, #7
 8006eac:	4401      	add	r1, r0
 8006eae:	3184      	adds	r1, #132	; 0x84
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	01db      	lsls	r3, r3, #7
 8006ebe:	4413      	add	r3, r2
 8006ec0:	3384      	adds	r3, #132	; 0x84
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	6812      	ldr	r2, [r2, #0]
 8006ec8:	4611      	mov	r1, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	01d2      	lsls	r2, r2, #7
 8006ece:	440a      	add	r2, r1
 8006ed0:	3284      	adds	r2, #132	; 0x84
 8006ed2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ed6:	f023 0307 	bic.w	r3, r3, #7
 8006eda:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	01db      	lsls	r3, r3, #7
 8006ee6:	4413      	add	r3, r2
 8006ee8:	3384      	adds	r3, #132	; 0x84
 8006eea:	461a      	mov	r2, r3
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	01db      	lsls	r3, r3, #7
 8006efc:	4413      	add	r3, r2
 8006efe:	3384      	adds	r3, #132	; 0x84
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	6812      	ldr	r2, [r2, #0]
 8006f06:	4611      	mov	r1, r2
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	01d2      	lsls	r2, r2, #7
 8006f0c:	440a      	add	r2, r1
 8006f0e:	3284      	adds	r2, #132	; 0x84
 8006f10:	f043 0301 	orr.w	r3, r3, #1
 8006f14:	6013      	str	r3, [r2, #0]
}
 8006f16:	bf00      	nop
 8006f18:	3724      	adds	r7, #36	; 0x24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
	...

08006f24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e267      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d075      	beq.n	800702e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f42:	4b88      	ldr	r3, [pc, #544]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f003 030c 	and.w	r3, r3, #12
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d00c      	beq.n	8006f68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f4e:	4b85      	ldr	r3, [pc, #532]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f56:	2b08      	cmp	r3, #8
 8006f58:	d112      	bne.n	8006f80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f5a:	4b82      	ldr	r3, [pc, #520]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f66:	d10b      	bne.n	8006f80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f68:	4b7e      	ldr	r3, [pc, #504]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d05b      	beq.n	800702c <HAL_RCC_OscConfig+0x108>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d157      	bne.n	800702c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e242      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f88:	d106      	bne.n	8006f98 <HAL_RCC_OscConfig+0x74>
 8006f8a:	4b76      	ldr	r3, [pc, #472]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a75      	ldr	r2, [pc, #468]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	e01d      	b.n	8006fd4 <HAL_RCC_OscConfig+0xb0>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fa0:	d10c      	bne.n	8006fbc <HAL_RCC_OscConfig+0x98>
 8006fa2:	4b70      	ldr	r3, [pc, #448]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a6f      	ldr	r2, [pc, #444]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	4b6d      	ldr	r3, [pc, #436]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a6c      	ldr	r2, [pc, #432]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	e00b      	b.n	8006fd4 <HAL_RCC_OscConfig+0xb0>
 8006fbc:	4b69      	ldr	r3, [pc, #420]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a68      	ldr	r2, [pc, #416]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	4b66      	ldr	r3, [pc, #408]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a65      	ldr	r2, [pc, #404]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d013      	beq.n	8007004 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fdc:	f7fc fcec 	bl	80039b8 <HAL_GetTick>
 8006fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fe4:	f7fc fce8 	bl	80039b8 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b64      	cmp	r3, #100	; 0x64
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e207      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ff6:	4b5b      	ldr	r3, [pc, #364]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0f0      	beq.n	8006fe4 <HAL_RCC_OscConfig+0xc0>
 8007002:	e014      	b.n	800702e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007004:	f7fc fcd8 	bl	80039b8 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800700c:	f7fc fcd4 	bl	80039b8 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b64      	cmp	r3, #100	; 0x64
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e1f3      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800701e:	4b51      	ldr	r3, [pc, #324]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f0      	bne.n	800700c <HAL_RCC_OscConfig+0xe8>
 800702a:	e000      	b.n	800702e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800702c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d063      	beq.n	8007102 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800703a:	4b4a      	ldr	r3, [pc, #296]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f003 030c 	and.w	r3, r3, #12
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007046:	4b47      	ldr	r3, [pc, #284]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800704e:	2b08      	cmp	r3, #8
 8007050:	d11c      	bne.n	800708c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007052:	4b44      	ldr	r3, [pc, #272]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d116      	bne.n	800708c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800705e:	4b41      	ldr	r3, [pc, #260]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d005      	beq.n	8007076 <HAL_RCC_OscConfig+0x152>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d001      	beq.n	8007076 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e1c7      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007076:	4b3b      	ldr	r3, [pc, #236]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	4937      	ldr	r1, [pc, #220]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8007086:	4313      	orrs	r3, r2
 8007088:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800708a:	e03a      	b.n	8007102 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d020      	beq.n	80070d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007094:	4b34      	ldr	r3, [pc, #208]	; (8007168 <HAL_RCC_OscConfig+0x244>)
 8007096:	2201      	movs	r2, #1
 8007098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709a:	f7fc fc8d 	bl	80039b8 <HAL_GetTick>
 800709e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070a0:	e008      	b.n	80070b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070a2:	f7fc fc89 	bl	80039b8 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e1a8      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070b4:	4b2b      	ldr	r3, [pc, #172]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0f0      	beq.n	80070a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c0:	4b28      	ldr	r3, [pc, #160]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	00db      	lsls	r3, r3, #3
 80070ce:	4925      	ldr	r1, [pc, #148]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	600b      	str	r3, [r1, #0]
 80070d4:	e015      	b.n	8007102 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070d6:	4b24      	ldr	r3, [pc, #144]	; (8007168 <HAL_RCC_OscConfig+0x244>)
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070dc:	f7fc fc6c 	bl	80039b8 <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070e4:	f7fc fc68 	bl	80039b8 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e187      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070f6:	4b1b      	ldr	r3, [pc, #108]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f0      	bne.n	80070e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d036      	beq.n	800717c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d016      	beq.n	8007144 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007116:	4b15      	ldr	r3, [pc, #84]	; (800716c <HAL_RCC_OscConfig+0x248>)
 8007118:	2201      	movs	r2, #1
 800711a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800711c:	f7fc fc4c 	bl	80039b8 <HAL_GetTick>
 8007120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007122:	e008      	b.n	8007136 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007124:	f7fc fc48 	bl	80039b8 <HAL_GetTick>
 8007128:	4602      	mov	r2, r0
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	2b02      	cmp	r3, #2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e167      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007136:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <HAL_RCC_OscConfig+0x240>)
 8007138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0f0      	beq.n	8007124 <HAL_RCC_OscConfig+0x200>
 8007142:	e01b      	b.n	800717c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007144:	4b09      	ldr	r3, [pc, #36]	; (800716c <HAL_RCC_OscConfig+0x248>)
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800714a:	f7fc fc35 	bl	80039b8 <HAL_GetTick>
 800714e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007150:	e00e      	b.n	8007170 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007152:	f7fc fc31 	bl	80039b8 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d907      	bls.n	8007170 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e150      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
 8007164:	40023800 	.word	0x40023800
 8007168:	42470000 	.word	0x42470000
 800716c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007170:	4b88      	ldr	r3, [pc, #544]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 8007172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1ea      	bne.n	8007152 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8097 	beq.w	80072b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800718a:	2300      	movs	r3, #0
 800718c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800718e:	4b81      	ldr	r3, [pc, #516]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10f      	bne.n	80071ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800719a:	2300      	movs	r3, #0
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	4b7d      	ldr	r3, [pc, #500]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	4a7c      	ldr	r2, [pc, #496]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 80071a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071a8:	6413      	str	r3, [r2, #64]	; 0x40
 80071aa:	4b7a      	ldr	r3, [pc, #488]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b2:	60bb      	str	r3, [r7, #8]
 80071b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071b6:	2301      	movs	r3, #1
 80071b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ba:	4b77      	ldr	r3, [pc, #476]	; (8007398 <HAL_RCC_OscConfig+0x474>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d118      	bne.n	80071f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071c6:	4b74      	ldr	r3, [pc, #464]	; (8007398 <HAL_RCC_OscConfig+0x474>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a73      	ldr	r2, [pc, #460]	; (8007398 <HAL_RCC_OscConfig+0x474>)
 80071cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071d2:	f7fc fbf1 	bl	80039b8 <HAL_GetTick>
 80071d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d8:	e008      	b.n	80071ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071da:	f7fc fbed 	bl	80039b8 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e10c      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ec:	4b6a      	ldr	r3, [pc, #424]	; (8007398 <HAL_RCC_OscConfig+0x474>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0f0      	beq.n	80071da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d106      	bne.n	800720e <HAL_RCC_OscConfig+0x2ea>
 8007200:	4b64      	ldr	r3, [pc, #400]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 8007202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007204:	4a63      	ldr	r2, [pc, #396]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 8007206:	f043 0301 	orr.w	r3, r3, #1
 800720a:	6713      	str	r3, [r2, #112]	; 0x70
 800720c:	e01c      	b.n	8007248 <HAL_RCC_OscConfig+0x324>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	2b05      	cmp	r3, #5
 8007214:	d10c      	bne.n	8007230 <HAL_RCC_OscConfig+0x30c>
 8007216:	4b5f      	ldr	r3, [pc, #380]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 8007218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721a:	4a5e      	ldr	r2, [pc, #376]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 800721c:	f043 0304 	orr.w	r3, r3, #4
 8007220:	6713      	str	r3, [r2, #112]	; 0x70
 8007222:	4b5c      	ldr	r3, [pc, #368]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 8007224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007226:	4a5b      	ldr	r2, [pc, #364]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	6713      	str	r3, [r2, #112]	; 0x70
 800722e:	e00b      	b.n	8007248 <HAL_RCC_OscConfig+0x324>
 8007230:	4b58      	ldr	r3, [pc, #352]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 8007232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007234:	4a57      	ldr	r2, [pc, #348]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 8007236:	f023 0301 	bic.w	r3, r3, #1
 800723a:	6713      	str	r3, [r2, #112]	; 0x70
 800723c:	4b55      	ldr	r3, [pc, #340]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 800723e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007240:	4a54      	ldr	r2, [pc, #336]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 8007242:	f023 0304 	bic.w	r3, r3, #4
 8007246:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d015      	beq.n	800727c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007250:	f7fc fbb2 	bl	80039b8 <HAL_GetTick>
 8007254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007256:	e00a      	b.n	800726e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007258:	f7fc fbae 	bl	80039b8 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	f241 3288 	movw	r2, #5000	; 0x1388
 8007266:	4293      	cmp	r3, r2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e0cb      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800726e:	4b49      	ldr	r3, [pc, #292]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 8007270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0ee      	beq.n	8007258 <HAL_RCC_OscConfig+0x334>
 800727a:	e014      	b.n	80072a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800727c:	f7fc fb9c 	bl	80039b8 <HAL_GetTick>
 8007280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007282:	e00a      	b.n	800729a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007284:	f7fc fb98 	bl	80039b8 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007292:	4293      	cmp	r3, r2
 8007294:	d901      	bls.n	800729a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e0b5      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800729a:	4b3e      	ldr	r3, [pc, #248]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 800729c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1ee      	bne.n	8007284 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d105      	bne.n	80072b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ac:	4b39      	ldr	r3, [pc, #228]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 80072ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b0:	4a38      	ldr	r2, [pc, #224]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 80072b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 80a1 	beq.w	8007404 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072c2:	4b34      	ldr	r3, [pc, #208]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f003 030c 	and.w	r3, r3, #12
 80072ca:	2b08      	cmp	r3, #8
 80072cc:	d05c      	beq.n	8007388 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d141      	bne.n	800735a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072d6:	4b31      	ldr	r3, [pc, #196]	; (800739c <HAL_RCC_OscConfig+0x478>)
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072dc:	f7fc fb6c 	bl	80039b8 <HAL_GetTick>
 80072e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072e2:	e008      	b.n	80072f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072e4:	f7fc fb68 	bl	80039b8 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e087      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072f6:	4b27      	ldr	r3, [pc, #156]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1f0      	bne.n	80072e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69da      	ldr	r2, [r3, #28]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	431a      	orrs	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	019b      	lsls	r3, r3, #6
 8007312:	431a      	orrs	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007318:	085b      	lsrs	r3, r3, #1
 800731a:	3b01      	subs	r3, #1
 800731c:	041b      	lsls	r3, r3, #16
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	061b      	lsls	r3, r3, #24
 8007326:	491b      	ldr	r1, [pc, #108]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 8007328:	4313      	orrs	r3, r2
 800732a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800732c:	4b1b      	ldr	r3, [pc, #108]	; (800739c <HAL_RCC_OscConfig+0x478>)
 800732e:	2201      	movs	r2, #1
 8007330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007332:	f7fc fb41 	bl	80039b8 <HAL_GetTick>
 8007336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007338:	e008      	b.n	800734c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800733a:	f7fc fb3d 	bl	80039b8 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d901      	bls.n	800734c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e05c      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800734c:	4b11      	ldr	r3, [pc, #68]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0f0      	beq.n	800733a <HAL_RCC_OscConfig+0x416>
 8007358:	e054      	b.n	8007404 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800735a:	4b10      	ldr	r3, [pc, #64]	; (800739c <HAL_RCC_OscConfig+0x478>)
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007360:	f7fc fb2a 	bl	80039b8 <HAL_GetTick>
 8007364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007368:	f7fc fb26 	bl	80039b8 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e045      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800737a:	4b06      	ldr	r3, [pc, #24]	; (8007394 <HAL_RCC_OscConfig+0x470>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1f0      	bne.n	8007368 <HAL_RCC_OscConfig+0x444>
 8007386:	e03d      	b.n	8007404 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d107      	bne.n	80073a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e038      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
 8007394:	40023800 	.word	0x40023800
 8007398:	40007000 	.word	0x40007000
 800739c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073a0:	4b1b      	ldr	r3, [pc, #108]	; (8007410 <HAL_RCC_OscConfig+0x4ec>)
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d028      	beq.n	8007400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d121      	bne.n	8007400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d11a      	bne.n	8007400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073d0:	4013      	ands	r3, r2
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073d8:	4293      	cmp	r3, r2
 80073da:	d111      	bne.n	8007400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	3b01      	subs	r3, #1
 80073ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d107      	bne.n	8007400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d001      	beq.n	8007404 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e000      	b.n	8007406 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	40023800 	.word	0x40023800

08007414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e0cc      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007428:	4b68      	ldr	r3, [pc, #416]	; (80075cc <HAL_RCC_ClockConfig+0x1b8>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 030f 	and.w	r3, r3, #15
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	429a      	cmp	r2, r3
 8007434:	d90c      	bls.n	8007450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007436:	4b65      	ldr	r3, [pc, #404]	; (80075cc <HAL_RCC_ClockConfig+0x1b8>)
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800743e:	4b63      	ldr	r3, [pc, #396]	; (80075cc <HAL_RCC_ClockConfig+0x1b8>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 030f 	and.w	r3, r3, #15
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	429a      	cmp	r2, r3
 800744a:	d001      	beq.n	8007450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e0b8      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d020      	beq.n	800749e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007468:	4b59      	ldr	r3, [pc, #356]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	4a58      	ldr	r2, [pc, #352]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 800746e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007480:	4b53      	ldr	r3, [pc, #332]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	4a52      	ldr	r2, [pc, #328]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800748a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800748c:	4b50      	ldr	r3, [pc, #320]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	494d      	ldr	r1, [pc, #308]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 800749a:	4313      	orrs	r3, r2
 800749c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d044      	beq.n	8007534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d107      	bne.n	80074c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074b2:	4b47      	ldr	r3, [pc, #284]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d119      	bne.n	80074f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e07f      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d003      	beq.n	80074d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d107      	bne.n	80074e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074d2:	4b3f      	ldr	r3, [pc, #252]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d109      	bne.n	80074f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e06f      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e2:	4b3b      	ldr	r3, [pc, #236]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e067      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074f2:	4b37      	ldr	r3, [pc, #220]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f023 0203 	bic.w	r2, r3, #3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	4934      	ldr	r1, [pc, #208]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007500:	4313      	orrs	r3, r2
 8007502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007504:	f7fc fa58 	bl	80039b8 <HAL_GetTick>
 8007508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800750a:	e00a      	b.n	8007522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800750c:	f7fc fa54 	bl	80039b8 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	f241 3288 	movw	r2, #5000	; 0x1388
 800751a:	4293      	cmp	r3, r2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e04f      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007522:	4b2b      	ldr	r3, [pc, #172]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 020c 	and.w	r2, r3, #12
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	429a      	cmp	r2, r3
 8007532:	d1eb      	bne.n	800750c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007534:	4b25      	ldr	r3, [pc, #148]	; (80075cc <HAL_RCC_ClockConfig+0x1b8>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 030f 	and.w	r3, r3, #15
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	429a      	cmp	r2, r3
 8007540:	d20c      	bcs.n	800755c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007542:	4b22      	ldr	r3, [pc, #136]	; (80075cc <HAL_RCC_ClockConfig+0x1b8>)
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	b2d2      	uxtb	r2, r2
 8007548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800754a:	4b20      	ldr	r3, [pc, #128]	; (80075cc <HAL_RCC_ClockConfig+0x1b8>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 030f 	and.w	r3, r3, #15
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	429a      	cmp	r2, r3
 8007556:	d001      	beq.n	800755c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e032      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d008      	beq.n	800757a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007568:	4b19      	ldr	r3, [pc, #100]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	4916      	ldr	r1, [pc, #88]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007576:	4313      	orrs	r3, r2
 8007578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b00      	cmp	r3, #0
 8007584:	d009      	beq.n	800759a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007586:	4b12      	ldr	r3, [pc, #72]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	490e      	ldr	r1, [pc, #56]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007596:	4313      	orrs	r3, r2
 8007598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800759a:	f000 f821 	bl	80075e0 <HAL_RCC_GetSysClockFreq>
 800759e:	4602      	mov	r2, r0
 80075a0:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	091b      	lsrs	r3, r3, #4
 80075a6:	f003 030f 	and.w	r3, r3, #15
 80075aa:	490a      	ldr	r1, [pc, #40]	; (80075d4 <HAL_RCC_ClockConfig+0x1c0>)
 80075ac:	5ccb      	ldrb	r3, [r1, r3]
 80075ae:	fa22 f303 	lsr.w	r3, r2, r3
 80075b2:	4a09      	ldr	r2, [pc, #36]	; (80075d8 <HAL_RCC_ClockConfig+0x1c4>)
 80075b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075b6:	4b09      	ldr	r3, [pc, #36]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fa fef2 	bl	80023a4 <HAL_InitTick>

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	40023c00 	.word	0x40023c00
 80075d0:	40023800 	.word	0x40023800
 80075d4:	0800df70 	.word	0x0800df70
 80075d8:	20000010 	.word	0x20000010
 80075dc:	20000064 	.word	0x20000064

080075e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075e4:	b094      	sub	sp, #80	; 0x50
 80075e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	647b      	str	r3, [r7, #68]	; 0x44
 80075ec:	2300      	movs	r3, #0
 80075ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f0:	2300      	movs	r3, #0
 80075f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80075f4:	2300      	movs	r3, #0
 80075f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075f8:	4b79      	ldr	r3, [pc, #484]	; (80077e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f003 030c 	and.w	r3, r3, #12
 8007600:	2b08      	cmp	r3, #8
 8007602:	d00d      	beq.n	8007620 <HAL_RCC_GetSysClockFreq+0x40>
 8007604:	2b08      	cmp	r3, #8
 8007606:	f200 80e1 	bhi.w	80077cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <HAL_RCC_GetSysClockFreq+0x34>
 800760e:	2b04      	cmp	r3, #4
 8007610:	d003      	beq.n	800761a <HAL_RCC_GetSysClockFreq+0x3a>
 8007612:	e0db      	b.n	80077cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007614:	4b73      	ldr	r3, [pc, #460]	; (80077e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007616:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007618:	e0db      	b.n	80077d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800761a:	4b73      	ldr	r3, [pc, #460]	; (80077e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800761c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800761e:	e0d8      	b.n	80077d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007620:	4b6f      	ldr	r3, [pc, #444]	; (80077e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007628:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800762a:	4b6d      	ldr	r3, [pc, #436]	; (80077e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d063      	beq.n	80076fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007636:	4b6a      	ldr	r3, [pc, #424]	; (80077e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	099b      	lsrs	r3, r3, #6
 800763c:	2200      	movs	r2, #0
 800763e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007640:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007648:	633b      	str	r3, [r7, #48]	; 0x30
 800764a:	2300      	movs	r3, #0
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
 800764e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007652:	4622      	mov	r2, r4
 8007654:	462b      	mov	r3, r5
 8007656:	f04f 0000 	mov.w	r0, #0
 800765a:	f04f 0100 	mov.w	r1, #0
 800765e:	0159      	lsls	r1, r3, #5
 8007660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007664:	0150      	lsls	r0, r2, #5
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4621      	mov	r1, r4
 800766c:	1a51      	subs	r1, r2, r1
 800766e:	6139      	str	r1, [r7, #16]
 8007670:	4629      	mov	r1, r5
 8007672:	eb63 0301 	sbc.w	r3, r3, r1
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	f04f 0200 	mov.w	r2, #0
 800767c:	f04f 0300 	mov.w	r3, #0
 8007680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007684:	4659      	mov	r1, fp
 8007686:	018b      	lsls	r3, r1, #6
 8007688:	4651      	mov	r1, sl
 800768a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800768e:	4651      	mov	r1, sl
 8007690:	018a      	lsls	r2, r1, #6
 8007692:	4651      	mov	r1, sl
 8007694:	ebb2 0801 	subs.w	r8, r2, r1
 8007698:	4659      	mov	r1, fp
 800769a:	eb63 0901 	sbc.w	r9, r3, r1
 800769e:	f04f 0200 	mov.w	r2, #0
 80076a2:	f04f 0300 	mov.w	r3, #0
 80076a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076b2:	4690      	mov	r8, r2
 80076b4:	4699      	mov	r9, r3
 80076b6:	4623      	mov	r3, r4
 80076b8:	eb18 0303 	adds.w	r3, r8, r3
 80076bc:	60bb      	str	r3, [r7, #8]
 80076be:	462b      	mov	r3, r5
 80076c0:	eb49 0303 	adc.w	r3, r9, r3
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	f04f 0300 	mov.w	r3, #0
 80076ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80076d2:	4629      	mov	r1, r5
 80076d4:	024b      	lsls	r3, r1, #9
 80076d6:	4621      	mov	r1, r4
 80076d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80076dc:	4621      	mov	r1, r4
 80076de:	024a      	lsls	r2, r1, #9
 80076e0:	4610      	mov	r0, r2
 80076e2:	4619      	mov	r1, r3
 80076e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076e6:	2200      	movs	r2, #0
 80076e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076f0:	f7f8 fde6 	bl	80002c0 <__aeabi_uldivmod>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4613      	mov	r3, r2
 80076fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076fc:	e058      	b.n	80077b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076fe:	4b38      	ldr	r3, [pc, #224]	; (80077e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	099b      	lsrs	r3, r3, #6
 8007704:	2200      	movs	r2, #0
 8007706:	4618      	mov	r0, r3
 8007708:	4611      	mov	r1, r2
 800770a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800770e:	623b      	str	r3, [r7, #32]
 8007710:	2300      	movs	r3, #0
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
 8007714:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007718:	4642      	mov	r2, r8
 800771a:	464b      	mov	r3, r9
 800771c:	f04f 0000 	mov.w	r0, #0
 8007720:	f04f 0100 	mov.w	r1, #0
 8007724:	0159      	lsls	r1, r3, #5
 8007726:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800772a:	0150      	lsls	r0, r2, #5
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4641      	mov	r1, r8
 8007732:	ebb2 0a01 	subs.w	sl, r2, r1
 8007736:	4649      	mov	r1, r9
 8007738:	eb63 0b01 	sbc.w	fp, r3, r1
 800773c:	f04f 0200 	mov.w	r2, #0
 8007740:	f04f 0300 	mov.w	r3, #0
 8007744:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007748:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800774c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007750:	ebb2 040a 	subs.w	r4, r2, sl
 8007754:	eb63 050b 	sbc.w	r5, r3, fp
 8007758:	f04f 0200 	mov.w	r2, #0
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	00eb      	lsls	r3, r5, #3
 8007762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007766:	00e2      	lsls	r2, r4, #3
 8007768:	4614      	mov	r4, r2
 800776a:	461d      	mov	r5, r3
 800776c:	4643      	mov	r3, r8
 800776e:	18e3      	adds	r3, r4, r3
 8007770:	603b      	str	r3, [r7, #0]
 8007772:	464b      	mov	r3, r9
 8007774:	eb45 0303 	adc.w	r3, r5, r3
 8007778:	607b      	str	r3, [r7, #4]
 800777a:	f04f 0200 	mov.w	r2, #0
 800777e:	f04f 0300 	mov.w	r3, #0
 8007782:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007786:	4629      	mov	r1, r5
 8007788:	028b      	lsls	r3, r1, #10
 800778a:	4621      	mov	r1, r4
 800778c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007790:	4621      	mov	r1, r4
 8007792:	028a      	lsls	r2, r1, #10
 8007794:	4610      	mov	r0, r2
 8007796:	4619      	mov	r1, r3
 8007798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800779a:	2200      	movs	r2, #0
 800779c:	61bb      	str	r3, [r7, #24]
 800779e:	61fa      	str	r2, [r7, #28]
 80077a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077a4:	f7f8 fd8c 	bl	80002c0 <__aeabi_uldivmod>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4613      	mov	r3, r2
 80077ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077b0:	4b0b      	ldr	r3, [pc, #44]	; (80077e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	0c1b      	lsrs	r3, r3, #16
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	3301      	adds	r3, #1
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80077c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80077ca:	e002      	b.n	80077d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077cc:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80077ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80077d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3750      	adds	r7, #80	; 0x50
 80077d8:	46bd      	mov	sp, r7
 80077da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077de:	bf00      	nop
 80077e0:	40023800 	.word	0x40023800
 80077e4:	00f42400 	.word	0x00f42400
 80077e8:	007a1200 	.word	0x007a1200

080077ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077f0:	4b03      	ldr	r3, [pc, #12]	; (8007800 <HAL_RCC_GetHCLKFreq+0x14>)
 80077f2:	681b      	ldr	r3, [r3, #0]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	20000010 	.word	0x20000010

08007804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007808:	f7ff fff0 	bl	80077ec <HAL_RCC_GetHCLKFreq>
 800780c:	4602      	mov	r2, r0
 800780e:	4b05      	ldr	r3, [pc, #20]	; (8007824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	0a9b      	lsrs	r3, r3, #10
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	4903      	ldr	r1, [pc, #12]	; (8007828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800781a:	5ccb      	ldrb	r3, [r1, r3]
 800781c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007820:	4618      	mov	r0, r3
 8007822:	bd80      	pop	{r7, pc}
 8007824:	40023800 	.word	0x40023800
 8007828:	0800df80 	.word	0x0800df80

0800782c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007830:	f7ff ffdc 	bl	80077ec <HAL_RCC_GetHCLKFreq>
 8007834:	4602      	mov	r2, r0
 8007836:	4b05      	ldr	r3, [pc, #20]	; (800784c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	0b5b      	lsrs	r3, r3, #13
 800783c:	f003 0307 	and.w	r3, r3, #7
 8007840:	4903      	ldr	r1, [pc, #12]	; (8007850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007842:	5ccb      	ldrb	r3, [r1, r3]
 8007844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007848:	4618      	mov	r0, r3
 800784a:	bd80      	pop	{r7, pc}
 800784c:	40023800 	.word	0x40023800
 8007850:	0800df80 	.word	0x0800df80

08007854 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	220f      	movs	r2, #15
 8007862:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007864:	4b12      	ldr	r3, [pc, #72]	; (80078b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f003 0203 	and.w	r2, r3, #3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007870:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800787c:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <HAL_RCC_GetClockConfig+0x5c>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007888:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <HAL_RCC_GetClockConfig+0x5c>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	08db      	lsrs	r3, r3, #3
 800788e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007896:	4b07      	ldr	r3, [pc, #28]	; (80078b4 <HAL_RCC_GetClockConfig+0x60>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 020f 	and.w	r2, r3, #15
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	601a      	str	r2, [r3, #0]
}
 80078a2:	bf00      	nop
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	40023800 	.word	0x40023800
 80078b4:	40023c00 	.word	0x40023c00

080078b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10b      	bne.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d105      	bne.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d075      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80078ec:	4b91      	ldr	r3, [pc, #580]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80078f2:	f7fc f861 	bl	80039b8 <HAL_GetTick>
 80078f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078f8:	e008      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80078fa:	f7fc f85d 	bl	80039b8 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	2b02      	cmp	r3, #2
 8007906:	d901      	bls.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e189      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800790c:	4b8a      	ldr	r3, [pc, #552]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1f0      	bne.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d009      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	019a      	lsls	r2, r3, #6
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	071b      	lsls	r3, r3, #28
 8007930:	4981      	ldr	r1, [pc, #516]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007932:	4313      	orrs	r3, r2
 8007934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d01f      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007944:	4b7c      	ldr	r3, [pc, #496]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800794a:	0f1b      	lsrs	r3, r3, #28
 800794c:	f003 0307 	and.w	r3, r3, #7
 8007950:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	019a      	lsls	r2, r3, #6
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	061b      	lsls	r3, r3, #24
 800795e:	431a      	orrs	r2, r3
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	071b      	lsls	r3, r3, #28
 8007964:	4974      	ldr	r1, [pc, #464]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007966:	4313      	orrs	r3, r2
 8007968:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800796c:	4b72      	ldr	r3, [pc, #456]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800796e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007972:	f023 021f 	bic.w	r2, r3, #31
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	3b01      	subs	r3, #1
 800797c:	496e      	ldr	r1, [pc, #440]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800797e:	4313      	orrs	r3, r2
 8007980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00d      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	019a      	lsls	r2, r3, #6
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	061b      	lsls	r3, r3, #24
 800799c:	431a      	orrs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	071b      	lsls	r3, r3, #28
 80079a4:	4964      	ldr	r1, [pc, #400]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80079ac:	4b61      	ldr	r3, [pc, #388]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80079ae:	2201      	movs	r2, #1
 80079b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079b2:	f7fc f801 	bl	80039b8 <HAL_GetTick>
 80079b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079b8:	e008      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80079ba:	f7fb fffd 	bl	80039b8 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d901      	bls.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e129      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079cc:	4b5a      	ldr	r3, [pc, #360]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d0f0      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d105      	bne.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d079      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80079f0:	4b52      	ldr	r3, [pc, #328]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079f6:	f7fb ffdf 	bl	80039b8 <HAL_GetTick>
 80079fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079fc:	e008      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80079fe:	f7fb ffdb 	bl	80039b8 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e107      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a10:	4b49      	ldr	r3, [pc, #292]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a1c:	d0ef      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0304 	and.w	r3, r3, #4
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d020      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a2a:	4b43      	ldr	r3, [pc, #268]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a30:	0f1b      	lsrs	r3, r3, #28
 8007a32:	f003 0307 	and.w	r3, r3, #7
 8007a36:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	019a      	lsls	r2, r3, #6
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	061b      	lsls	r3, r3, #24
 8007a44:	431a      	orrs	r2, r3
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	071b      	lsls	r3, r3, #28
 8007a4a:	493b      	ldr	r1, [pc, #236]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a52:	4b39      	ldr	r3, [pc, #228]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	021b      	lsls	r3, r3, #8
 8007a64:	4934      	ldr	r1, [pc, #208]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01e      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a78:	4b2f      	ldr	r3, [pc, #188]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a7e:	0e1b      	lsrs	r3, r3, #24
 8007a80:	f003 030f 	and.w	r3, r3, #15
 8007a84:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	019a      	lsls	r2, r3, #6
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	061b      	lsls	r3, r3, #24
 8007a90:	431a      	orrs	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	071b      	lsls	r3, r3, #28
 8007a98:	4927      	ldr	r1, [pc, #156]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007aa0:	4b25      	ldr	r3, [pc, #148]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	4922      	ldr	r1, [pc, #136]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ab6:	4b21      	ldr	r3, [pc, #132]	; (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007ab8:	2201      	movs	r2, #1
 8007aba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007abc:	f7fb ff7c 	bl	80039b8 <HAL_GetTick>
 8007ac0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ac2:	e008      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007ac4:	f7fb ff78 	bl	80039b8 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e0a4      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ad6:	4b18      	ldr	r3, [pc, #96]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ae2:	d1ef      	bne.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 808b 	beq.w	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	4b10      	ldr	r3, [pc, #64]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afa:	4a0f      	ldr	r2, [pc, #60]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b00:	6413      	str	r3, [r2, #64]	; 0x40
 8007b02:	4b0d      	ldr	r3, [pc, #52]	; (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007b0e:	4b0c      	ldr	r3, [pc, #48]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a0b      	ldr	r2, [pc, #44]	; (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b1a:	f7fb ff4d 	bl	80039b8 <HAL_GetTick>
 8007b1e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b20:	e010      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007b22:	f7fb ff49 	bl	80039b8 <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d909      	bls.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e075      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007b34:	42470068 	.word	0x42470068
 8007b38:	40023800 	.word	0x40023800
 8007b3c:	42470070 	.word	0x42470070
 8007b40:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b44:	4b38      	ldr	r3, [pc, #224]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0e8      	beq.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b50:	4b36      	ldr	r3, [pc, #216]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b58:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d02f      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d028      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b6e:	4b2f      	ldr	r3, [pc, #188]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b76:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b78:	4b2d      	ldr	r3, [pc, #180]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b7e:	4b2c      	ldr	r3, [pc, #176]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b84:	4a29      	ldr	r2, [pc, #164]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b8a:	4b28      	ldr	r3, [pc, #160]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d114      	bne.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007b96:	f7fb ff0f 	bl	80039b8 <HAL_GetTick>
 8007b9a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b9c:	e00a      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b9e:	f7fb ff0b 	bl	80039b8 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d901      	bls.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e035      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bb4:	4b1d      	ldr	r3, [pc, #116]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0ee      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bcc:	d10d      	bne.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007bce:	4b17      	ldr	r3, [pc, #92]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007be2:	4912      	ldr	r1, [pc, #72]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	608b      	str	r3, [r1, #8]
 8007be8:	e005      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007bea:	4b10      	ldr	r3, [pc, #64]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	4a0f      	ldr	r2, [pc, #60]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bf0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007bf4:	6093      	str	r3, [r2, #8]
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c02:	490a      	ldr	r1, [pc, #40]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0310 	and.w	r3, r3, #16
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d004      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007c1a:	4b06      	ldr	r3, [pc, #24]	; (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007c1c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	40007000 	.word	0x40007000
 8007c2c:	40023800 	.word	0x40023800
 8007c30:	42470e40 	.word	0x42470e40
 8007c34:	424711e0 	.word	0x424711e0

08007c38 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e025      	b.n	8007c98 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d106      	bne.n	8007c66 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7fa fb95 	bl	8002390 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2202      	movs	r2, #2
 8007c6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3304      	adds	r3, #4
 8007c76:	4619      	mov	r1, r3
 8007c78:	4610      	mov	r0, r2
 8007c7a:	f001 fd91 	bl	80097a0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6818      	ldr	r0, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	461a      	mov	r2, r3
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	f001 fde6 	bl	800985a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007cb2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d101      	bne.n	8007cbe <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e021      	b.n	8007d02 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d002      	beq.n	8007cca <HAL_SDRAM_SendCommand+0x2a>
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
 8007cc6:	2b05      	cmp	r3, #5
 8007cc8:	d118      	bne.n	8007cfc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2202      	movs	r2, #2
 8007cce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	68b9      	ldr	r1, [r7, #8]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f001 fe26 	bl	800992c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d104      	bne.n	8007cf2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2205      	movs	r2, #5
 8007cec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007cf0:	e006      	b.n	8007d00 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007cfa:	e001      	b.n	8007d00 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e000      	b.n	8007d02 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d101      	bne.n	8007d24 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007d20:	2302      	movs	r3, #2
 8007d22:	e016      	b.n	8007d52 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d10f      	bne.n	8007d50 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 fe31 	bl	80099a6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e000      	b.n	8007d52 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b082      	sub	sp, #8
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e07b      	b.n	8007e64 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d108      	bne.n	8007d86 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d7c:	d009      	beq.n	8007d92 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	61da      	str	r2, [r3, #28]
 8007d84:	e005      	b.n	8007d92 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d106      	bne.n	8007db2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7fa f925 	bl	8001ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2202      	movs	r2, #2
 8007db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dc8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007de4:	431a      	orrs	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	431a      	orrs	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e02:	431a      	orrs	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e16:	ea42 0103 	orr.w	r1, r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	0c1b      	lsrs	r3, r3, #16
 8007e30:	f003 0104 	and.w	r1, r3, #4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	f003 0210 	and.w	r2, r3, #16
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	430a      	orrs	r2, r1
 8007e42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	69da      	ldr	r2, [r3, #28]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d101      	bne.n	8007e7e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e01a      	b.n	8007eb4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2202      	movs	r2, #2
 8007e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e94:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7fa f8f8 	bl	800208c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d101      	bne.n	8007ede <HAL_SPI_Transmit+0x22>
 8007eda:	2302      	movs	r3, #2
 8007edc:	e126      	b.n	800812c <HAL_SPI_Transmit+0x270>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ee6:	f7fb fd67 	bl	80039b8 <HAL_GetTick>
 8007eea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007eec:	88fb      	ldrh	r3, [r7, #6]
 8007eee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d002      	beq.n	8007f02 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007efc:	2302      	movs	r3, #2
 8007efe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f00:	e10b      	b.n	800811a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <HAL_SPI_Transmit+0x52>
 8007f08:	88fb      	ldrh	r3, [r7, #6]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d102      	bne.n	8007f14 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f12:	e102      	b.n	800811a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2203      	movs	r2, #3
 8007f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	88fa      	ldrh	r2, [r7, #6]
 8007f2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	88fa      	ldrh	r2, [r7, #6]
 8007f32:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f5a:	d10f      	bne.n	8007f7c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f86:	2b40      	cmp	r3, #64	; 0x40
 8007f88:	d007      	beq.n	8007f9a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fa2:	d14b      	bne.n	800803c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <HAL_SPI_Transmit+0xf6>
 8007fac:	8afb      	ldrh	r3, [r7, #22]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d13e      	bne.n	8008030 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb6:	881a      	ldrh	r2, [r3, #0]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc2:	1c9a      	adds	r2, r3, #2
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007fd6:	e02b      	b.n	8008030 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d112      	bne.n	800800c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	881a      	ldrh	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	1c9a      	adds	r2, r3, #2
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008000:	b29b      	uxth	r3, r3
 8008002:	3b01      	subs	r3, #1
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	86da      	strh	r2, [r3, #54]	; 0x36
 800800a:	e011      	b.n	8008030 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800800c:	f7fb fcd4 	bl	80039b8 <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	429a      	cmp	r2, r3
 800801a:	d803      	bhi.n	8008024 <HAL_SPI_Transmit+0x168>
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008022:	d102      	bne.n	800802a <HAL_SPI_Transmit+0x16e>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d102      	bne.n	8008030 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800802e:	e074      	b.n	800811a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008034:	b29b      	uxth	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1ce      	bne.n	8007fd8 <HAL_SPI_Transmit+0x11c>
 800803a:	e04c      	b.n	80080d6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d002      	beq.n	800804a <HAL_SPI_Transmit+0x18e>
 8008044:	8afb      	ldrh	r3, [r7, #22]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d140      	bne.n	80080cc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	330c      	adds	r3, #12
 8008054:	7812      	ldrb	r2, [r2, #0]
 8008056:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008070:	e02c      	b.n	80080cc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b02      	cmp	r3, #2
 800807e:	d113      	bne.n	80080a8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	330c      	adds	r3, #12
 800808a:	7812      	ldrb	r2, [r2, #0]
 800808c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008092:	1c5a      	adds	r2, r3, #1
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800809c:	b29b      	uxth	r3, r3
 800809e:	3b01      	subs	r3, #1
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80080a6:	e011      	b.n	80080cc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080a8:	f7fb fc86 	bl	80039b8 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d803      	bhi.n	80080c0 <HAL_SPI_Transmit+0x204>
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080be:	d102      	bne.n	80080c6 <HAL_SPI_Transmit+0x20a>
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d102      	bne.n	80080cc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080ca:	e026      	b.n	800811a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1cd      	bne.n	8008072 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 fbda 	bl	8008894 <SPI_EndRxTxTransaction>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d002      	beq.n	80080ec <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2220      	movs	r2, #32
 80080ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10a      	bne.n	800810a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080f4:	2300      	movs	r3, #0
 80080f6:	613b      	str	r3, [r7, #16]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	77fb      	strb	r3, [r7, #31]
 8008116:	e000      	b.n	800811a <HAL_SPI_Transmit+0x25e>
  }

error:
 8008118:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800812a:	7ffb      	ldrb	r3, [r7, #31]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3720      	adds	r7, #32
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af02      	add	r7, sp, #8
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	4613      	mov	r3, r2
 8008142:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008150:	d112      	bne.n	8008178 <HAL_SPI_Receive+0x44>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10e      	bne.n	8008178 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2204      	movs	r2, #4
 800815e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008162:	88fa      	ldrh	r2, [r7, #6]
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	4613      	mov	r3, r2
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 f8f1 	bl	8008356 <HAL_SPI_TransmitReceive>
 8008174:	4603      	mov	r3, r0
 8008176:	e0ea      	b.n	800834e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800817e:	2b01      	cmp	r3, #1
 8008180:	d101      	bne.n	8008186 <HAL_SPI_Receive+0x52>
 8008182:	2302      	movs	r3, #2
 8008184:	e0e3      	b.n	800834e <HAL_SPI_Receive+0x21a>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800818e:	f7fb fc13 	bl	80039b8 <HAL_GetTick>
 8008192:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b01      	cmp	r3, #1
 800819e:	d002      	beq.n	80081a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80081a0:	2302      	movs	r3, #2
 80081a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081a4:	e0ca      	b.n	800833c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <HAL_SPI_Receive+0x7e>
 80081ac:	88fb      	ldrh	r3, [r7, #6]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d102      	bne.n	80081b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081b6:	e0c1      	b.n	800833c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2204      	movs	r2, #4
 80081bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	88fa      	ldrh	r2, [r7, #6]
 80081d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	88fa      	ldrh	r2, [r7, #6]
 80081d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081fe:	d10f      	bne.n	8008220 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800820e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800821e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822a:	2b40      	cmp	r3, #64	; 0x40
 800822c:	d007      	beq.n	800823e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800823c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d162      	bne.n	800830c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008246:	e02e      	b.n	80082a6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b01      	cmp	r3, #1
 8008254:	d115      	bne.n	8008282 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f103 020c 	add.w	r2, r3, #12
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008262:	7812      	ldrb	r2, [r2, #0]
 8008264:	b2d2      	uxtb	r2, r2
 8008266:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826c:	1c5a      	adds	r2, r3, #1
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008276:	b29b      	uxth	r3, r3
 8008278:	3b01      	subs	r3, #1
 800827a:	b29a      	uxth	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008280:	e011      	b.n	80082a6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008282:	f7fb fb99 	bl	80039b8 <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	429a      	cmp	r2, r3
 8008290:	d803      	bhi.n	800829a <HAL_SPI_Receive+0x166>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008298:	d102      	bne.n	80082a0 <HAL_SPI_Receive+0x16c>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80082a4:	e04a      	b.n	800833c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1cb      	bne.n	8008248 <HAL_SPI_Receive+0x114>
 80082b0:	e031      	b.n	8008316 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d113      	bne.n	80082e8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ca:	b292      	uxth	r2, r2
 80082cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	1c9a      	adds	r2, r3, #2
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082dc:	b29b      	uxth	r3, r3
 80082de:	3b01      	subs	r3, #1
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082e6:	e011      	b.n	800830c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082e8:	f7fb fb66 	bl	80039b8 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d803      	bhi.n	8008300 <HAL_SPI_Receive+0x1cc>
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fe:	d102      	bne.n	8008306 <HAL_SPI_Receive+0x1d2>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d102      	bne.n	800830c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	75fb      	strb	r3, [r7, #23]
          goto error;
 800830a:	e017      	b.n	800833c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008310:	b29b      	uxth	r3, r3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1cd      	bne.n	80082b2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 fa54 	bl	80087c8 <SPI_EndRxTransaction>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2220      	movs	r2, #32
 800832a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	75fb      	strb	r3, [r7, #23]
 8008338:	e000      	b.n	800833c <HAL_SPI_Receive+0x208>
  }

error :
 800833a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800834c:	7dfb      	ldrb	r3, [r7, #23]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b08c      	sub	sp, #48	; 0x30
 800835a:	af00      	add	r7, sp, #0
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	607a      	str	r2, [r7, #4]
 8008362:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008364:	2301      	movs	r3, #1
 8008366:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008374:	2b01      	cmp	r3, #1
 8008376:	d101      	bne.n	800837c <HAL_SPI_TransmitReceive+0x26>
 8008378:	2302      	movs	r3, #2
 800837a:	e18a      	b.n	8008692 <HAL_SPI_TransmitReceive+0x33c>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008384:	f7fb fb18 	bl	80039b8 <HAL_GetTick>
 8008388:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800839a:	887b      	ldrh	r3, [r7, #2]
 800839c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800839e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d00f      	beq.n	80083c6 <HAL_SPI_TransmitReceive+0x70>
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083ac:	d107      	bne.n	80083be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d103      	bne.n	80083be <HAL_SPI_TransmitReceive+0x68>
 80083b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d003      	beq.n	80083c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80083be:	2302      	movs	r3, #2
 80083c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083c4:	e15b      	b.n	800867e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d005      	beq.n	80083d8 <HAL_SPI_TransmitReceive+0x82>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <HAL_SPI_TransmitReceive+0x82>
 80083d2:	887b      	ldrh	r3, [r7, #2]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d103      	bne.n	80083e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083de:	e14e      	b.n	800867e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	d003      	beq.n	80083f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2205      	movs	r2, #5
 80083f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	887a      	ldrh	r2, [r7, #2]
 8008404:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	887a      	ldrh	r2, [r7, #2]
 800840a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	887a      	ldrh	r2, [r7, #2]
 8008416:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	887a      	ldrh	r2, [r7, #2]
 800841c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008434:	2b40      	cmp	r3, #64	; 0x40
 8008436:	d007      	beq.n	8008448 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008450:	d178      	bne.n	8008544 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d002      	beq.n	8008460 <HAL_SPI_TransmitReceive+0x10a>
 800845a:	8b7b      	ldrh	r3, [r7, #26]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d166      	bne.n	800852e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008464:	881a      	ldrh	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008470:	1c9a      	adds	r2, r3, #2
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800847a:	b29b      	uxth	r3, r3
 800847c:	3b01      	subs	r3, #1
 800847e:	b29a      	uxth	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008484:	e053      	b.n	800852e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b02      	cmp	r3, #2
 8008492:	d11b      	bne.n	80084cc <HAL_SPI_TransmitReceive+0x176>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d016      	beq.n	80084cc <HAL_SPI_TransmitReceive+0x176>
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d113      	bne.n	80084cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a8:	881a      	ldrh	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b4:	1c9a      	adds	r2, r3, #2
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084be:	b29b      	uxth	r3, r3
 80084c0:	3b01      	subs	r3, #1
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d119      	bne.n	800850e <HAL_SPI_TransmitReceive+0x1b8>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084de:	b29b      	uxth	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d014      	beq.n	800850e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68da      	ldr	r2, [r3, #12]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ee:	b292      	uxth	r2, r2
 80084f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f6:	1c9a      	adds	r2, r3, #2
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008500:	b29b      	uxth	r3, r3
 8008502:	3b01      	subs	r3, #1
 8008504:	b29a      	uxth	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800850a:	2301      	movs	r3, #1
 800850c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800850e:	f7fb fa53 	bl	80039b8 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800851a:	429a      	cmp	r2, r3
 800851c:	d807      	bhi.n	800852e <HAL_SPI_TransmitReceive+0x1d8>
 800851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008524:	d003      	beq.n	800852e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800852c:	e0a7      	b.n	800867e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008532:	b29b      	uxth	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1a6      	bne.n	8008486 <HAL_SPI_TransmitReceive+0x130>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800853c:	b29b      	uxth	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1a1      	bne.n	8008486 <HAL_SPI_TransmitReceive+0x130>
 8008542:	e07c      	b.n	800863e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <HAL_SPI_TransmitReceive+0x1fc>
 800854c:	8b7b      	ldrh	r3, [r7, #26]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d16b      	bne.n	800862a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	330c      	adds	r3, #12
 800855c:	7812      	ldrb	r2, [r2, #0]
 800855e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008564:	1c5a      	adds	r2, r3, #1
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800856e:	b29b      	uxth	r3, r3
 8008570:	3b01      	subs	r3, #1
 8008572:	b29a      	uxth	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008578:	e057      	b.n	800862a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b02      	cmp	r3, #2
 8008586:	d11c      	bne.n	80085c2 <HAL_SPI_TransmitReceive+0x26c>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800858c:	b29b      	uxth	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d017      	beq.n	80085c2 <HAL_SPI_TransmitReceive+0x26c>
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	2b01      	cmp	r3, #1
 8008596:	d114      	bne.n	80085c2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	330c      	adds	r3, #12
 80085a2:	7812      	ldrb	r2, [r2, #0]
 80085a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	3b01      	subs	r3, #1
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d119      	bne.n	8008604 <HAL_SPI_TransmitReceive+0x2ae>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d014      	beq.n	8008604 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68da      	ldr	r2, [r3, #12]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	b2d2      	uxtb	r2, r2
 80085e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	3b01      	subs	r3, #1
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008600:	2301      	movs	r3, #1
 8008602:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008604:	f7fb f9d8 	bl	80039b8 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008610:	429a      	cmp	r2, r3
 8008612:	d803      	bhi.n	800861c <HAL_SPI_TransmitReceive+0x2c6>
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861a:	d102      	bne.n	8008622 <HAL_SPI_TransmitReceive+0x2cc>
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	2b00      	cmp	r3, #0
 8008620:	d103      	bne.n	800862a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008628:	e029      	b.n	800867e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800862e:	b29b      	uxth	r3, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1a2      	bne.n	800857a <HAL_SPI_TransmitReceive+0x224>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008638:	b29b      	uxth	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d19d      	bne.n	800857a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800863e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008640:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f000 f926 	bl	8008894 <SPI_EndRxTxTransaction>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d006      	beq.n	800865c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2220      	movs	r2, #32
 8008658:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800865a:	e010      	b.n	800867e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10b      	bne.n	800867c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008664:	2300      	movs	r3, #0
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	617b      	str	r3, [r7, #20]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	e000      	b.n	800867e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800867c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800868e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008692:	4618      	mov	r0, r3
 8008694:	3730      	adds	r7, #48	; 0x30
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086a8:	b2db      	uxtb	r3, r3
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
	...

080086b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	603b      	str	r3, [r7, #0]
 80086c4:	4613      	mov	r3, r2
 80086c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086c8:	f7fb f976 	bl	80039b8 <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	1a9b      	subs	r3, r3, r2
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	4413      	add	r3, r2
 80086d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086d8:	f7fb f96e 	bl	80039b8 <HAL_GetTick>
 80086dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086de:	4b39      	ldr	r3, [pc, #228]	; (80087c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	015b      	lsls	r3, r3, #5
 80086e4:	0d1b      	lsrs	r3, r3, #20
 80086e6:	69fa      	ldr	r2, [r7, #28]
 80086e8:	fb02 f303 	mul.w	r3, r2, r3
 80086ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086ee:	e054      	b.n	800879a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f6:	d050      	beq.n	800879a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086f8:	f7fb f95e 	bl	80039b8 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	429a      	cmp	r2, r3
 8008706:	d902      	bls.n	800870e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d13d      	bne.n	800878a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685a      	ldr	r2, [r3, #4]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800871c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008726:	d111      	bne.n	800874c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008730:	d004      	beq.n	800873c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800873a:	d107      	bne.n	800874c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800874a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008754:	d10f      	bne.n	8008776 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008774:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e017      	b.n	80087ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008790:	2300      	movs	r3, #0
 8008792:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	3b01      	subs	r3, #1
 8008798:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	4013      	ands	r3, r2
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	bf0c      	ite	eq
 80087aa:	2301      	moveq	r3, #1
 80087ac:	2300      	movne	r3, #0
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d19b      	bne.n	80086f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3720      	adds	r7, #32
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20000010 	.word	0x20000010

080087c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087dc:	d111      	bne.n	8008802 <SPI_EndRxTransaction+0x3a>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087e6:	d004      	beq.n	80087f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087f0:	d107      	bne.n	8008802 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008800:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800880a:	d12a      	bne.n	8008862 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008814:	d012      	beq.n	800883c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2200      	movs	r2, #0
 800881e:	2180      	movs	r1, #128	; 0x80
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7ff ff49 	bl	80086b8 <SPI_WaitFlagStateUntilTimeout>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d02d      	beq.n	8008888 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008830:	f043 0220 	orr.w	r2, r3, #32
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e026      	b.n	800888a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2200      	movs	r2, #0
 8008844:	2101      	movs	r1, #1
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f7ff ff36 	bl	80086b8 <SPI_WaitFlagStateUntilTimeout>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d01a      	beq.n	8008888 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008856:	f043 0220 	orr.w	r2, r3, #32
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e013      	b.n	800888a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2200      	movs	r2, #0
 800886a:	2101      	movs	r1, #1
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff ff23 	bl	80086b8 <SPI_WaitFlagStateUntilTimeout>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d007      	beq.n	8008888 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887c:	f043 0220 	orr.w	r2, r3, #32
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e000      	b.n	800888a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
	...

08008894 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af02      	add	r7, sp, #8
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088a0:	4b1b      	ldr	r3, [pc, #108]	; (8008910 <SPI_EndRxTxTransaction+0x7c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a1b      	ldr	r2, [pc, #108]	; (8008914 <SPI_EndRxTxTransaction+0x80>)
 80088a6:	fba2 2303 	umull	r2, r3, r2, r3
 80088aa:	0d5b      	lsrs	r3, r3, #21
 80088ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088b0:	fb02 f303 	mul.w	r3, r2, r3
 80088b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088be:	d112      	bne.n	80088e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2200      	movs	r2, #0
 80088c8:	2180      	movs	r1, #128	; 0x80
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f7ff fef4 	bl	80086b8 <SPI_WaitFlagStateUntilTimeout>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d016      	beq.n	8008904 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088da:	f043 0220 	orr.w	r2, r3, #32
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e00f      	b.n	8008906 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00a      	beq.n	8008902 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fc:	2b80      	cmp	r3, #128	; 0x80
 80088fe:	d0f2      	beq.n	80088e6 <SPI_EndRxTxTransaction+0x52>
 8008900:	e000      	b.n	8008904 <SPI_EndRxTxTransaction+0x70>
        break;
 8008902:	bf00      	nop
  }

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20000010 	.word	0x20000010
 8008914:	165e9f81 	.word	0x165e9f81

08008918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e041      	b.n	80089ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d106      	bne.n	8008944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7f9 fbc2 	bl	80020c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3304      	adds	r3, #4
 8008954:	4619      	mov	r1, r3
 8008956:	4610      	mov	r0, r2
 8008958:	f000 fa96 	bl	8008e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d001      	beq.n	80089d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e04e      	b.n	8008a6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0201 	orr.w	r2, r2, #1
 80089e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a23      	ldr	r2, [pc, #140]	; (8008a7c <HAL_TIM_Base_Start_IT+0xc4>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d022      	beq.n	8008a38 <HAL_TIM_Base_Start_IT+0x80>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089fa:	d01d      	beq.n	8008a38 <HAL_TIM_Base_Start_IT+0x80>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a1f      	ldr	r2, [pc, #124]	; (8008a80 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d018      	beq.n	8008a38 <HAL_TIM_Base_Start_IT+0x80>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a1e      	ldr	r2, [pc, #120]	; (8008a84 <HAL_TIM_Base_Start_IT+0xcc>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d013      	beq.n	8008a38 <HAL_TIM_Base_Start_IT+0x80>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a1c      	ldr	r2, [pc, #112]	; (8008a88 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d00e      	beq.n	8008a38 <HAL_TIM_Base_Start_IT+0x80>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a1b      	ldr	r2, [pc, #108]	; (8008a8c <HAL_TIM_Base_Start_IT+0xd4>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d009      	beq.n	8008a38 <HAL_TIM_Base_Start_IT+0x80>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a19      	ldr	r2, [pc, #100]	; (8008a90 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d004      	beq.n	8008a38 <HAL_TIM_Base_Start_IT+0x80>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a18      	ldr	r2, [pc, #96]	; (8008a94 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d111      	bne.n	8008a5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f003 0307 	and.w	r3, r3, #7
 8008a42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b06      	cmp	r3, #6
 8008a48:	d010      	beq.n	8008a6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f042 0201 	orr.w	r2, r2, #1
 8008a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a5a:	e007      	b.n	8008a6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f042 0201 	orr.w	r2, r2, #1
 8008a6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	40010000 	.word	0x40010000
 8008a80:	40000400 	.word	0x40000400
 8008a84:	40000800 	.word	0x40000800
 8008a88:	40000c00 	.word	0x40000c00
 8008a8c:	40010400 	.word	0x40010400
 8008a90:	40014000 	.word	0x40014000
 8008a94:	40001800 	.word	0x40001800

08008a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	f003 0302 	and.w	r3, r3, #2
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d122      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	f003 0302 	and.w	r3, r3, #2
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d11b      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f06f 0202 	mvn.w	r2, #2
 8008ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f9b5 	bl	8008e4a <HAL_TIM_IC_CaptureCallback>
 8008ae0:	e005      	b.n	8008aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f9a7 	bl	8008e36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f9b8 	bl	8008e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f003 0304 	and.w	r3, r3, #4
 8008afe:	2b04      	cmp	r3, #4
 8008b00:	d122      	bne.n	8008b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f003 0304 	and.w	r3, r3, #4
 8008b0c:	2b04      	cmp	r3, #4
 8008b0e:	d11b      	bne.n	8008b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f06f 0204 	mvn.w	r2, #4
 8008b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f98b 	bl	8008e4a <HAL_TIM_IC_CaptureCallback>
 8008b34:	e005      	b.n	8008b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f97d 	bl	8008e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f98e 	bl	8008e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f003 0308 	and.w	r3, r3, #8
 8008b52:	2b08      	cmp	r3, #8
 8008b54:	d122      	bne.n	8008b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f003 0308 	and.w	r3, r3, #8
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d11b      	bne.n	8008b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f06f 0208 	mvn.w	r2, #8
 8008b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2204      	movs	r2, #4
 8008b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	f003 0303 	and.w	r3, r3, #3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f961 	bl	8008e4a <HAL_TIM_IC_CaptureCallback>
 8008b88:	e005      	b.n	8008b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f953 	bl	8008e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 f964 	bl	8008e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	f003 0310 	and.w	r3, r3, #16
 8008ba6:	2b10      	cmp	r3, #16
 8008ba8:	d122      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f003 0310 	and.w	r3, r3, #16
 8008bb4:	2b10      	cmp	r3, #16
 8008bb6:	d11b      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f06f 0210 	mvn.w	r2, #16
 8008bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2208      	movs	r2, #8
 8008bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f937 	bl	8008e4a <HAL_TIM_IC_CaptureCallback>
 8008bdc:	e005      	b.n	8008bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f929 	bl	8008e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f93a 	bl	8008e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d10e      	bne.n	8008c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f003 0301 	and.w	r3, r3, #1
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d107      	bne.n	8008c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f06f 0201 	mvn.w	r2, #1
 8008c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7f8 ffcc 	bl	8001bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c26:	2b80      	cmp	r3, #128	; 0x80
 8008c28:	d10e      	bne.n	8008c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c34:	2b80      	cmp	r3, #128	; 0x80
 8008c36:	d107      	bne.n	8008c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fae0 	bl	8009208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c52:	2b40      	cmp	r3, #64	; 0x40
 8008c54:	d10e      	bne.n	8008c74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c60:	2b40      	cmp	r3, #64	; 0x40
 8008c62:	d107      	bne.n	8008c74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f8ff 	bl	8008e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	f003 0320 	and.w	r3, r3, #32
 8008c7e:	2b20      	cmp	r3, #32
 8008c80:	d10e      	bne.n	8008ca0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f003 0320 	and.w	r3, r3, #32
 8008c8c:	2b20      	cmp	r3, #32
 8008c8e:	d107      	bne.n	8008ca0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f06f 0220 	mvn.w	r2, #32
 8008c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 faaa 	bl	80091f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ca0:	bf00      	nop
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d101      	bne.n	8008cc4 <HAL_TIM_ConfigClockSource+0x1c>
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	e0b4      	b.n	8008e2e <HAL_TIM_ConfigClockSource+0x186>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cfc:	d03e      	beq.n	8008d7c <HAL_TIM_ConfigClockSource+0xd4>
 8008cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d02:	f200 8087 	bhi.w	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d0a:	f000 8086 	beq.w	8008e1a <HAL_TIM_ConfigClockSource+0x172>
 8008d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d12:	d87f      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d14:	2b70      	cmp	r3, #112	; 0x70
 8008d16:	d01a      	beq.n	8008d4e <HAL_TIM_ConfigClockSource+0xa6>
 8008d18:	2b70      	cmp	r3, #112	; 0x70
 8008d1a:	d87b      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d1c:	2b60      	cmp	r3, #96	; 0x60
 8008d1e:	d050      	beq.n	8008dc2 <HAL_TIM_ConfigClockSource+0x11a>
 8008d20:	2b60      	cmp	r3, #96	; 0x60
 8008d22:	d877      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d24:	2b50      	cmp	r3, #80	; 0x50
 8008d26:	d03c      	beq.n	8008da2 <HAL_TIM_ConfigClockSource+0xfa>
 8008d28:	2b50      	cmp	r3, #80	; 0x50
 8008d2a:	d873      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d2c:	2b40      	cmp	r3, #64	; 0x40
 8008d2e:	d058      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x13a>
 8008d30:	2b40      	cmp	r3, #64	; 0x40
 8008d32:	d86f      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d34:	2b30      	cmp	r3, #48	; 0x30
 8008d36:	d064      	beq.n	8008e02 <HAL_TIM_ConfigClockSource+0x15a>
 8008d38:	2b30      	cmp	r3, #48	; 0x30
 8008d3a:	d86b      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d3c:	2b20      	cmp	r3, #32
 8008d3e:	d060      	beq.n	8008e02 <HAL_TIM_ConfigClockSource+0x15a>
 8008d40:	2b20      	cmp	r3, #32
 8008d42:	d867      	bhi.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d05c      	beq.n	8008e02 <HAL_TIM_ConfigClockSource+0x15a>
 8008d48:	2b10      	cmp	r3, #16
 8008d4a:	d05a      	beq.n	8008e02 <HAL_TIM_ConfigClockSource+0x15a>
 8008d4c:	e062      	b.n	8008e14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	6899      	ldr	r1, [r3, #8]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f000 f9ad 	bl	80090bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	609a      	str	r2, [r3, #8]
      break;
 8008d7a:	e04f      	b.n	8008e1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6818      	ldr	r0, [r3, #0]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	6899      	ldr	r1, [r3, #8]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f000 f996 	bl	80090bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	689a      	ldr	r2, [r3, #8]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d9e:	609a      	str	r2, [r3, #8]
      break;
 8008da0:	e03c      	b.n	8008e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6818      	ldr	r0, [r3, #0]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	6859      	ldr	r1, [r3, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	461a      	mov	r2, r3
 8008db0:	f000 f90a 	bl	8008fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2150      	movs	r1, #80	; 0x50
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 f963 	bl	8009086 <TIM_ITRx_SetConfig>
      break;
 8008dc0:	e02c      	b.n	8008e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	6859      	ldr	r1, [r3, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f000 f929 	bl	8009026 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2160      	movs	r1, #96	; 0x60
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f953 	bl	8009086 <TIM_ITRx_SetConfig>
      break;
 8008de0:	e01c      	b.n	8008e1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6818      	ldr	r0, [r3, #0]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	6859      	ldr	r1, [r3, #4]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	461a      	mov	r2, r3
 8008df0:	f000 f8ea 	bl	8008fc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2140      	movs	r1, #64	; 0x40
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 f943 	bl	8009086 <TIM_ITRx_SetConfig>
      break;
 8008e00:	e00c      	b.n	8008e1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	f000 f93a 	bl	8009086 <TIM_ITRx_SetConfig>
      break;
 8008e12:	e003      	b.n	8008e1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	73fb      	strb	r3, [r7, #15]
      break;
 8008e18:	e000      	b.n	8008e1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e36:	b480      	push	{r7}
 8008e38:	b083      	sub	sp, #12
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e3e:	bf00      	nop
 8008e40:	370c      	adds	r7, #12
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b083      	sub	sp, #12
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e52:	bf00      	nop
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b083      	sub	sp, #12
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e66:	bf00      	nop
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b083      	sub	sp, #12
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e7a:	bf00      	nop
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
	...

08008e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a40      	ldr	r2, [pc, #256]	; (8008f9c <TIM_Base_SetConfig+0x114>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d013      	beq.n	8008ec8 <TIM_Base_SetConfig+0x40>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ea6:	d00f      	beq.n	8008ec8 <TIM_Base_SetConfig+0x40>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a3d      	ldr	r2, [pc, #244]	; (8008fa0 <TIM_Base_SetConfig+0x118>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d00b      	beq.n	8008ec8 <TIM_Base_SetConfig+0x40>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a3c      	ldr	r2, [pc, #240]	; (8008fa4 <TIM_Base_SetConfig+0x11c>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d007      	beq.n	8008ec8 <TIM_Base_SetConfig+0x40>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a3b      	ldr	r2, [pc, #236]	; (8008fa8 <TIM_Base_SetConfig+0x120>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d003      	beq.n	8008ec8 <TIM_Base_SetConfig+0x40>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a3a      	ldr	r2, [pc, #232]	; (8008fac <TIM_Base_SetConfig+0x124>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d108      	bne.n	8008eda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a2f      	ldr	r2, [pc, #188]	; (8008f9c <TIM_Base_SetConfig+0x114>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d02b      	beq.n	8008f3a <TIM_Base_SetConfig+0xb2>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee8:	d027      	beq.n	8008f3a <TIM_Base_SetConfig+0xb2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a2c      	ldr	r2, [pc, #176]	; (8008fa0 <TIM_Base_SetConfig+0x118>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d023      	beq.n	8008f3a <TIM_Base_SetConfig+0xb2>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a2b      	ldr	r2, [pc, #172]	; (8008fa4 <TIM_Base_SetConfig+0x11c>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d01f      	beq.n	8008f3a <TIM_Base_SetConfig+0xb2>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a2a      	ldr	r2, [pc, #168]	; (8008fa8 <TIM_Base_SetConfig+0x120>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d01b      	beq.n	8008f3a <TIM_Base_SetConfig+0xb2>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a29      	ldr	r2, [pc, #164]	; (8008fac <TIM_Base_SetConfig+0x124>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d017      	beq.n	8008f3a <TIM_Base_SetConfig+0xb2>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a28      	ldr	r2, [pc, #160]	; (8008fb0 <TIM_Base_SetConfig+0x128>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d013      	beq.n	8008f3a <TIM_Base_SetConfig+0xb2>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a27      	ldr	r2, [pc, #156]	; (8008fb4 <TIM_Base_SetConfig+0x12c>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d00f      	beq.n	8008f3a <TIM_Base_SetConfig+0xb2>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a26      	ldr	r2, [pc, #152]	; (8008fb8 <TIM_Base_SetConfig+0x130>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d00b      	beq.n	8008f3a <TIM_Base_SetConfig+0xb2>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a25      	ldr	r2, [pc, #148]	; (8008fbc <TIM_Base_SetConfig+0x134>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d007      	beq.n	8008f3a <TIM_Base_SetConfig+0xb2>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a24      	ldr	r2, [pc, #144]	; (8008fc0 <TIM_Base_SetConfig+0x138>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d003      	beq.n	8008f3a <TIM_Base_SetConfig+0xb2>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a23      	ldr	r2, [pc, #140]	; (8008fc4 <TIM_Base_SetConfig+0x13c>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d108      	bne.n	8008f4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a0a      	ldr	r2, [pc, #40]	; (8008f9c <TIM_Base_SetConfig+0x114>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d003      	beq.n	8008f80 <TIM_Base_SetConfig+0xf8>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a0c      	ldr	r2, [pc, #48]	; (8008fac <TIM_Base_SetConfig+0x124>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d103      	bne.n	8008f88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	691a      	ldr	r2, [r3, #16]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	615a      	str	r2, [r3, #20]
}
 8008f8e:	bf00      	nop
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	40010000 	.word	0x40010000
 8008fa0:	40000400 	.word	0x40000400
 8008fa4:	40000800 	.word	0x40000800
 8008fa8:	40000c00 	.word	0x40000c00
 8008fac:	40010400 	.word	0x40010400
 8008fb0:	40014000 	.word	0x40014000
 8008fb4:	40014400 	.word	0x40014400
 8008fb8:	40014800 	.word	0x40014800
 8008fbc:	40001800 	.word	0x40001800
 8008fc0:	40001c00 	.word	0x40001c00
 8008fc4:	40002000 	.word	0x40002000

08008fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b087      	sub	sp, #28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6a1b      	ldr	r3, [r3, #32]
 8008fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	f023 0201 	bic.w	r2, r3, #1
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	011b      	lsls	r3, r3, #4
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f023 030a 	bic.w	r3, r3, #10
 8009004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	4313      	orrs	r3, r2
 800900c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	621a      	str	r2, [r3, #32]
}
 800901a:	bf00      	nop
 800901c:	371c      	adds	r7, #28
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009026:	b480      	push	{r7}
 8009028:	b087      	sub	sp, #28
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6a1b      	ldr	r3, [r3, #32]
 8009036:	f023 0210 	bic.w	r2, r3, #16
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6a1b      	ldr	r3, [r3, #32]
 8009048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009050:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	031b      	lsls	r3, r3, #12
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	4313      	orrs	r3, r2
 800905a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009062:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	011b      	lsls	r3, r3, #4
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4313      	orrs	r3, r2
 800906c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	621a      	str	r2, [r3, #32]
}
 800907a:	bf00      	nop
 800907c:	371c      	adds	r7, #28
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009086:	b480      	push	{r7}
 8009088:	b085      	sub	sp, #20
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800909c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	f043 0307 	orr.w	r3, r3, #7
 80090a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	609a      	str	r2, [r3, #8]
}
 80090b0:	bf00      	nop
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	021a      	lsls	r2, r3, #8
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	431a      	orrs	r2, r3
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	609a      	str	r2, [r3, #8]
}
 80090f0:	bf00      	nop
 80090f2:	371c      	adds	r7, #28
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009110:	2302      	movs	r3, #2
 8009112:	e05a      	b.n	80091ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2202      	movs	r2, #2
 8009120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800913a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	4313      	orrs	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a21      	ldr	r2, [pc, #132]	; (80091d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d022      	beq.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009160:	d01d      	beq.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a1d      	ldr	r2, [pc, #116]	; (80091dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d018      	beq.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a1b      	ldr	r2, [pc, #108]	; (80091e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d013      	beq.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a1a      	ldr	r2, [pc, #104]	; (80091e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d00e      	beq.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a18      	ldr	r2, [pc, #96]	; (80091e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d009      	beq.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a17      	ldr	r2, [pc, #92]	; (80091ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d004      	beq.n	800919e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a15      	ldr	r2, [pc, #84]	; (80091f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d10c      	bne.n	80091b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	40010000 	.word	0x40010000
 80091dc:	40000400 	.word	0x40000400
 80091e0:	40000800 	.word	0x40000800
 80091e4:	40000c00 	.word	0x40000c00
 80091e8:	40010400 	.word	0x40010400
 80091ec:	40014000 	.word	0x40014000
 80091f0:	40001800 	.word	0x40001800

080091f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e03f      	b.n	80092ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b00      	cmp	r3, #0
 8009238:	d106      	bne.n	8009248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7f8 ff62 	bl	800210c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2224      	movs	r2, #36	; 0x24
 800924c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800925e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f829 	bl	80092b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	691a      	ldr	r2, [r3, #16]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	695a      	ldr	r2, [r3, #20]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68da      	ldr	r2, [r3, #12]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2220      	movs	r2, #32
 80092a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092bc:	b0c0      	sub	sp, #256	; 0x100
 80092be:	af00      	add	r7, sp, #0
 80092c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80092d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092d4:	68d9      	ldr	r1, [r3, #12]
 80092d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	ea40 0301 	orr.w	r3, r0, r1
 80092e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80092e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	431a      	orrs	r2, r3
 80092f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	431a      	orrs	r2, r3
 80092f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	4313      	orrs	r3, r2
 8009300:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009310:	f021 010c 	bic.w	r1, r1, #12
 8009314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800931e:	430b      	orrs	r3, r1
 8009320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800932e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009332:	6999      	ldr	r1, [r3, #24]
 8009334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	ea40 0301 	orr.w	r3, r0, r1
 800933e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	4b8f      	ldr	r3, [pc, #572]	; (8009584 <UART_SetConfig+0x2cc>)
 8009348:	429a      	cmp	r2, r3
 800934a:	d005      	beq.n	8009358 <UART_SetConfig+0xa0>
 800934c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	4b8d      	ldr	r3, [pc, #564]	; (8009588 <UART_SetConfig+0x2d0>)
 8009354:	429a      	cmp	r2, r3
 8009356:	d104      	bne.n	8009362 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009358:	f7fe fa68 	bl	800782c <HAL_RCC_GetPCLK2Freq>
 800935c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009360:	e003      	b.n	800936a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009362:	f7fe fa4f 	bl	8007804 <HAL_RCC_GetPCLK1Freq>
 8009366:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800936a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800936e:	69db      	ldr	r3, [r3, #28]
 8009370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009374:	f040 810c 	bne.w	8009590 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800937c:	2200      	movs	r2, #0
 800937e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009382:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009386:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800938a:	4622      	mov	r2, r4
 800938c:	462b      	mov	r3, r5
 800938e:	1891      	adds	r1, r2, r2
 8009390:	65b9      	str	r1, [r7, #88]	; 0x58
 8009392:	415b      	adcs	r3, r3
 8009394:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009396:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800939a:	4621      	mov	r1, r4
 800939c:	eb12 0801 	adds.w	r8, r2, r1
 80093a0:	4629      	mov	r1, r5
 80093a2:	eb43 0901 	adc.w	r9, r3, r1
 80093a6:	f04f 0200 	mov.w	r2, #0
 80093aa:	f04f 0300 	mov.w	r3, #0
 80093ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093ba:	4690      	mov	r8, r2
 80093bc:	4699      	mov	r9, r3
 80093be:	4623      	mov	r3, r4
 80093c0:	eb18 0303 	adds.w	r3, r8, r3
 80093c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093c8:	462b      	mov	r3, r5
 80093ca:	eb49 0303 	adc.w	r3, r9, r3
 80093ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80093d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80093de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80093e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80093e6:	460b      	mov	r3, r1
 80093e8:	18db      	adds	r3, r3, r3
 80093ea:	653b      	str	r3, [r7, #80]	; 0x50
 80093ec:	4613      	mov	r3, r2
 80093ee:	eb42 0303 	adc.w	r3, r2, r3
 80093f2:	657b      	str	r3, [r7, #84]	; 0x54
 80093f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80093f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80093fc:	f7f6 ff60 	bl	80002c0 <__aeabi_uldivmod>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4b61      	ldr	r3, [pc, #388]	; (800958c <UART_SetConfig+0x2d4>)
 8009406:	fba3 2302 	umull	r2, r3, r3, r2
 800940a:	095b      	lsrs	r3, r3, #5
 800940c:	011c      	lsls	r4, r3, #4
 800940e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009412:	2200      	movs	r2, #0
 8009414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009418:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800941c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009420:	4642      	mov	r2, r8
 8009422:	464b      	mov	r3, r9
 8009424:	1891      	adds	r1, r2, r2
 8009426:	64b9      	str	r1, [r7, #72]	; 0x48
 8009428:	415b      	adcs	r3, r3
 800942a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800942c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009430:	4641      	mov	r1, r8
 8009432:	eb12 0a01 	adds.w	sl, r2, r1
 8009436:	4649      	mov	r1, r9
 8009438:	eb43 0b01 	adc.w	fp, r3, r1
 800943c:	f04f 0200 	mov.w	r2, #0
 8009440:	f04f 0300 	mov.w	r3, #0
 8009444:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009448:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800944c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009450:	4692      	mov	sl, r2
 8009452:	469b      	mov	fp, r3
 8009454:	4643      	mov	r3, r8
 8009456:	eb1a 0303 	adds.w	r3, sl, r3
 800945a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800945e:	464b      	mov	r3, r9
 8009460:	eb4b 0303 	adc.w	r3, fp, r3
 8009464:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009474:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009478:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800947c:	460b      	mov	r3, r1
 800947e:	18db      	adds	r3, r3, r3
 8009480:	643b      	str	r3, [r7, #64]	; 0x40
 8009482:	4613      	mov	r3, r2
 8009484:	eb42 0303 	adc.w	r3, r2, r3
 8009488:	647b      	str	r3, [r7, #68]	; 0x44
 800948a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800948e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009492:	f7f6 ff15 	bl	80002c0 <__aeabi_uldivmod>
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	4611      	mov	r1, r2
 800949c:	4b3b      	ldr	r3, [pc, #236]	; (800958c <UART_SetConfig+0x2d4>)
 800949e:	fba3 2301 	umull	r2, r3, r3, r1
 80094a2:	095b      	lsrs	r3, r3, #5
 80094a4:	2264      	movs	r2, #100	; 0x64
 80094a6:	fb02 f303 	mul.w	r3, r2, r3
 80094aa:	1acb      	subs	r3, r1, r3
 80094ac:	00db      	lsls	r3, r3, #3
 80094ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80094b2:	4b36      	ldr	r3, [pc, #216]	; (800958c <UART_SetConfig+0x2d4>)
 80094b4:	fba3 2302 	umull	r2, r3, r3, r2
 80094b8:	095b      	lsrs	r3, r3, #5
 80094ba:	005b      	lsls	r3, r3, #1
 80094bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80094c0:	441c      	add	r4, r3
 80094c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80094d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80094d4:	4642      	mov	r2, r8
 80094d6:	464b      	mov	r3, r9
 80094d8:	1891      	adds	r1, r2, r2
 80094da:	63b9      	str	r1, [r7, #56]	; 0x38
 80094dc:	415b      	adcs	r3, r3
 80094de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80094e4:	4641      	mov	r1, r8
 80094e6:	1851      	adds	r1, r2, r1
 80094e8:	6339      	str	r1, [r7, #48]	; 0x30
 80094ea:	4649      	mov	r1, r9
 80094ec:	414b      	adcs	r3, r1
 80094ee:	637b      	str	r3, [r7, #52]	; 0x34
 80094f0:	f04f 0200 	mov.w	r2, #0
 80094f4:	f04f 0300 	mov.w	r3, #0
 80094f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80094fc:	4659      	mov	r1, fp
 80094fe:	00cb      	lsls	r3, r1, #3
 8009500:	4651      	mov	r1, sl
 8009502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009506:	4651      	mov	r1, sl
 8009508:	00ca      	lsls	r2, r1, #3
 800950a:	4610      	mov	r0, r2
 800950c:	4619      	mov	r1, r3
 800950e:	4603      	mov	r3, r0
 8009510:	4642      	mov	r2, r8
 8009512:	189b      	adds	r3, r3, r2
 8009514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009518:	464b      	mov	r3, r9
 800951a:	460a      	mov	r2, r1
 800951c:	eb42 0303 	adc.w	r3, r2, r3
 8009520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009530:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009534:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009538:	460b      	mov	r3, r1
 800953a:	18db      	adds	r3, r3, r3
 800953c:	62bb      	str	r3, [r7, #40]	; 0x28
 800953e:	4613      	mov	r3, r2
 8009540:	eb42 0303 	adc.w	r3, r2, r3
 8009544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800954a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800954e:	f7f6 feb7 	bl	80002c0 <__aeabi_uldivmod>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4b0d      	ldr	r3, [pc, #52]	; (800958c <UART_SetConfig+0x2d4>)
 8009558:	fba3 1302 	umull	r1, r3, r3, r2
 800955c:	095b      	lsrs	r3, r3, #5
 800955e:	2164      	movs	r1, #100	; 0x64
 8009560:	fb01 f303 	mul.w	r3, r1, r3
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	3332      	adds	r3, #50	; 0x32
 800956a:	4a08      	ldr	r2, [pc, #32]	; (800958c <UART_SetConfig+0x2d4>)
 800956c:	fba2 2303 	umull	r2, r3, r2, r3
 8009570:	095b      	lsrs	r3, r3, #5
 8009572:	f003 0207 	and.w	r2, r3, #7
 8009576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4422      	add	r2, r4
 800957e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009580:	e105      	b.n	800978e <UART_SetConfig+0x4d6>
 8009582:	bf00      	nop
 8009584:	40011000 	.word	0x40011000
 8009588:	40011400 	.word	0x40011400
 800958c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009594:	2200      	movs	r2, #0
 8009596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800959a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800959e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80095a2:	4642      	mov	r2, r8
 80095a4:	464b      	mov	r3, r9
 80095a6:	1891      	adds	r1, r2, r2
 80095a8:	6239      	str	r1, [r7, #32]
 80095aa:	415b      	adcs	r3, r3
 80095ac:	627b      	str	r3, [r7, #36]	; 0x24
 80095ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80095b2:	4641      	mov	r1, r8
 80095b4:	1854      	adds	r4, r2, r1
 80095b6:	4649      	mov	r1, r9
 80095b8:	eb43 0501 	adc.w	r5, r3, r1
 80095bc:	f04f 0200 	mov.w	r2, #0
 80095c0:	f04f 0300 	mov.w	r3, #0
 80095c4:	00eb      	lsls	r3, r5, #3
 80095c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80095ca:	00e2      	lsls	r2, r4, #3
 80095cc:	4614      	mov	r4, r2
 80095ce:	461d      	mov	r5, r3
 80095d0:	4643      	mov	r3, r8
 80095d2:	18e3      	adds	r3, r4, r3
 80095d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80095d8:	464b      	mov	r3, r9
 80095da:	eb45 0303 	adc.w	r3, r5, r3
 80095de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80095e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80095f2:	f04f 0200 	mov.w	r2, #0
 80095f6:	f04f 0300 	mov.w	r3, #0
 80095fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80095fe:	4629      	mov	r1, r5
 8009600:	008b      	lsls	r3, r1, #2
 8009602:	4621      	mov	r1, r4
 8009604:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009608:	4621      	mov	r1, r4
 800960a:	008a      	lsls	r2, r1, #2
 800960c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009610:	f7f6 fe56 	bl	80002c0 <__aeabi_uldivmod>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	4b60      	ldr	r3, [pc, #384]	; (800979c <UART_SetConfig+0x4e4>)
 800961a:	fba3 2302 	umull	r2, r3, r3, r2
 800961e:	095b      	lsrs	r3, r3, #5
 8009620:	011c      	lsls	r4, r3, #4
 8009622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009626:	2200      	movs	r2, #0
 8009628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800962c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009630:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009634:	4642      	mov	r2, r8
 8009636:	464b      	mov	r3, r9
 8009638:	1891      	adds	r1, r2, r2
 800963a:	61b9      	str	r1, [r7, #24]
 800963c:	415b      	adcs	r3, r3
 800963e:	61fb      	str	r3, [r7, #28]
 8009640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009644:	4641      	mov	r1, r8
 8009646:	1851      	adds	r1, r2, r1
 8009648:	6139      	str	r1, [r7, #16]
 800964a:	4649      	mov	r1, r9
 800964c:	414b      	adcs	r3, r1
 800964e:	617b      	str	r3, [r7, #20]
 8009650:	f04f 0200 	mov.w	r2, #0
 8009654:	f04f 0300 	mov.w	r3, #0
 8009658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800965c:	4659      	mov	r1, fp
 800965e:	00cb      	lsls	r3, r1, #3
 8009660:	4651      	mov	r1, sl
 8009662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009666:	4651      	mov	r1, sl
 8009668:	00ca      	lsls	r2, r1, #3
 800966a:	4610      	mov	r0, r2
 800966c:	4619      	mov	r1, r3
 800966e:	4603      	mov	r3, r0
 8009670:	4642      	mov	r2, r8
 8009672:	189b      	adds	r3, r3, r2
 8009674:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009678:	464b      	mov	r3, r9
 800967a:	460a      	mov	r2, r1
 800967c:	eb42 0303 	adc.w	r3, r2, r3
 8009680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	67bb      	str	r3, [r7, #120]	; 0x78
 800968e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009690:	f04f 0200 	mov.w	r2, #0
 8009694:	f04f 0300 	mov.w	r3, #0
 8009698:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800969c:	4649      	mov	r1, r9
 800969e:	008b      	lsls	r3, r1, #2
 80096a0:	4641      	mov	r1, r8
 80096a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096a6:	4641      	mov	r1, r8
 80096a8:	008a      	lsls	r2, r1, #2
 80096aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80096ae:	f7f6 fe07 	bl	80002c0 <__aeabi_uldivmod>
 80096b2:	4602      	mov	r2, r0
 80096b4:	460b      	mov	r3, r1
 80096b6:	4b39      	ldr	r3, [pc, #228]	; (800979c <UART_SetConfig+0x4e4>)
 80096b8:	fba3 1302 	umull	r1, r3, r3, r2
 80096bc:	095b      	lsrs	r3, r3, #5
 80096be:	2164      	movs	r1, #100	; 0x64
 80096c0:	fb01 f303 	mul.w	r3, r1, r3
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	011b      	lsls	r3, r3, #4
 80096c8:	3332      	adds	r3, #50	; 0x32
 80096ca:	4a34      	ldr	r2, [pc, #208]	; (800979c <UART_SetConfig+0x4e4>)
 80096cc:	fba2 2303 	umull	r2, r3, r2, r3
 80096d0:	095b      	lsrs	r3, r3, #5
 80096d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096d6:	441c      	add	r4, r3
 80096d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096dc:	2200      	movs	r2, #0
 80096de:	673b      	str	r3, [r7, #112]	; 0x70
 80096e0:	677a      	str	r2, [r7, #116]	; 0x74
 80096e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80096e6:	4642      	mov	r2, r8
 80096e8:	464b      	mov	r3, r9
 80096ea:	1891      	adds	r1, r2, r2
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	415b      	adcs	r3, r3
 80096f0:	60fb      	str	r3, [r7, #12]
 80096f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096f6:	4641      	mov	r1, r8
 80096f8:	1851      	adds	r1, r2, r1
 80096fa:	6039      	str	r1, [r7, #0]
 80096fc:	4649      	mov	r1, r9
 80096fe:	414b      	adcs	r3, r1
 8009700:	607b      	str	r3, [r7, #4]
 8009702:	f04f 0200 	mov.w	r2, #0
 8009706:	f04f 0300 	mov.w	r3, #0
 800970a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800970e:	4659      	mov	r1, fp
 8009710:	00cb      	lsls	r3, r1, #3
 8009712:	4651      	mov	r1, sl
 8009714:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009718:	4651      	mov	r1, sl
 800971a:	00ca      	lsls	r2, r1, #3
 800971c:	4610      	mov	r0, r2
 800971e:	4619      	mov	r1, r3
 8009720:	4603      	mov	r3, r0
 8009722:	4642      	mov	r2, r8
 8009724:	189b      	adds	r3, r3, r2
 8009726:	66bb      	str	r3, [r7, #104]	; 0x68
 8009728:	464b      	mov	r3, r9
 800972a:	460a      	mov	r2, r1
 800972c:	eb42 0303 	adc.w	r3, r2, r3
 8009730:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	663b      	str	r3, [r7, #96]	; 0x60
 800973c:	667a      	str	r2, [r7, #100]	; 0x64
 800973e:	f04f 0200 	mov.w	r2, #0
 8009742:	f04f 0300 	mov.w	r3, #0
 8009746:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800974a:	4649      	mov	r1, r9
 800974c:	008b      	lsls	r3, r1, #2
 800974e:	4641      	mov	r1, r8
 8009750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009754:	4641      	mov	r1, r8
 8009756:	008a      	lsls	r2, r1, #2
 8009758:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800975c:	f7f6 fdb0 	bl	80002c0 <__aeabi_uldivmod>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4b0d      	ldr	r3, [pc, #52]	; (800979c <UART_SetConfig+0x4e4>)
 8009766:	fba3 1302 	umull	r1, r3, r3, r2
 800976a:	095b      	lsrs	r3, r3, #5
 800976c:	2164      	movs	r1, #100	; 0x64
 800976e:	fb01 f303 	mul.w	r3, r1, r3
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	011b      	lsls	r3, r3, #4
 8009776:	3332      	adds	r3, #50	; 0x32
 8009778:	4a08      	ldr	r2, [pc, #32]	; (800979c <UART_SetConfig+0x4e4>)
 800977a:	fba2 2303 	umull	r2, r3, r2, r3
 800977e:	095b      	lsrs	r3, r3, #5
 8009780:	f003 020f 	and.w	r2, r3, #15
 8009784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4422      	add	r2, r4
 800978c:	609a      	str	r2, [r3, #8]
}
 800978e:	bf00      	nop
 8009790:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009794:	46bd      	mov	sp, r7
 8009796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800979a:	bf00      	nop
 800979c:	51eb851f 	.word	0x51eb851f

080097a0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d123      	bne.n	80097fa <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80097ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	6851      	ldr	r1, [r2, #4]
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	6892      	ldr	r2, [r2, #8]
 80097c6:	4311      	orrs	r1, r2
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	68d2      	ldr	r2, [r2, #12]
 80097cc:	4311      	orrs	r1, r2
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	6912      	ldr	r2, [r2, #16]
 80097d2:	4311      	orrs	r1, r2
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	6952      	ldr	r2, [r2, #20]
 80097d8:	4311      	orrs	r1, r2
 80097da:	683a      	ldr	r2, [r7, #0]
 80097dc:	6992      	ldr	r2, [r2, #24]
 80097de:	4311      	orrs	r1, r2
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	69d2      	ldr	r2, [r2, #28]
 80097e4:	4311      	orrs	r1, r2
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	6a12      	ldr	r2, [r2, #32]
 80097ea:	4311      	orrs	r1, r2
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097f0:	430a      	orrs	r2, r1
 80097f2:	431a      	orrs	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	e028      	b.n	800984c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	69d9      	ldr	r1, [r3, #28]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	4319      	orrs	r1, r3
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009810:	430b      	orrs	r3, r1
 8009812:	431a      	orrs	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009820:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	6851      	ldr	r1, [r2, #4]
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	6892      	ldr	r2, [r2, #8]
 800982c:	4311      	orrs	r1, r2
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	68d2      	ldr	r2, [r2, #12]
 8009832:	4311      	orrs	r1, r2
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	6912      	ldr	r2, [r2, #16]
 8009838:	4311      	orrs	r1, r2
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	6952      	ldr	r2, [r2, #20]
 800983e:	4311      	orrs	r1, r2
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	6992      	ldr	r2, [r2, #24]
 8009844:	430a      	orrs	r2, r1
 8009846:	431a      	orrs	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800985a:	b480      	push	{r7}
 800985c:	b085      	sub	sp, #20
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d128      	bne.n	80098be <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	1e59      	subs	r1, r3, #1
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	3b01      	subs	r3, #1
 8009880:	011b      	lsls	r3, r3, #4
 8009882:	4319      	orrs	r1, r3
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	3b01      	subs	r3, #1
 800988a:	021b      	lsls	r3, r3, #8
 800988c:	4319      	orrs	r1, r3
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	3b01      	subs	r3, #1
 8009894:	031b      	lsls	r3, r3, #12
 8009896:	4319      	orrs	r1, r3
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	3b01      	subs	r3, #1
 800989e:	041b      	lsls	r3, r3, #16
 80098a0:	4319      	orrs	r1, r3
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	3b01      	subs	r3, #1
 80098a8:	051b      	lsls	r3, r3, #20
 80098aa:	4319      	orrs	r1, r3
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	3b01      	subs	r3, #1
 80098b2:	061b      	lsls	r3, r3, #24
 80098b4:	430b      	orrs	r3, r1
 80098b6:	431a      	orrs	r2, r3
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	609a      	str	r2, [r3, #8]
 80098bc:	e02f      	b.n	800991e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80098c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	68d2      	ldr	r2, [r2, #12]
 80098ce:	3a01      	subs	r2, #1
 80098d0:	0311      	lsls	r1, r2, #12
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	6952      	ldr	r2, [r2, #20]
 80098d6:	3a01      	subs	r2, #1
 80098d8:	0512      	lsls	r2, r2, #20
 80098da:	430a      	orrs	r2, r1
 80098dc:	431a      	orrs	r2, r3
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	1e59      	subs	r1, r3, #1
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	3b01      	subs	r3, #1
 80098f6:	011b      	lsls	r3, r3, #4
 80098f8:	4319      	orrs	r1, r3
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	3b01      	subs	r3, #1
 8009900:	021b      	lsls	r3, r3, #8
 8009902:	4319      	orrs	r1, r3
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	3b01      	subs	r3, #1
 800990a:	041b      	lsls	r3, r3, #16
 800990c:	4319      	orrs	r1, r3
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	3b01      	subs	r3, #1
 8009914:	061b      	lsls	r3, r3, #24
 8009916:	430b      	orrs	r3, r1
 8009918:	431a      	orrs	r2, r3
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b086      	sub	sp, #24
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009938:	2300      	movs	r3, #0
 800993a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	0d9b      	lsrs	r3, r3, #22
 8009942:	059b      	lsls	r3, r3, #22
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	6811      	ldr	r1, [r2, #0]
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	6852      	ldr	r2, [r2, #4]
 800994c:	4311      	orrs	r1, r2
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	6892      	ldr	r2, [r2, #8]
 8009952:	3a01      	subs	r2, #1
 8009954:	0152      	lsls	r2, r2, #5
 8009956:	4311      	orrs	r1, r2
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	68d2      	ldr	r2, [r2, #12]
 800995c:	0252      	lsls	r2, r2, #9
 800995e:	430a      	orrs	r2, r1
 8009960:	431a      	orrs	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8009966:	f7fa f827 	bl	80039b8 <HAL_GetTick>
 800996a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800996c:	e010      	b.n	8009990 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009974:	d00c      	beq.n	8009990 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d007      	beq.n	800998c <FMC_SDRAM_SendCommand+0x60>
 800997c:	f7fa f81c 	bl	80039b8 <HAL_GetTick>
 8009980:	4602      	mov	r2, r0
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	429a      	cmp	r2, r3
 800998a:	d201      	bcs.n	8009990 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e006      	b.n	800999e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	f003 0320 	and.w	r3, r3, #32
 8009998:	2b20      	cmp	r3, #32
 800999a:	d0e8      	beq.n	800996e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80099a6:	b480      	push	{r7}
 80099a8:	b083      	sub	sp, #12
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80099b8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	0052      	lsls	r2, r2, #1
 80099c0:	431a      	orrs	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099d4:	b084      	sub	sp, #16
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	f107 001c 	add.w	r0, r7, #28
 80099e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d122      	bne.n	8009a32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d105      	bne.n	8009a26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f9c0 	bl	8009dac <USB_CoreReset>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	73fb      	strb	r3, [r7, #15]
 8009a30:	e01a      	b.n	8009a68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f9b4 	bl	8009dac <USB_CoreReset>
 8009a44:	4603      	mov	r3, r0
 8009a46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d106      	bne.n	8009a5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	639a      	str	r2, [r3, #56]	; 0x38
 8009a5a:	e005      	b.n	8009a68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d10b      	bne.n	8009a86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f043 0206 	orr.w	r2, r3, #6
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	f043 0220 	orr.w	r2, r3, #32
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3710      	adds	r7, #16
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a92:	b004      	add	sp, #16
 8009a94:	4770      	bx	lr

08009a96 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f043 0201 	orr.w	r2, r3, #1
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	f023 0201 	bic.w	r2, r3, #1
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b084      	sub	sp, #16
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009af6:	78fb      	ldrb	r3, [r7, #3]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d115      	bne.n	8009b28 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009b08:	2001      	movs	r0, #1
 8009b0a:	f7f9 ff61 	bl	80039d0 <HAL_Delay>
      ms++;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3301      	adds	r3, #1
 8009b12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 f93a 	bl	8009d8e <USB_GetMode>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d01e      	beq.n	8009b5e <USB_SetCurrentMode+0x84>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2b31      	cmp	r3, #49	; 0x31
 8009b24:	d9f0      	bls.n	8009b08 <USB_SetCurrentMode+0x2e>
 8009b26:	e01a      	b.n	8009b5e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009b28:	78fb      	ldrb	r3, [r7, #3]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d115      	bne.n	8009b5a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009b3a:	2001      	movs	r0, #1
 8009b3c:	f7f9 ff48 	bl	80039d0 <HAL_Delay>
      ms++;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	3301      	adds	r3, #1
 8009b44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f921 	bl	8009d8e <USB_GetMode>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d005      	beq.n	8009b5e <USB_SetCurrentMode+0x84>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b31      	cmp	r3, #49	; 0x31
 8009b56:	d9f0      	bls.n	8009b3a <USB_SetCurrentMode+0x60>
 8009b58:	e001      	b.n	8009b5e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e005      	b.n	8009b6a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2b32      	cmp	r3, #50	; 0x32
 8009b62:	d101      	bne.n	8009b68 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e000      	b.n	8009b6a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
	...

08009b74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3301      	adds	r3, #1
 8009b86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	4a13      	ldr	r2, [pc, #76]	; (8009bd8 <USB_FlushTxFifo+0x64>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d901      	bls.n	8009b94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b90:	2303      	movs	r3, #3
 8009b92:	e01b      	b.n	8009bcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	daf2      	bge.n	8009b82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	019b      	lsls	r3, r3, #6
 8009ba4:	f043 0220 	orr.w	r2, r3, #32
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4a08      	ldr	r2, [pc, #32]	; (8009bd8 <USB_FlushTxFifo+0x64>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d901      	bls.n	8009bbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e006      	b.n	8009bcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	f003 0320 	and.w	r3, r3, #32
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	d0f0      	beq.n	8009bac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	00030d40 	.word	0x00030d40

08009bdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	3301      	adds	r3, #1
 8009bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	4a11      	ldr	r2, [pc, #68]	; (8009c38 <USB_FlushRxFifo+0x5c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d901      	bls.n	8009bfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	e018      	b.n	8009c2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	daf2      	bge.n	8009be8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c02:	2300      	movs	r3, #0
 8009c04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2210      	movs	r2, #16
 8009c0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	4a08      	ldr	r2, [pc, #32]	; (8009c38 <USB_FlushRxFifo+0x5c>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d901      	bls.n	8009c1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e006      	b.n	8009c2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	f003 0310 	and.w	r3, r3, #16
 8009c26:	2b10      	cmp	r3, #16
 8009c28:	d0f0      	beq.n	8009c0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	00030d40 	.word	0x00030d40

08009c3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b089      	sub	sp, #36	; 0x24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	4611      	mov	r1, r2
 8009c48:	461a      	mov	r2, r3
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	71fb      	strb	r3, [r7, #7]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009c5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d123      	bne.n	8009caa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009c62:	88bb      	ldrh	r3, [r7, #4]
 8009c64:	3303      	adds	r3, #3
 8009c66:	089b      	lsrs	r3, r3, #2
 8009c68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	61bb      	str	r3, [r7, #24]
 8009c6e:	e018      	b.n	8009ca2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009c70:	79fb      	ldrb	r3, [r7, #7]
 8009c72:	031a      	lsls	r2, r3, #12
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	4413      	add	r3, r2
 8009c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	3301      	adds	r3, #1
 8009c88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	3301      	adds	r3, #1
 8009c94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	61bb      	str	r3, [r7, #24]
 8009ca2:	69ba      	ldr	r2, [r7, #24]
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d3e2      	bcc.n	8009c70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3724      	adds	r7, #36	; 0x24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b08b      	sub	sp, #44	; 0x2c
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009cce:	88fb      	ldrh	r3, [r7, #6]
 8009cd0:	089b      	lsrs	r3, r3, #2
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009cd6:	88fb      	ldrh	r3, [r7, #6]
 8009cd8:	f003 0303 	and.w	r3, r3, #3
 8009cdc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009cde:	2300      	movs	r3, #0
 8009ce0:	623b      	str	r3, [r7, #32]
 8009ce2:	e014      	b.n	8009d0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	601a      	str	r2, [r3, #0]
    pDest++;
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	3301      	adds	r3, #1
 8009d00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	3301      	adds	r3, #1
 8009d06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	623b      	str	r3, [r7, #32]
 8009d0e:	6a3a      	ldr	r2, [r7, #32]
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d3e6      	bcc.n	8009ce4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d16:	8bfb      	ldrh	r3, [r7, #30]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d01e      	beq.n	8009d5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d26:	461a      	mov	r2, r3
 8009d28:	f107 0310 	add.w	r3, r7, #16
 8009d2c:	6812      	ldr	r2, [r2, #0]
 8009d2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	6a3b      	ldr	r3, [r7, #32]
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	fa22 f303 	lsr.w	r3, r2, r3
 8009d3c:	b2da      	uxtb	r2, r3
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d40:	701a      	strb	r2, [r3, #0]
      i++;
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	3301      	adds	r3, #1
 8009d46:	623b      	str	r3, [r7, #32]
      pDest++;
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009d4e:	8bfb      	ldrh	r3, [r7, #30]
 8009d50:	3b01      	subs	r3, #1
 8009d52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009d54:	8bfb      	ldrh	r3, [r7, #30]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1ea      	bne.n	8009d30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	372c      	adds	r7, #44	; 0x2c
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d80:	68fb      	ldr	r3, [r7, #12]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3714      	adds	r7, #20
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr

08009d8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009d8e:	b480      	push	{r7}
 8009d90:	b083      	sub	sp, #12
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	f003 0301 	and.w	r3, r3, #1
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	370c      	adds	r7, #12
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
	...

08009dac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	4a13      	ldr	r2, [pc, #76]	; (8009e10 <USB_CoreReset+0x64>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d901      	bls.n	8009dca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	e01b      	b.n	8009e02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	daf2      	bge.n	8009db8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	f043 0201 	orr.w	r2, r3, #1
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3301      	adds	r3, #1
 8009de6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	4a09      	ldr	r2, [pc, #36]	; (8009e10 <USB_CoreReset+0x64>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d901      	bls.n	8009df4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e006      	b.n	8009e02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d0f0      	beq.n	8009de2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	00030d40 	.word	0x00030d40

08009e14 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e14:	b084      	sub	sp, #16
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b086      	sub	sp, #24
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e34:	461a      	mov	r2, r3
 8009e36:	2300      	movs	r3, #0
 8009e38:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e56:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d018      	beq.n	8009e9c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d10a      	bne.n	8009e86 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e7e:	f043 0304 	orr.w	r3, r3, #4
 8009e82:	6013      	str	r3, [r2, #0]
 8009e84:	e014      	b.n	8009eb0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009e94:	f023 0304 	bic.w	r3, r3, #4
 8009e98:	6013      	str	r3, [r2, #0]
 8009e9a:	e009      	b.n	8009eb0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009eaa:	f023 0304 	bic.w	r3, r3, #4
 8009eae:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009eb0:	2110      	movs	r1, #16
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7ff fe5e 	bl	8009b74 <USB_FlushTxFifo>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d001      	beq.n	8009ec2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7ff fe8a 	bl	8009bdc <USB_FlushRxFifo>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	613b      	str	r3, [r7, #16]
 8009ed6:	e015      	b.n	8009f04 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	015a      	lsls	r2, r3, #5
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ef8:	461a      	mov	r2, r3
 8009efa:	2300      	movs	r3, #0
 8009efc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	3301      	adds	r3, #1
 8009f02:	613b      	str	r3, [r7, #16]
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d3e5      	bcc.n	8009ed8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f04f 32ff 	mov.w	r2, #4294967295
 8009f18:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00b      	beq.n	8009f3e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f2c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a13      	ldr	r2, [pc, #76]	; (8009f80 <USB_HostInit+0x16c>)
 8009f32:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a13      	ldr	r2, [pc, #76]	; (8009f84 <USB_HostInit+0x170>)
 8009f38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009f3c:	e009      	b.n	8009f52 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2280      	movs	r2, #128	; 0x80
 8009f42:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a10      	ldr	r2, [pc, #64]	; (8009f88 <USB_HostInit+0x174>)
 8009f48:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a0f      	ldr	r2, [pc, #60]	; (8009f8c <USB_HostInit+0x178>)
 8009f4e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d105      	bne.n	8009f64 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	f043 0210 	orr.w	r2, r3, #16
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	699a      	ldr	r2, [r3, #24]
 8009f68:	4b09      	ldr	r3, [pc, #36]	; (8009f90 <USB_HostInit+0x17c>)
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f7c:	b004      	add	sp, #16
 8009f7e:	4770      	bx	lr
 8009f80:	01000200 	.word	0x01000200
 8009f84:	00e00300 	.word	0x00e00300
 8009f88:	00600080 	.word	0x00600080
 8009f8c:	004000e0 	.word	0x004000e0
 8009f90:	a3200008 	.word	0xa3200008

08009f94 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fb2:	f023 0303 	bic.w	r3, r3, #3
 8009fb6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	f003 0303 	and.w	r3, r3, #3
 8009fc6:	68f9      	ldr	r1, [r7, #12]
 8009fc8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009fd0:	78fb      	ldrb	r3, [r7, #3]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d107      	bne.n	8009fe6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fdc:	461a      	mov	r2, r3
 8009fde:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009fe2:	6053      	str	r3, [r2, #4]
 8009fe4:	e009      	b.n	8009ffa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009fe6:	78fb      	ldrb	r3, [r7, #3]
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d106      	bne.n	8009ffa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f241 7370 	movw	r3, #6000	; 0x1770
 8009ff8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a014:	2300      	movs	r3, #0
 800a016:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a028:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a036:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a038:	2064      	movs	r0, #100	; 0x64
 800a03a:	f7f9 fcc9 	bl	80039d0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a04a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a04c:	200a      	movs	r0, #10
 800a04e:	f7f9 fcbf 	bl	80039d0 <HAL_Delay>

  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	460b      	mov	r3, r1
 800a066:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a06c:	2300      	movs	r3, #0
 800a06e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a080:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d109      	bne.n	800a0a0 <USB_DriveVbus+0x44>
 800a08c:	78fb      	ldrb	r3, [r7, #3]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d106      	bne.n	800a0a0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a09a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a09e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0aa:	d109      	bne.n	800a0c0 <USB_DriveVbus+0x64>
 800a0ac:	78fb      	ldrb	r3, [r7, #3]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d106      	bne.n	800a0c0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a0ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0be:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	0c5b      	lsrs	r3, r3, #17
 800a0ec:	f003 0303 	and.w	r3, r3, #3
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	b29b      	uxth	r3, r3
}
 800a112:	4618      	mov	r0, r3
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
	...

0800a120 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	4608      	mov	r0, r1
 800a12a:	4611      	mov	r1, r2
 800a12c:	461a      	mov	r2, r3
 800a12e:	4603      	mov	r3, r0
 800a130:	70fb      	strb	r3, [r7, #3]
 800a132:	460b      	mov	r3, r1
 800a134:	70bb      	strb	r3, [r7, #2]
 800a136:	4613      	mov	r3, r2
 800a138:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a142:	78fb      	ldrb	r3, [r7, #3]
 800a144:	015a      	lsls	r2, r3, #5
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	4413      	add	r3, r2
 800a14a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a14e:	461a      	mov	r2, r3
 800a150:	f04f 33ff 	mov.w	r3, #4294967295
 800a154:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a156:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d87e      	bhi.n	800a25c <USB_HC_Init+0x13c>
 800a15e:	a201      	add	r2, pc, #4	; (adr r2, 800a164 <USB_HC_Init+0x44>)
 800a160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a164:	0800a175 	.word	0x0800a175
 800a168:	0800a21f 	.word	0x0800a21f
 800a16c:	0800a175 	.word	0x0800a175
 800a170:	0800a1e1 	.word	0x0800a1e1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a174:	78fb      	ldrb	r3, [r7, #3]
 800a176:	015a      	lsls	r2, r3, #5
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	4413      	add	r3, r2
 800a17c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a180:	461a      	mov	r2, r3
 800a182:	f240 439d 	movw	r3, #1181	; 0x49d
 800a186:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a188:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	da10      	bge.n	800a1b2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a190:	78fb      	ldrb	r3, [r7, #3]
 800a192:	015a      	lsls	r2, r3, #5
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	4413      	add	r3, r2
 800a198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	78fa      	ldrb	r2, [r7, #3]
 800a1a0:	0151      	lsls	r1, r2, #5
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	440a      	add	r2, r1
 800a1a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1ae:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a1b0:	e057      	b.n	800a262 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d051      	beq.n	800a262 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a1be:	78fb      	ldrb	r3, [r7, #3]
 800a1c0:	015a      	lsls	r2, r3, #5
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	78fa      	ldrb	r2, [r7, #3]
 800a1ce:	0151      	lsls	r1, r2, #5
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	440a      	add	r2, r1
 800a1d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a1d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a1dc:	60d3      	str	r3, [r2, #12]
      break;
 800a1de:	e040      	b.n	800a262 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	f240 639d 	movw	r3, #1693	; 0x69d
 800a1f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a1f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	da34      	bge.n	800a266 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a1fc:	78fb      	ldrb	r3, [r7, #3]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	4413      	add	r3, r2
 800a204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	78fa      	ldrb	r2, [r7, #3]
 800a20c:	0151      	lsls	r1, r2, #5
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	440a      	add	r2, r1
 800a212:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a21a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a21c:	e023      	b.n	800a266 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a21e:	78fb      	ldrb	r3, [r7, #3]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	4413      	add	r3, r2
 800a226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a22a:	461a      	mov	r2, r3
 800a22c:	f240 2325 	movw	r3, #549	; 0x225
 800a230:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a232:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a236:	2b00      	cmp	r3, #0
 800a238:	da17      	bge.n	800a26a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a23a:	78fb      	ldrb	r3, [r7, #3]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	4413      	add	r3, r2
 800a242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	78fa      	ldrb	r2, [r7, #3]
 800a24a:	0151      	lsls	r1, r2, #5
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	440a      	add	r2, r1
 800a250:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a254:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a258:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a25a:	e006      	b.n	800a26a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	77fb      	strb	r3, [r7, #31]
      break;
 800a260:	e004      	b.n	800a26c <USB_HC_Init+0x14c>
      break;
 800a262:	bf00      	nop
 800a264:	e002      	b.n	800a26c <USB_HC_Init+0x14c>
      break;
 800a266:	bf00      	nop
 800a268:	e000      	b.n	800a26c <USB_HC_Init+0x14c>
      break;
 800a26a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a26c:	78fb      	ldrb	r3, [r7, #3]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	4413      	add	r3, r2
 800a274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	78fa      	ldrb	r2, [r7, #3]
 800a27c:	0151      	lsls	r1, r2, #5
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	440a      	add	r2, r1
 800a282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a286:	f043 0302 	orr.w	r3, r3, #2
 800a28a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a292:	699a      	ldr	r2, [r3, #24]
 800a294:	78fb      	ldrb	r3, [r7, #3]
 800a296:	f003 030f 	and.w	r3, r3, #15
 800a29a:	2101      	movs	r1, #1
 800a29c:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a0:	6939      	ldr	r1, [r7, #16]
 800a2a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a2b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	da03      	bge.n	800a2c6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a2be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2c2:	61bb      	str	r3, [r7, #24]
 800a2c4:	e001      	b.n	800a2ca <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7ff feff 	bl	800a0ce <USB_GetHostSpeed>
 800a2d0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a2d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d106      	bne.n	800a2e8 <USB_HC_Init+0x1c8>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d003      	beq.n	800a2e8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a2e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a2e4:	617b      	str	r3, [r7, #20]
 800a2e6:	e001      	b.n	800a2ec <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a2ec:	787b      	ldrb	r3, [r7, #1]
 800a2ee:	059b      	lsls	r3, r3, #22
 800a2f0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a2f4:	78bb      	ldrb	r3, [r7, #2]
 800a2f6:	02db      	lsls	r3, r3, #11
 800a2f8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a2fc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a2fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a302:	049b      	lsls	r3, r3, #18
 800a304:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a308:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a30a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a30c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a310:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a316:	78fb      	ldrb	r3, [r7, #3]
 800a318:	0159      	lsls	r1, r3, #5
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	440b      	add	r3, r1
 800a31e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a322:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a328:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a32a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a32e:	2b03      	cmp	r3, #3
 800a330:	d003      	beq.n	800a33a <USB_HC_Init+0x21a>
 800a332:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a336:	2b01      	cmp	r3, #1
 800a338:	d10f      	bne.n	800a35a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	015a      	lsls	r2, r3, #5
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	4413      	add	r3, r2
 800a342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	78fa      	ldrb	r2, [r7, #3]
 800a34a:	0151      	lsls	r1, r2, #5
 800a34c:	693a      	ldr	r2, [r7, #16]
 800a34e:	440a      	add	r2, r1
 800a350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a354:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a358:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a35a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3720      	adds	r7, #32
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b08c      	sub	sp, #48	; 0x30
 800a368:	af02      	add	r7, sp, #8
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	4613      	mov	r3, r2
 800a370:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	785b      	ldrb	r3, [r3, #1]
 800a37a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a37c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a380:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d02d      	beq.n	800a3ea <USB_HC_StartXfer+0x86>
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	791b      	ldrb	r3, [r3, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d129      	bne.n	800a3ea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d117      	bne.n	800a3cc <USB_HC_StartXfer+0x68>
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	79db      	ldrb	r3, [r3, #7]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d003      	beq.n	800a3ac <USB_HC_StartXfer+0x48>
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	79db      	ldrb	r3, [r3, #7]
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d10f      	bne.n	800a3cc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	015a      	lsls	r2, r3, #5
 800a3b0:	6a3b      	ldr	r3, [r7, #32]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	69fa      	ldr	r2, [r7, #28]
 800a3bc:	0151      	lsls	r1, r2, #5
 800a3be:	6a3a      	ldr	r2, [r7, #32]
 800a3c0:	440a      	add	r2, r1
 800a3c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ca:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a3cc:	79fb      	ldrb	r3, [r7, #7]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10b      	bne.n	800a3ea <USB_HC_StartXfer+0x86>
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	795b      	ldrb	r3, [r3, #5]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d107      	bne.n	800a3ea <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	785b      	ldrb	r3, [r3, #1]
 800a3de:	4619      	mov	r1, r3
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f000 fa0f 	bl	800a804 <USB_DoPing>
      return HAL_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	e0f8      	b.n	800a5dc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d018      	beq.n	800a424 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	8912      	ldrh	r2, [r2, #8]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	8912      	ldrh	r2, [r2, #8]
 800a402:	fbb3 f3f2 	udiv	r3, r3, r2
 800a406:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a408:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a40a:	8b7b      	ldrh	r3, [r7, #26]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d90b      	bls.n	800a428 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a410:	8b7b      	ldrh	r3, [r7, #26]
 800a412:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a414:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	8912      	ldrh	r2, [r2, #8]
 800a41a:	fb03 f202 	mul.w	r2, r3, r2
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	611a      	str	r2, [r3, #16]
 800a422:	e001      	b.n	800a428 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a424:	2301      	movs	r3, #1
 800a426:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	78db      	ldrb	r3, [r3, #3]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d007      	beq.n	800a440 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a430:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	8912      	ldrh	r2, [r2, #8]
 800a436:	fb03 f202 	mul.w	r2, r3, r2
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	611a      	str	r2, [r3, #16]
 800a43e:	e003      	b.n	800a448 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	695a      	ldr	r2, [r3, #20]
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a452:	04d9      	lsls	r1, r3, #19
 800a454:	4b63      	ldr	r3, [pc, #396]	; (800a5e4 <USB_HC_StartXfer+0x280>)
 800a456:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a458:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	7a9b      	ldrb	r3, [r3, #10]
 800a45e:	075b      	lsls	r3, r3, #29
 800a460:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a464:	69f9      	ldr	r1, [r7, #28]
 800a466:	0148      	lsls	r0, r1, #5
 800a468:	6a39      	ldr	r1, [r7, #32]
 800a46a:	4401      	add	r1, r0
 800a46c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a470:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a472:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a474:	79fb      	ldrb	r3, [r7, #7]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d009      	beq.n	800a48e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	68d9      	ldr	r1, [r3, #12]
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	015a      	lsls	r2, r3, #5
 800a482:	6a3b      	ldr	r3, [r7, #32]
 800a484:	4413      	add	r3, r2
 800a486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a48a:	460a      	mov	r2, r1
 800a48c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a48e:	6a3b      	ldr	r3, [r7, #32]
 800a490:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	f003 0301 	and.w	r3, r3, #1
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	bf0c      	ite	eq
 800a49e:	2301      	moveq	r3, #1
 800a4a0:	2300      	movne	r3, #0
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	6a3b      	ldr	r3, [r7, #32]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	69fa      	ldr	r2, [r7, #28]
 800a4b6:	0151      	lsls	r1, r2, #5
 800a4b8:	6a3a      	ldr	r2, [r7, #32]
 800a4ba:	440a      	add	r2, r1
 800a4bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a4c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	6a3b      	ldr	r3, [r7, #32]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	7e7b      	ldrb	r3, [r7, #25]
 800a4d6:	075b      	lsls	r3, r3, #29
 800a4d8:	69f9      	ldr	r1, [r7, #28]
 800a4da:	0148      	lsls	r0, r1, #5
 800a4dc:	6a39      	ldr	r1, [r7, #32]
 800a4de:	4401      	add	r1, r0
 800a4e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a4e4:	4313      	orrs	r3, r2
 800a4e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	015a      	lsls	r2, r3, #5
 800a4ec:	6a3b      	ldr	r3, [r7, #32]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a4fe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	78db      	ldrb	r3, [r3, #3]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d004      	beq.n	800a512 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a50e:	613b      	str	r3, [r7, #16]
 800a510:	e003      	b.n	800a51a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a518:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a520:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a52e:	461a      	mov	r2, r3
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a534:	79fb      	ldrb	r3, [r7, #7]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a53a:	2300      	movs	r3, #0
 800a53c:	e04e      	b.n	800a5dc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	78db      	ldrb	r3, [r3, #3]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d149      	bne.n	800a5da <USB_HC_StartXfer+0x276>
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d045      	beq.n	800a5da <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	79db      	ldrb	r3, [r3, #7]
 800a552:	2b03      	cmp	r3, #3
 800a554:	d830      	bhi.n	800a5b8 <USB_HC_StartXfer+0x254>
 800a556:	a201      	add	r2, pc, #4	; (adr r2, 800a55c <USB_HC_StartXfer+0x1f8>)
 800a558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55c:	0800a56d 	.word	0x0800a56d
 800a560:	0800a591 	.word	0x0800a591
 800a564:	0800a56d 	.word	0x0800a56d
 800a568:	0800a591 	.word	0x0800a591
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	695b      	ldr	r3, [r3, #20]
 800a570:	3303      	adds	r3, #3
 800a572:	089b      	lsrs	r3, r3, #2
 800a574:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a576:	8afa      	ldrh	r2, [r7, #22]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	429a      	cmp	r2, r3
 800a580:	d91c      	bls.n	800a5bc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	f043 0220 	orr.w	r2, r3, #32
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	619a      	str	r2, [r3, #24]
        }
        break;
 800a58e:	e015      	b.n	800a5bc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	695b      	ldr	r3, [r3, #20]
 800a594:	3303      	adds	r3, #3
 800a596:	089b      	lsrs	r3, r3, #2
 800a598:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a59a:	8afa      	ldrh	r2, [r7, #22]
 800a59c:	6a3b      	ldr	r3, [r7, #32]
 800a59e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d90a      	bls.n	800a5c0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	699b      	ldr	r3, [r3, #24]
 800a5ae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a5b6:	e003      	b.n	800a5c0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a5b8:	bf00      	nop
 800a5ba:	e002      	b.n	800a5c2 <USB_HC_StartXfer+0x25e>
        break;
 800a5bc:	bf00      	nop
 800a5be:	e000      	b.n	800a5c2 <USB_HC_StartXfer+0x25e>
        break;
 800a5c0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	68d9      	ldr	r1, [r3, #12]
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	785a      	ldrb	r2, [r3, #1]
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	9000      	str	r0, [sp, #0]
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f7ff fb31 	bl	8009c3c <USB_WritePacket>
  }

  return HAL_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3728      	adds	r7, #40	; 0x28
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	1ff80000 	.word	0x1ff80000

0800a5e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5fa:	695b      	ldr	r3, [r3, #20]
 800a5fc:	b29b      	uxth	r3, r3
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3714      	adds	r7, #20
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b089      	sub	sp, #36	; 0x24
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	460b      	mov	r3, r1
 800a614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a61a:	78fb      	ldrb	r3, [r7, #3]
 800a61c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a61e:	2300      	movs	r3, #0
 800a620:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	015a      	lsls	r2, r3, #5
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	4413      	add	r3, r2
 800a62a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	0c9b      	lsrs	r3, r3, #18
 800a632:	f003 0303 	and.w	r3, r3, #3
 800a636:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	015a      	lsls	r2, r3, #5
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	4413      	add	r3, r2
 800a640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	0fdb      	lsrs	r3, r3, #31
 800a648:	f003 0301 	and.w	r3, r3, #1
 800a64c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	f003 0320 	and.w	r3, r3, #32
 800a656:	2b20      	cmp	r3, #32
 800a658:	d104      	bne.n	800a664 <USB_HC_Halt+0x5a>
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	e0c8      	b.n	800a7f6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d002      	beq.n	800a670 <USB_HC_Halt+0x66>
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d163      	bne.n	800a738 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	015a      	lsls	r2, r3, #5
 800a674:	69fb      	ldr	r3, [r7, #28]
 800a676:	4413      	add	r3, r2
 800a678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	69ba      	ldr	r2, [r7, #24]
 800a680:	0151      	lsls	r1, r2, #5
 800a682:	69fa      	ldr	r2, [r7, #28]
 800a684:	440a      	add	r2, r1
 800a686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a68a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a68e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	f003 0320 	and.w	r3, r3, #32
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f040 80ab 	bne.w	800a7f4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d133      	bne.n	800a712 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	015a      	lsls	r2, r3, #5
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	69ba      	ldr	r2, [r7, #24]
 800a6ba:	0151      	lsls	r1, r2, #5
 800a6bc:	69fa      	ldr	r2, [r7, #28]
 800a6be:	440a      	add	r2, r1
 800a6c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6c8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	015a      	lsls	r2, r3, #5
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	0151      	lsls	r1, r2, #5
 800a6dc:	69fa      	ldr	r2, [r7, #28]
 800a6de:	440a      	add	r2, r1
 800a6e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6e8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6f6:	d81d      	bhi.n	800a734 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	015a      	lsls	r2, r3, #5
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	4413      	add	r3, r2
 800a700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a70a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a70e:	d0ec      	beq.n	800a6ea <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a710:	e070      	b.n	800a7f4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	015a      	lsls	r2, r3, #5
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	4413      	add	r3, r2
 800a71a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	69ba      	ldr	r2, [r7, #24]
 800a722:	0151      	lsls	r1, r2, #5
 800a724:	69fa      	ldr	r2, [r7, #28]
 800a726:	440a      	add	r2, r1
 800a728:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a72c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a730:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a732:	e05f      	b.n	800a7f4 <USB_HC_Halt+0x1ea>
            break;
 800a734:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a736:	e05d      	b.n	800a7f4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	69ba      	ldr	r2, [r7, #24]
 800a748:	0151      	lsls	r1, r2, #5
 800a74a:	69fa      	ldr	r2, [r7, #28]
 800a74c:	440a      	add	r2, r1
 800a74e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a752:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a756:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d133      	bne.n	800a7d0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	69ba      	ldr	r2, [r7, #24]
 800a778:	0151      	lsls	r1, r2, #5
 800a77a:	69fa      	ldr	r2, [r7, #28]
 800a77c:	440a      	add	r2, r1
 800a77e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a782:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a786:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	015a      	lsls	r2, r3, #5
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	4413      	add	r3, r2
 800a790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	69ba      	ldr	r2, [r7, #24]
 800a798:	0151      	lsls	r1, r2, #5
 800a79a:	69fa      	ldr	r2, [r7, #28]
 800a79c:	440a      	add	r2, r1
 800a79e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a7a6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7b4:	d81d      	bhi.n	800a7f2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	015a      	lsls	r2, r3, #5
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	4413      	add	r3, r2
 800a7be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7cc:	d0ec      	beq.n	800a7a8 <USB_HC_Halt+0x19e>
 800a7ce:	e011      	b.n	800a7f4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	69ba      	ldr	r2, [r7, #24]
 800a7e0:	0151      	lsls	r1, r2, #5
 800a7e2:	69fa      	ldr	r2, [r7, #28]
 800a7e4:	440a      	add	r2, r1
 800a7e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	e000      	b.n	800a7f4 <USB_HC_Halt+0x1ea>
          break;
 800a7f2:	bf00      	nop
    }
  }

  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3724      	adds	r7, #36	; 0x24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
	...

0800a804 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a804:	b480      	push	{r7}
 800a806:	b087      	sub	sp, #28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a814:	78fb      	ldrb	r3, [r7, #3]
 800a816:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a818:	2301      	movs	r3, #1
 800a81a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	04da      	lsls	r2, r3, #19
 800a820:	4b15      	ldr	r3, [pc, #84]	; (800a878 <USB_DoPing+0x74>)
 800a822:	4013      	ands	r3, r2
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	0151      	lsls	r1, r2, #5
 800a828:	697a      	ldr	r2, [r7, #20]
 800a82a:	440a      	add	r2, r1
 800a82c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a834:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a84c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a854:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	015a      	lsls	r2, r3, #5
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	4413      	add	r3, r2
 800a85e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a862:	461a      	mov	r2, r3
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	371c      	adds	r7, #28
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	1ff80000 	.word	0x1ff80000

0800a87c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b088      	sub	sp, #32
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a88c:	2300      	movs	r3, #0
 800a88e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff f911 	bl	8009ab8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a896:	2110      	movs	r1, #16
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f7ff f96b 	bl	8009b74 <USB_FlushTxFifo>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7ff f997 	bl	8009bdc <USB_FlushRxFifo>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d001      	beq.n	800a8b8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	61bb      	str	r3, [r7, #24]
 800a8bc:	e01f      	b.n	800a8fe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	015a      	lsls	r2, r3, #5
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	015a      	lsls	r2, r3, #5
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	61bb      	str	r3, [r7, #24]
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	2b0f      	cmp	r3, #15
 800a902:	d9dc      	bls.n	800a8be <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a904:	2300      	movs	r3, #0
 800a906:	61bb      	str	r3, [r7, #24]
 800a908:	e034      	b.n	800a974 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	015a      	lsls	r2, r3, #5
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	4413      	add	r3, r2
 800a912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a920:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a928:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a930:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a932:	69bb      	ldr	r3, [r7, #24]
 800a934:	015a      	lsls	r2, r3, #5
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	4413      	add	r3, r2
 800a93a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a93e:	461a      	mov	r2, r3
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	3301      	adds	r3, #1
 800a948:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a950:	d80c      	bhi.n	800a96c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	015a      	lsls	r2, r3, #5
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	4413      	add	r3, r2
 800a95a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a968:	d0ec      	beq.n	800a944 <USB_StopHost+0xc8>
 800a96a:	e000      	b.n	800a96e <USB_StopHost+0xf2>
        break;
 800a96c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	3301      	adds	r3, #1
 800a972:	61bb      	str	r3, [r7, #24]
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	2b0f      	cmp	r3, #15
 800a978:	d9c7      	bls.n	800a90a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a980:	461a      	mov	r2, r3
 800a982:	f04f 33ff 	mov.w	r3, #4294967295
 800a986:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f04f 32ff 	mov.w	r2, #4294967295
 800a98e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff f880 	bl	8009a96 <USB_EnableGlobalInt>

  return ret;
 800a996:	7ffb      	ldrb	r3, [r7, #31]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3720      	adds	r7, #32
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a9a0:	b590      	push	{r4, r7, lr}
 800a9a2:	b089      	sub	sp, #36	; 0x24
 800a9a4:	af04      	add	r7, sp, #16
 800a9a6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	2102      	movs	r1, #2
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fc66 	bl	800b280 <USBH_FindInterface>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ba:	2bff      	cmp	r3, #255	; 0xff
 800a9bc:	d002      	beq.n	800a9c4 <USBH_CDC_InterfaceInit+0x24>
 800a9be:	7bfb      	ldrb	r3, [r7, #15]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d901      	bls.n	800a9c8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	e13d      	b.n	800ac44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fc3b 	bl	800b248 <USBH_SelectInterface>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d001      	beq.n	800a9e0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a9dc:	2302      	movs	r3, #2
 800a9de:	e131      	b.n	800ac44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a9e6:	2050      	movs	r0, #80	; 0x50
 800a9e8:	f002 fb00 	bl	800cfec <malloc>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9f6:	69db      	ldr	r3, [r3, #28]
 800a9f8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800aa00:	2302      	movs	r3, #2
 800aa02:	e11f      	b.n	800ac44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800aa04:	2250      	movs	r2, #80	; 0x50
 800aa06:	2100      	movs	r1, #0
 800aa08:	68b8      	ldr	r0, [r7, #8]
 800aa0a:	f002 fb1d 	bl	800d048 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	211a      	movs	r1, #26
 800aa14:	fb01 f303 	mul.w	r3, r1, r3
 800aa18:	4413      	add	r3, r2
 800aa1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	b25b      	sxtb	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	da15      	bge.n	800aa52 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	211a      	movs	r1, #26
 800aa2c:	fb01 f303 	mul.w	r3, r1, r3
 800aa30:	4413      	add	r3, r2
 800aa32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aa36:	781a      	ldrb	r2, [r3, #0]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	211a      	movs	r1, #26
 800aa42:	fb01 f303 	mul.w	r3, r1, r3
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800aa4c:	881a      	ldrh	r2, [r3, #0]
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	785b      	ldrb	r3, [r3, #1]
 800aa56:	4619      	mov	r1, r3
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f001 ff2c 	bl	800c8b6 <USBH_AllocPipe>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	461a      	mov	r2, r3
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	7819      	ldrb	r1, [r3, #0]
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	7858      	ldrb	r0, [r3, #1]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	8952      	ldrh	r2, [r2, #10]
 800aa7e:	9202      	str	r2, [sp, #8]
 800aa80:	2203      	movs	r2, #3
 800aa82:	9201      	str	r2, [sp, #4]
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	4623      	mov	r3, r4
 800aa88:	4602      	mov	r2, r0
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f001 fee4 	bl	800c858 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	2200      	movs	r2, #0
 800aa96:	4619      	mov	r1, r3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f002 f9f9 	bl	800ce90 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	210a      	movs	r1, #10
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fbeb 	bl	800b280 <USBH_FindInterface>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800aaae:	7bfb      	ldrb	r3, [r7, #15]
 800aab0:	2bff      	cmp	r3, #255	; 0xff
 800aab2:	d002      	beq.n	800aaba <USBH_CDC_InterfaceInit+0x11a>
 800aab4:	7bfb      	ldrb	r3, [r7, #15]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d901      	bls.n	800aabe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800aaba:	2302      	movs	r3, #2
 800aabc:	e0c2      	b.n	800ac44 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800aabe:	7bfb      	ldrb	r3, [r7, #15]
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	211a      	movs	r1, #26
 800aac4:	fb01 f303 	mul.w	r3, r1, r3
 800aac8:	4413      	add	r3, r2
 800aaca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	b25b      	sxtb	r3, r3
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	da16      	bge.n	800ab04 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	211a      	movs	r1, #26
 800aadc:	fb01 f303 	mul.w	r3, r1, r3
 800aae0:	4413      	add	r3, r2
 800aae2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aae6:	781a      	ldrb	r2, [r3, #0]
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aaec:	7bfb      	ldrb	r3, [r7, #15]
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	211a      	movs	r1, #26
 800aaf2:	fb01 f303 	mul.w	r3, r1, r3
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800aafc:	881a      	ldrh	r2, [r3, #0]
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	835a      	strh	r2, [r3, #26]
 800ab02:	e015      	b.n	800ab30 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ab04:	7bfb      	ldrb	r3, [r7, #15]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	211a      	movs	r1, #26
 800ab0a:	fb01 f303 	mul.w	r3, r1, r3
 800ab0e:	4413      	add	r3, r2
 800ab10:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ab14:	781a      	ldrb	r2, [r3, #0]
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ab1a:	7bfb      	ldrb	r3, [r7, #15]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	211a      	movs	r1, #26
 800ab20:	fb01 f303 	mul.w	r3, r1, r3
 800ab24:	4413      	add	r3, r2
 800ab26:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ab2a:	881a      	ldrh	r2, [r3, #0]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800ab30:	7bfb      	ldrb	r3, [r7, #15]
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	211a      	movs	r1, #26
 800ab36:	fb01 f303 	mul.w	r3, r1, r3
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	b25b      	sxtb	r3, r3
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	da16      	bge.n	800ab76 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	211a      	movs	r1, #26
 800ab4e:	fb01 f303 	mul.w	r3, r1, r3
 800ab52:	4413      	add	r3, r2
 800ab54:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ab58:	781a      	ldrb	r2, [r3, #0]
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ab5e:	7bfb      	ldrb	r3, [r7, #15]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	211a      	movs	r1, #26
 800ab64:	fb01 f303 	mul.w	r3, r1, r3
 800ab68:	4413      	add	r3, r2
 800ab6a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ab6e:	881a      	ldrh	r2, [r3, #0]
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	835a      	strh	r2, [r3, #26]
 800ab74:	e015      	b.n	800aba2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ab76:	7bfb      	ldrb	r3, [r7, #15]
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	211a      	movs	r1, #26
 800ab7c:	fb01 f303 	mul.w	r3, r1, r3
 800ab80:	4413      	add	r3, r2
 800ab82:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ab86:	781a      	ldrb	r2, [r3, #0]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	211a      	movs	r1, #26
 800ab92:	fb01 f303 	mul.w	r3, r1, r3
 800ab96:	4413      	add	r3, r2
 800ab98:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ab9c:	881a      	ldrh	r2, [r3, #0]
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	7b9b      	ldrb	r3, [r3, #14]
 800aba6:	4619      	mov	r1, r3
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f001 fe84 	bl	800c8b6 <USBH_AllocPipe>
 800abae:	4603      	mov	r3, r0
 800abb0:	461a      	mov	r2, r3
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	7bdb      	ldrb	r3, [r3, #15]
 800abba:	4619      	mov	r1, r3
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f001 fe7a 	bl	800c8b6 <USBH_AllocPipe>
 800abc2:	4603      	mov	r3, r0
 800abc4:	461a      	mov	r2, r3
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	7b59      	ldrb	r1, [r3, #13]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	7b98      	ldrb	r0, [r3, #14]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	8b12      	ldrh	r2, [r2, #24]
 800abe2:	9202      	str	r2, [sp, #8]
 800abe4:	2202      	movs	r2, #2
 800abe6:	9201      	str	r2, [sp, #4]
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	4623      	mov	r3, r4
 800abec:	4602      	mov	r2, r0
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f001 fe32 	bl	800c858 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	7b19      	ldrb	r1, [r3, #12]
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	7bd8      	ldrb	r0, [r3, #15]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	8b52      	ldrh	r2, [r2, #26]
 800ac0c:	9202      	str	r2, [sp, #8]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	9201      	str	r2, [sp, #4]
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	4623      	mov	r3, r4
 800ac16:	4602      	mov	r2, r0
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f001 fe1d 	bl	800c858 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	7b5b      	ldrb	r3, [r3, #13]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f002 f92e 	bl	800ce90 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	7b1b      	ldrb	r3, [r3, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f002 f927 	bl	800ce90 <USBH_LL_SetToggle>

  return USBH_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3714      	adds	r7, #20
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd90      	pop	{r4, r7, pc}

0800ac4c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac5a:	69db      	ldr	r3, [r3, #28]
 800ac5c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00e      	beq.n	800ac84 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f001 fe12 	bl	800c896 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	4619      	mov	r1, r3
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f001 fe3d 	bl	800c8f8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	7b1b      	ldrb	r3, [r3, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00e      	beq.n	800acaa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	7b1b      	ldrb	r3, [r3, #12]
 800ac90:	4619      	mov	r1, r3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f001 fdff 	bl	800c896 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	7b1b      	ldrb	r3, [r3, #12]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f001 fe2a 	bl	800c8f8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	7b5b      	ldrb	r3, [r3, #13]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00e      	beq.n	800acd0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	7b5b      	ldrb	r3, [r3, #13]
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f001 fdec 	bl	800c896 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	7b5b      	ldrb	r3, [r3, #13]
 800acc2:	4619      	mov	r1, r3
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f001 fe17 	bl	800c8f8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acd6:	69db      	ldr	r3, [r3, #28]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00b      	beq.n	800acf4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ace2:	69db      	ldr	r3, [r3, #28]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f002 f989 	bl	800cffc <free>
    phost->pActiveClass->pData = 0U;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acf0:	2200      	movs	r2, #0
 800acf2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad0c:	69db      	ldr	r3, [r3, #28]
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	3340      	adds	r3, #64	; 0x40
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f8b1 	bl	800ae7e <GetLineCoding>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ad20:	7afb      	ldrb	r3, [r7, #11]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d105      	bne.n	800ad32 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad2c:	2102      	movs	r1, #2
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ad32:	7afb      	ldrb	r3, [r7, #11]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ad44:	2301      	movs	r3, #1
 800ad46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad52:	69db      	ldr	r3, [r3, #28]
 800ad54:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ad5c:	2b04      	cmp	r3, #4
 800ad5e:	d877      	bhi.n	800ae50 <USBH_CDC_Process+0x114>
 800ad60:	a201      	add	r2, pc, #4	; (adr r2, 800ad68 <USBH_CDC_Process+0x2c>)
 800ad62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad66:	bf00      	nop
 800ad68:	0800ad7d 	.word	0x0800ad7d
 800ad6c:	0800ad83 	.word	0x0800ad83
 800ad70:	0800adb3 	.word	0x0800adb3
 800ad74:	0800ae27 	.word	0x0800ae27
 800ad78:	0800ae35 	.word	0x0800ae35
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad80:	e06d      	b.n	800ae5e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad86:	4619      	mov	r1, r3
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f897 	bl	800aebc <SetLineCoding>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ad92:	7bbb      	ldrb	r3, [r7, #14]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d104      	bne.n	800ada2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	2202      	movs	r2, #2
 800ad9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ada0:	e058      	b.n	800ae54 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ada2:	7bbb      	ldrb	r3, [r7, #14]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d055      	beq.n	800ae54 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	2204      	movs	r2, #4
 800adac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800adb0:	e050      	b.n	800ae54 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	3340      	adds	r3, #64	; 0x40
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f860 	bl	800ae7e <GetLineCoding>
 800adbe:	4603      	mov	r3, r0
 800adc0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800adc2:	7bbb      	ldrb	r3, [r7, #14]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d126      	bne.n	800ae16 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adda:	791b      	ldrb	r3, [r3, #4]
 800addc:	429a      	cmp	r2, r3
 800adde:	d13b      	bne.n	800ae58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adea:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800adec:	429a      	cmp	r2, r3
 800adee:	d133      	bne.n	800ae58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adfa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d12b      	bne.n	800ae58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae08:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d124      	bne.n	800ae58 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f958 	bl	800b0c4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ae14:	e020      	b.n	800ae58 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d01d      	beq.n	800ae58 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	2204      	movs	r2, #4
 800ae20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ae24:	e018      	b.n	800ae58 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f867 	bl	800aefa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f8da 	bl	800afe6 <CDC_ProcessReception>
      break;
 800ae32:	e014      	b.n	800ae5e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800ae34:	2100      	movs	r1, #0
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 ffef 	bl	800be1a <USBH_ClrFeature>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10a      	bne.n	800ae5c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ae4e:	e005      	b.n	800ae5c <USBH_CDC_Process+0x120>

    default:
      break;
 800ae50:	bf00      	nop
 800ae52:	e004      	b.n	800ae5e <USBH_CDC_Process+0x122>
      break;
 800ae54:	bf00      	nop
 800ae56:	e002      	b.n	800ae5e <USBH_CDC_Process+0x122>
      break;
 800ae58:	bf00      	nop
 800ae5a:	e000      	b.n	800ae5e <USBH_CDC_Process+0x122>
      break;
 800ae5c:	bf00      	nop

  }

  return status;
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	370c      	adds	r7, #12
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	22a1      	movs	r2, #161	; 0xa1
 800ae8c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2221      	movs	r2, #33	; 0x21
 800ae92:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2207      	movs	r2, #7
 800aea4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	2207      	movs	r2, #7
 800aeaa:	4619      	mov	r1, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f001 fa81 	bl	800c3b4 <USBH_CtlReq>
 800aeb2:	4603      	mov	r3, r0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2221      	movs	r2, #33	; 0x21
 800aeca:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2220      	movs	r2, #32
 800aed0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2207      	movs	r2, #7
 800aee2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2207      	movs	r2, #7
 800aee8:	4619      	mov	r1, r3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f001 fa62 	bl	800c3b4 <USBH_CtlReq>
 800aef0:	4603      	mov	r3, r0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3708      	adds	r7, #8
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b086      	sub	sp, #24
 800aefe:	af02      	add	r7, sp, #8
 800af00:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af08:	69db      	ldr	r3, [r3, #28]
 800af0a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800af0c:	2300      	movs	r3, #0
 800af0e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800af16:	2b01      	cmp	r3, #1
 800af18:	d002      	beq.n	800af20 <CDC_ProcessTransmission+0x26>
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d023      	beq.n	800af66 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800af1e:	e05e      	b.n	800afde <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	8b12      	ldrh	r2, [r2, #24]
 800af28:	4293      	cmp	r3, r2
 800af2a:	d90b      	bls.n	800af44 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	69d9      	ldr	r1, [r3, #28]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	8b1a      	ldrh	r2, [r3, #24]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	7b5b      	ldrb	r3, [r3, #13]
 800af38:	2001      	movs	r0, #1
 800af3a:	9000      	str	r0, [sp, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f001 fc48 	bl	800c7d2 <USBH_BulkSendData>
 800af42:	e00b      	b.n	800af5c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	7b5b      	ldrb	r3, [r3, #13]
 800af52:	2001      	movs	r0, #1
 800af54:	9000      	str	r0, [sp, #0]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f001 fc3b 	bl	800c7d2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2202      	movs	r2, #2
 800af60:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800af64:	e03b      	b.n	800afde <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	7b5b      	ldrb	r3, [r3, #13]
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f001 ff65 	bl	800ce3c <USBH_LL_GetURBState>
 800af72:	4603      	mov	r3, r0
 800af74:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800af76:	7afb      	ldrb	r3, [r7, #11]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d128      	bne.n	800afce <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	8b12      	ldrh	r2, [r2, #24]
 800af84:	4293      	cmp	r3, r2
 800af86:	d90e      	bls.n	800afa6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	8b12      	ldrh	r2, [r2, #24]
 800af90:	1a9a      	subs	r2, r3, r2
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	69db      	ldr	r3, [r3, #28]
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	8b12      	ldrh	r2, [r2, #24]
 800af9e:	441a      	add	r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	61da      	str	r2, [r3, #28]
 800afa4:	e002      	b.n	800afac <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d004      	beq.n	800afbe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800afbc:	e00e      	b.n	800afdc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 f868 	bl	800b09c <USBH_CDC_TransmitCallback>
      break;
 800afcc:	e006      	b.n	800afdc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800afce:	7afb      	ldrb	r3, [r7, #11]
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d103      	bne.n	800afdc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800afdc:	bf00      	nop
  }
}
 800afde:	bf00      	nop
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b086      	sub	sp, #24
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aff4:	69db      	ldr	r3, [r3, #28]
 800aff6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aff8:	2300      	movs	r3, #0
 800affa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b002:	2b03      	cmp	r3, #3
 800b004:	d002      	beq.n	800b00c <CDC_ProcessReception+0x26>
 800b006:	2b04      	cmp	r3, #4
 800b008:	d00e      	beq.n	800b028 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b00a:	e043      	b.n	800b094 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	6a19      	ldr	r1, [r3, #32]
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	8b5a      	ldrh	r2, [r3, #26]
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	7b1b      	ldrb	r3, [r3, #12]
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f001 fbff 	bl	800c81c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2204      	movs	r2, #4
 800b022:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b026:	e035      	b.n	800b094 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	7b1b      	ldrb	r3, [r3, #12]
 800b02c:	4619      	mov	r1, r3
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f001 ff04 	bl	800ce3c <USBH_LL_GetURBState>
 800b034:	4603      	mov	r3, r0
 800b036:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b038:	7cfb      	ldrb	r3, [r7, #19]
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d129      	bne.n	800b092 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	7b1b      	ldrb	r3, [r3, #12]
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f001 fe67 	bl	800cd18 <USBH_LL_GetLastXferSize>
 800b04a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	429a      	cmp	r2, r3
 800b054:	d016      	beq.n	800b084 <CDC_ProcessReception+0x9e>
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	8b5b      	ldrh	r3, [r3, #26]
 800b05a:	461a      	mov	r2, r3
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	4293      	cmp	r3, r2
 800b060:	d910      	bls.n	800b084 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	1ad2      	subs	r2, r2, r3
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	6a1a      	ldr	r2, [r3, #32]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	441a      	add	r2, r3
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	2203      	movs	r2, #3
 800b07e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b082:	e006      	b.n	800b092 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2200      	movs	r2, #0
 800b088:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f80f 	bl	800b0b0 <USBH_CDC_ReceiveCallback>
      break;
 800b092:	bf00      	nop
  }
}
 800b094:	bf00      	nop
 800b096:	3718      	adds	r7, #24
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b0a4:	bf00      	nop
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b0b8:	bf00      	nop
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b0cc:	bf00      	nop
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	e029      	b.n	800b144 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	79fa      	ldrb	r2, [r7, #7]
 800b0f4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2200      	movs	r2, #0
 800b104:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f000 f81f 	bl	800b14c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2200      	movs	r2, #0
 800b112:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2200      	movs	r2, #0
 800b122:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d003      	beq.n	800b13c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f001 fd2d 	bl	800cb9c <USBH_LL_Init>

  return USBH_OK;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b085      	sub	sp, #20
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b154:	2300      	movs	r3, #0
 800b156:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b158:	2300      	movs	r3, #0
 800b15a:	60fb      	str	r3, [r7, #12]
 800b15c:	e009      	b.n	800b172 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	33e0      	adds	r3, #224	; 0xe0
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	2200      	movs	r2, #0
 800b16a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	3301      	adds	r3, #1
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2b0f      	cmp	r3, #15
 800b176:	d9f2      	bls.n	800b15e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b178:	2300      	movs	r3, #0
 800b17a:	60fb      	str	r3, [r7, #12]
 800b17c:	e009      	b.n	800b192 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	4413      	add	r3, r2
 800b184:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b188:	2200      	movs	r2, #0
 800b18a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3301      	adds	r3, #1
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b198:	d3f1      	bcc.n	800b17e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2240      	movs	r2, #64	; 0x40
 800b1be:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d016      	beq.n	800b236 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10e      	bne.n	800b230 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b218:	1c59      	adds	r1, r3, #1
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	33de      	adds	r3, #222	; 0xde
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b22a:	2300      	movs	r3, #0
 800b22c:	73fb      	strb	r3, [r7, #15]
 800b22e:	e004      	b.n	800b23a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b230:	2302      	movs	r3, #2
 800b232:	73fb      	strb	r3, [r7, #15]
 800b234:	e001      	b.n	800b23a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b236:	2302      	movs	r3, #2
 800b238:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3714      	adds	r7, #20
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	460b      	mov	r3, r1
 800b252:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b25e:	78fa      	ldrb	r2, [r7, #3]
 800b260:	429a      	cmp	r2, r3
 800b262:	d204      	bcs.n	800b26e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	78fa      	ldrb	r2, [r7, #3]
 800b268:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b26c:	e001      	b.n	800b272 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b26e:	2302      	movs	r3, #2
 800b270:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b272:	7bfb      	ldrb	r3, [r7, #15]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3714      	adds	r7, #20
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	4608      	mov	r0, r1
 800b28a:	4611      	mov	r1, r2
 800b28c:	461a      	mov	r2, r3
 800b28e:	4603      	mov	r3, r0
 800b290:	70fb      	strb	r3, [r7, #3]
 800b292:	460b      	mov	r3, r1
 800b294:	70bb      	strb	r3, [r7, #2]
 800b296:	4613      	mov	r3, r2
 800b298:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b29a:	2300      	movs	r3, #0
 800b29c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b2a8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b2aa:	e025      	b.n	800b2f8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b2ac:	7dfb      	ldrb	r3, [r7, #23]
 800b2ae:	221a      	movs	r2, #26
 800b2b0:	fb02 f303 	mul.w	r3, r2, r3
 800b2b4:	3308      	adds	r3, #8
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	3302      	adds	r3, #2
 800b2bc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	795b      	ldrb	r3, [r3, #5]
 800b2c2:	78fa      	ldrb	r2, [r7, #3]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d002      	beq.n	800b2ce <USBH_FindInterface+0x4e>
 800b2c8:	78fb      	ldrb	r3, [r7, #3]
 800b2ca:	2bff      	cmp	r3, #255	; 0xff
 800b2cc:	d111      	bne.n	800b2f2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b2d2:	78ba      	ldrb	r2, [r7, #2]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d002      	beq.n	800b2de <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b2d8:	78bb      	ldrb	r3, [r7, #2]
 800b2da:	2bff      	cmp	r3, #255	; 0xff
 800b2dc:	d109      	bne.n	800b2f2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b2e2:	787a      	ldrb	r2, [r7, #1]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d002      	beq.n	800b2ee <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b2e8:	787b      	ldrb	r3, [r7, #1]
 800b2ea:	2bff      	cmp	r3, #255	; 0xff
 800b2ec:	d101      	bne.n	800b2f2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
 800b2f0:	e006      	b.n	800b300 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b2f2:	7dfb      	ldrb	r3, [r7, #23]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b2f8:	7dfb      	ldrb	r3, [r7, #23]
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d9d6      	bls.n	800b2ac <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b2fe:	23ff      	movs	r3, #255	; 0xff
}
 800b300:	4618      	mov	r0, r3
 800b302:	371c      	adds	r7, #28
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f001 fc87 	bl	800cc28 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b31a:	2101      	movs	r1, #1
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f001 fda0 	bl	800ce62 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3708      	adds	r7, #8
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b088      	sub	sp, #32
 800b330:	af04      	add	r7, sp, #16
 800b332:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b334:	2302      	movs	r3, #2
 800b336:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b338:	2300      	movs	r3, #0
 800b33a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b342:	b2db      	uxtb	r3, r3
 800b344:	2b01      	cmp	r3, #1
 800b346:	d102      	bne.n	800b34e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2203      	movs	r2, #3
 800b34c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	b2db      	uxtb	r3, r3
 800b354:	2b0b      	cmp	r3, #11
 800b356:	f200 81be 	bhi.w	800b6d6 <USBH_Process+0x3aa>
 800b35a:	a201      	add	r2, pc, #4	; (adr r2, 800b360 <USBH_Process+0x34>)
 800b35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b360:	0800b391 	.word	0x0800b391
 800b364:	0800b3c3 	.word	0x0800b3c3
 800b368:	0800b42b 	.word	0x0800b42b
 800b36c:	0800b671 	.word	0x0800b671
 800b370:	0800b6d7 	.word	0x0800b6d7
 800b374:	0800b4cf 	.word	0x0800b4cf
 800b378:	0800b617 	.word	0x0800b617
 800b37c:	0800b505 	.word	0x0800b505
 800b380:	0800b525 	.word	0x0800b525
 800b384:	0800b545 	.word	0x0800b545
 800b388:	0800b589 	.word	0x0800b589
 800b38c:	0800b659 	.word	0x0800b659
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b396:	b2db      	uxtb	r3, r3
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f000 819e 	beq.w	800b6da <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b3a4:	20c8      	movs	r0, #200	; 0xc8
 800b3a6:	f001 fda3 	bl	800cef0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f001 fc99 	bl	800cce2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b3c0:	e18b      	b.n	800b6da <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d107      	bne.n	800b3dc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2202      	movs	r2, #2
 800b3d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b3da:	e18d      	b.n	800b6f8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b3e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b3e6:	d914      	bls.n	800b412 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	b2da      	uxtb	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b3fe:	2b03      	cmp	r3, #3
 800b400:	d903      	bls.n	800b40a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	220d      	movs	r2, #13
 800b406:	701a      	strb	r2, [r3, #0]
      break;
 800b408:	e176      	b.n	800b6f8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	701a      	strb	r2, [r3, #0]
      break;
 800b410:	e172      	b.n	800b6f8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b418:	f103 020a 	add.w	r2, r3, #10
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b422:	200a      	movs	r0, #10
 800b424:	f001 fd64 	bl	800cef0 <USBH_Delay>
      break;
 800b428:	e166      	b.n	800b6f8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b430:	2b00      	cmp	r3, #0
 800b432:	d005      	beq.n	800b440 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b43a:	2104      	movs	r1, #4
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b440:	2064      	movs	r0, #100	; 0x64
 800b442:	f001 fd55 	bl	800cef0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f001 fc24 	bl	800cc94 <USBH_LL_GetSpeed>
 800b44c:	4603      	mov	r3, r0
 800b44e:	461a      	mov	r2, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2205      	movs	r2, #5
 800b45a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b45c:	2100      	movs	r1, #0
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f001 fa29 	bl	800c8b6 <USBH_AllocPipe>
 800b464:	4603      	mov	r3, r0
 800b466:	461a      	mov	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b46c:	2180      	movs	r1, #128	; 0x80
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f001 fa21 	bl	800c8b6 <USBH_AllocPipe>
 800b474:	4603      	mov	r3, r0
 800b476:	461a      	mov	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	7919      	ldrb	r1, [r3, #4]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b490:	b292      	uxth	r2, r2
 800b492:	9202      	str	r2, [sp, #8]
 800b494:	2200      	movs	r2, #0
 800b496:	9201      	str	r2, [sp, #4]
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	4603      	mov	r3, r0
 800b49c:	2280      	movs	r2, #128	; 0x80
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f001 f9da 	bl	800c858 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	7959      	ldrb	r1, [r3, #5]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b4b8:	b292      	uxth	r2, r2
 800b4ba:	9202      	str	r2, [sp, #8]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	9201      	str	r2, [sp, #4]
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f001 f9c6 	bl	800c858 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b4cc:	e114      	b.n	800b6f8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f918 	bl	800b704 <USBH_HandleEnum>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b4d8:	7bbb      	ldrb	r3, [r7, #14]
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f040 80fe 	bne.w	800b6de <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d103      	bne.n	800b4fc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2208      	movs	r2, #8
 800b4f8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b4fa:	e0f0      	b.n	800b6de <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2207      	movs	r2, #7
 800b500:	701a      	strb	r2, [r3, #0]
      break;
 800b502:	e0ec      	b.n	800b6de <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	f000 80e9 	beq.w	800b6e2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b516:	2101      	movs	r1, #1
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2208      	movs	r2, #8
 800b520:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b522:	e0de      	b.n	800b6e2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	4619      	mov	r1, r3
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 fc2c 	bl	800bd8c <USBH_SetCfg>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	f040 80d5 	bne.w	800b6e6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2209      	movs	r2, #9
 800b540:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b542:	e0d0      	b.n	800b6e6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b54a:	f003 0320 	and.w	r3, r3, #32
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d016      	beq.n	800b580 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b552:	2101      	movs	r1, #1
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fc3c 	bl	800bdd2 <USBH_SetFeature>
 800b55a:	4603      	mov	r3, r0
 800b55c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b55e:	7bbb      	ldrb	r3, [r7, #14]
 800b560:	b2db      	uxtb	r3, r3
 800b562:	2b00      	cmp	r3, #0
 800b564:	d103      	bne.n	800b56e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	220a      	movs	r2, #10
 800b56a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b56c:	e0bd      	b.n	800b6ea <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800b56e:	7bbb      	ldrb	r3, [r7, #14]
 800b570:	b2db      	uxtb	r3, r3
 800b572:	2b03      	cmp	r3, #3
 800b574:	f040 80b9 	bne.w	800b6ea <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	220a      	movs	r2, #10
 800b57c:	701a      	strb	r2, [r3, #0]
      break;
 800b57e:	e0b4      	b.n	800b6ea <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	220a      	movs	r2, #10
 800b584:	701a      	strb	r2, [r3, #0]
      break;
 800b586:	e0b0      	b.n	800b6ea <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b58e:	2b00      	cmp	r3, #0
 800b590:	f000 80ad 	beq.w	800b6ee <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b59c:	2300      	movs	r3, #0
 800b59e:	73fb      	strb	r3, [r7, #15]
 800b5a0:	e016      	b.n	800b5d0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b5a2:	7bfa      	ldrb	r2, [r7, #15]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	32de      	adds	r2, #222	; 0xde
 800b5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ac:	791a      	ldrb	r2, [r3, #4]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d108      	bne.n	800b5ca <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b5b8:	7bfa      	ldrb	r2, [r7, #15]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	32de      	adds	r2, #222	; 0xde
 800b5be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b5c8:	e005      	b.n	800b5d6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	73fb      	strb	r3, [r7, #15]
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d0e5      	beq.n	800b5a2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d016      	beq.n	800b60e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	4798      	blx	r3
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d109      	bne.n	800b606 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2206      	movs	r2, #6
 800b5f6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5fe:	2103      	movs	r1, #3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b604:	e073      	b.n	800b6ee <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	220d      	movs	r2, #13
 800b60a:	701a      	strb	r2, [r3, #0]
      break;
 800b60c:	e06f      	b.n	800b6ee <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	220d      	movs	r2, #13
 800b612:	701a      	strb	r2, [r3, #0]
      break;
 800b614:	e06b      	b.n	800b6ee <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d017      	beq.n	800b650 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	4798      	blx	r3
 800b62c:	4603      	mov	r3, r0
 800b62e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b630:	7bbb      	ldrb	r3, [r7, #14]
 800b632:	b2db      	uxtb	r3, r3
 800b634:	2b00      	cmp	r3, #0
 800b636:	d103      	bne.n	800b640 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	220b      	movs	r2, #11
 800b63c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b63e:	e058      	b.n	800b6f2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800b640:	7bbb      	ldrb	r3, [r7, #14]
 800b642:	b2db      	uxtb	r3, r3
 800b644:	2b02      	cmp	r3, #2
 800b646:	d154      	bne.n	800b6f2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	220d      	movs	r2, #13
 800b64c:	701a      	strb	r2, [r3, #0]
      break;
 800b64e:	e050      	b.n	800b6f2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	220d      	movs	r2, #13
 800b654:	701a      	strb	r2, [r3, #0]
      break;
 800b656:	e04c      	b.n	800b6f2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d049      	beq.n	800b6f6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b668:	695b      	ldr	r3, [r3, #20]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	4798      	blx	r3
      }
      break;
 800b66e:	e042      	b.n	800b6f6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7ff fd67 	bl	800b14c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b684:	2b00      	cmp	r3, #0
 800b686:	d009      	beq.n	800b69c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d005      	beq.n	800b6b2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6ac:	2105      	movs	r1, #5
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d107      	bne.n	800b6ce <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f7ff fe20 	bl	800b30c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b6cc:	e014      	b.n	800b6f8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f001 faaa 	bl	800cc28 <USBH_LL_Start>
      break;
 800b6d4:	e010      	b.n	800b6f8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800b6d6:	bf00      	nop
 800b6d8:	e00e      	b.n	800b6f8 <USBH_Process+0x3cc>
      break;
 800b6da:	bf00      	nop
 800b6dc:	e00c      	b.n	800b6f8 <USBH_Process+0x3cc>
      break;
 800b6de:	bf00      	nop
 800b6e0:	e00a      	b.n	800b6f8 <USBH_Process+0x3cc>
    break;
 800b6e2:	bf00      	nop
 800b6e4:	e008      	b.n	800b6f8 <USBH_Process+0x3cc>
      break;
 800b6e6:	bf00      	nop
 800b6e8:	e006      	b.n	800b6f8 <USBH_Process+0x3cc>
      break;
 800b6ea:	bf00      	nop
 800b6ec:	e004      	b.n	800b6f8 <USBH_Process+0x3cc>
      break;
 800b6ee:	bf00      	nop
 800b6f0:	e002      	b.n	800b6f8 <USBH_Process+0x3cc>
      break;
 800b6f2:	bf00      	nop
 800b6f4:	e000      	b.n	800b6f8 <USBH_Process+0x3cc>
      break;
 800b6f6:	bf00      	nop
  }
  return USBH_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop

0800b704 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b088      	sub	sp, #32
 800b708:	af04      	add	r7, sp, #16
 800b70a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b70c:	2301      	movs	r3, #1
 800b70e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b710:	2301      	movs	r3, #1
 800b712:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	785b      	ldrb	r3, [r3, #1]
 800b718:	2b07      	cmp	r3, #7
 800b71a:	f200 81c1 	bhi.w	800baa0 <USBH_HandleEnum+0x39c>
 800b71e:	a201      	add	r2, pc, #4	; (adr r2, 800b724 <USBH_HandleEnum+0x20>)
 800b720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b724:	0800b745 	.word	0x0800b745
 800b728:	0800b803 	.word	0x0800b803
 800b72c:	0800b86d 	.word	0x0800b86d
 800b730:	0800b8fb 	.word	0x0800b8fb
 800b734:	0800b965 	.word	0x0800b965
 800b738:	0800b9d5 	.word	0x0800b9d5
 800b73c:	0800ba1b 	.word	0x0800ba1b
 800b740:	0800ba61 	.word	0x0800ba61
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b744:	2108      	movs	r1, #8
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 fa50 	bl	800bbec <USBH_Get_DevDesc>
 800b74c:	4603      	mov	r3, r0
 800b74e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b750:	7bbb      	ldrb	r3, [r7, #14]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d130      	bne.n	800b7b8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	7919      	ldrb	r1, [r3, #4]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b77a:	b292      	uxth	r2, r2
 800b77c:	9202      	str	r2, [sp, #8]
 800b77e:	2200      	movs	r2, #0
 800b780:	9201      	str	r2, [sp, #4]
 800b782:	9300      	str	r3, [sp, #0]
 800b784:	4603      	mov	r3, r0
 800b786:	2280      	movs	r2, #128	; 0x80
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f001 f865 	bl	800c858 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	7959      	ldrb	r1, [r3, #5]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b7a2:	b292      	uxth	r2, r2
 800b7a4:	9202      	str	r2, [sp, #8]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	9201      	str	r2, [sp, #4]
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f001 f851 	bl	800c858 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b7b6:	e175      	b.n	800baa4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7b8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ba:	2b03      	cmp	r3, #3
 800b7bc:	f040 8172 	bne.w	800baa4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d903      	bls.n	800b7e2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	220d      	movs	r2, #13
 800b7de:	701a      	strb	r2, [r3, #0]
      break;
 800b7e0:	e160      	b.n	800baa4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	795b      	ldrb	r3, [r3, #5]
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f001 f885 	bl	800c8f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	791b      	ldrb	r3, [r3, #4]
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f001 f87f 	bl	800c8f8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	701a      	strb	r2, [r3, #0]
      break;
 800b800:	e150      	b.n	800baa4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b802:	2112      	movs	r1, #18
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f9f1 	bl	800bbec <USBH_Get_DevDesc>
 800b80a:	4603      	mov	r3, r0
 800b80c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b80e:	7bbb      	ldrb	r3, [r7, #14]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d103      	bne.n	800b81c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2202      	movs	r2, #2
 800b818:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b81a:	e145      	b.n	800baa8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b81c:	7bbb      	ldrb	r3, [r7, #14]
 800b81e:	2b03      	cmp	r3, #3
 800b820:	f040 8142 	bne.w	800baa8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b82a:	3301      	adds	r3, #1
 800b82c:	b2da      	uxtb	r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b83a:	2b03      	cmp	r3, #3
 800b83c:	d903      	bls.n	800b846 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	220d      	movs	r2, #13
 800b842:	701a      	strb	r2, [r3, #0]
      break;
 800b844:	e130      	b.n	800baa8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	795b      	ldrb	r3, [r3, #5]
 800b84a:	4619      	mov	r1, r3
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f001 f853 	bl	800c8f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	791b      	ldrb	r3, [r3, #4]
 800b856:	4619      	mov	r1, r3
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f001 f84d 	bl	800c8f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	701a      	strb	r2, [r3, #0]
      break;
 800b86a:	e11d      	b.n	800baa8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b86c:	2101      	movs	r1, #1
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fa68 	bl	800bd44 <USBH_SetAddress>
 800b874:	4603      	mov	r3, r0
 800b876:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b878:	7bbb      	ldrb	r3, [r7, #14]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d132      	bne.n	800b8e4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b87e:	2002      	movs	r0, #2
 800b880:	f001 fb36 	bl	800cef0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2203      	movs	r2, #3
 800b890:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	7919      	ldrb	r1, [r3, #4]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b8a6:	b292      	uxth	r2, r2
 800b8a8:	9202      	str	r2, [sp, #8]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	9201      	str	r2, [sp, #4]
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2280      	movs	r2, #128	; 0x80
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 ffcf 	bl	800c858 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	7959      	ldrb	r1, [r3, #5]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b8ce:	b292      	uxth	r2, r2
 800b8d0:	9202      	str	r2, [sp, #8]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	9201      	str	r2, [sp, #4]
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2200      	movs	r2, #0
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 ffbb 	bl	800c858 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b8e2:	e0e3      	b.n	800baac <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8e4:	7bbb      	ldrb	r3, [r7, #14]
 800b8e6:	2b03      	cmp	r3, #3
 800b8e8:	f040 80e0 	bne.w	800baac <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	220d      	movs	r2, #13
 800b8f0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	705a      	strb	r2, [r3, #1]
      break;
 800b8f8:	e0d8      	b.n	800baac <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b8fa:	2109      	movs	r1, #9
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 f99d 	bl	800bc3c <USBH_Get_CfgDesc>
 800b902:	4603      	mov	r3, r0
 800b904:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b906:	7bbb      	ldrb	r3, [r7, #14]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d103      	bne.n	800b914 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2204      	movs	r2, #4
 800b910:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b912:	e0cd      	b.n	800bab0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b914:	7bbb      	ldrb	r3, [r7, #14]
 800b916:	2b03      	cmp	r3, #3
 800b918:	f040 80ca 	bne.w	800bab0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b922:	3301      	adds	r3, #1
 800b924:	b2da      	uxtb	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b932:	2b03      	cmp	r3, #3
 800b934:	d903      	bls.n	800b93e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	220d      	movs	r2, #13
 800b93a:	701a      	strb	r2, [r3, #0]
      break;
 800b93c:	e0b8      	b.n	800bab0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	795b      	ldrb	r3, [r3, #5]
 800b942:	4619      	mov	r1, r3
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 ffd7 	bl	800c8f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	791b      	ldrb	r3, [r3, #4]
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 ffd1 	bl	800c8f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	701a      	strb	r2, [r3, #0]
      break;
 800b962:	e0a5      	b.n	800bab0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b96a:	4619      	mov	r1, r3
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 f965 	bl	800bc3c <USBH_Get_CfgDesc>
 800b972:	4603      	mov	r3, r0
 800b974:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b976:	7bbb      	ldrb	r3, [r7, #14]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d103      	bne.n	800b984 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2205      	movs	r2, #5
 800b980:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b982:	e097      	b.n	800bab4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b984:	7bbb      	ldrb	r3, [r7, #14]
 800b986:	2b03      	cmp	r3, #3
 800b988:	f040 8094 	bne.w	800bab4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b992:	3301      	adds	r3, #1
 800b994:	b2da      	uxtb	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d903      	bls.n	800b9ae <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	220d      	movs	r2, #13
 800b9aa:	701a      	strb	r2, [r3, #0]
      break;
 800b9ac:	e082      	b.n	800bab4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	795b      	ldrb	r3, [r3, #5]
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 ff9f 	bl	800c8f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	791b      	ldrb	r3, [r3, #4]
 800b9be:	4619      	mov	r1, r3
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 ff99 	bl	800c8f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	701a      	strb	r2, [r3, #0]
      break;
 800b9d2:	e06f      	b.n	800bab4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d019      	beq.n	800ba12 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b9ea:	23ff      	movs	r3, #255	; 0xff
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f949 	bl	800bc84 <USBH_Get_StringDesc>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b9f6:	7bbb      	ldrb	r3, [r7, #14]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d103      	bne.n	800ba04 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2206      	movs	r2, #6
 800ba00:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ba02:	e059      	b.n	800bab8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
 800ba06:	2b03      	cmp	r3, #3
 800ba08:	d156      	bne.n	800bab8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2206      	movs	r2, #6
 800ba0e:	705a      	strb	r2, [r3, #1]
      break;
 800ba10:	e052      	b.n	800bab8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2206      	movs	r2, #6
 800ba16:	705a      	strb	r2, [r3, #1]
      break;
 800ba18:	e04e      	b.n	800bab8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d019      	beq.n	800ba58 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ba30:	23ff      	movs	r3, #255	; 0xff
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f926 	bl	800bc84 <USBH_Get_StringDesc>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ba3c:	7bbb      	ldrb	r3, [r7, #14]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d103      	bne.n	800ba4a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2207      	movs	r2, #7
 800ba46:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ba48:	e038      	b.n	800babc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba4a:	7bbb      	ldrb	r3, [r7, #14]
 800ba4c:	2b03      	cmp	r3, #3
 800ba4e:	d135      	bne.n	800babc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2207      	movs	r2, #7
 800ba54:	705a      	strb	r2, [r3, #1]
      break;
 800ba56:	e031      	b.n	800babc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2207      	movs	r2, #7
 800ba5c:	705a      	strb	r2, [r3, #1]
      break;
 800ba5e:	e02d      	b.n	800babc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d017      	beq.n	800ba9a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ba76:	23ff      	movs	r3, #255	; 0xff
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 f903 	bl	800bc84 <USBH_Get_StringDesc>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ba82:	7bbb      	ldrb	r3, [r7, #14]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d102      	bne.n	800ba8e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ba8c:	e018      	b.n	800bac0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba8e:	7bbb      	ldrb	r3, [r7, #14]
 800ba90:	2b03      	cmp	r3, #3
 800ba92:	d115      	bne.n	800bac0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	73fb      	strb	r3, [r7, #15]
      break;
 800ba98:	e012      	b.n	800bac0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba9e:	e00f      	b.n	800bac0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800baa0:	bf00      	nop
 800baa2:	e00e      	b.n	800bac2 <USBH_HandleEnum+0x3be>
      break;
 800baa4:	bf00      	nop
 800baa6:	e00c      	b.n	800bac2 <USBH_HandleEnum+0x3be>
      break;
 800baa8:	bf00      	nop
 800baaa:	e00a      	b.n	800bac2 <USBH_HandleEnum+0x3be>
      break;
 800baac:	bf00      	nop
 800baae:	e008      	b.n	800bac2 <USBH_HandleEnum+0x3be>
      break;
 800bab0:	bf00      	nop
 800bab2:	e006      	b.n	800bac2 <USBH_HandleEnum+0x3be>
      break;
 800bab4:	bf00      	nop
 800bab6:	e004      	b.n	800bac2 <USBH_HandleEnum+0x3be>
      break;
 800bab8:	bf00      	nop
 800baba:	e002      	b.n	800bac2 <USBH_HandleEnum+0x3be>
      break;
 800babc:	bf00      	nop
 800babe:	e000      	b.n	800bac2 <USBH_HandleEnum+0x3be>
      break;
 800bac0:	bf00      	nop
  }
  return Status;
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3710      	adds	r7, #16
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	683a      	ldr	r2, [r7, #0]
 800bada:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bade:	bf00      	nop
 800bae0:	370c      	adds	r7, #12
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b082      	sub	sp, #8
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 f804 	bl	800bb0e <USBH_HandleSof>
}
 800bb06:	bf00      	nop
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bb0e:	b580      	push	{r7, lr}
 800bb10:	b082      	sub	sp, #8
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b0b      	cmp	r3, #11
 800bb1e:	d10a      	bne.n	800bb36 <USBH_HandleSof+0x28>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d005      	beq.n	800bb36 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	4798      	blx	r3
  }
}
 800bb36:	bf00      	nop
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bb3e:	b480      	push	{r7}
 800bb40:	b083      	sub	sp, #12
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800bb4e:	bf00      	nop
}
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	b083      	sub	sp, #12
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bb6a:	bf00      	nop
}
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2201      	movs	r2, #1
 800bb82:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f001 f84a 	bl	800cc5e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	791b      	ldrb	r3, [r3, #4]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 fe91 	bl	800c8f8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	795b      	ldrb	r3, [r3, #5]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 fe8b 	bl	800c8f8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b086      	sub	sp, #24
 800bbf0:	af02      	add	r7, sp, #8
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800bbfe:	78fb      	ldrb	r3, [r7, #3]
 800bc00:	b29b      	uxth	r3, r3
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	4613      	mov	r3, r2
 800bc06:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 f864 	bl	800bcda <USBH_GetDescriptor>
 800bc12:	4603      	mov	r3, r0
 800bc14:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800bc16:	7bfb      	ldrb	r3, [r7, #15]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10a      	bne.n	800bc32 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bc28:	78fa      	ldrb	r2, [r7, #3]
 800bc2a:	b292      	uxth	r2, r2
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	f000 f918 	bl	800be62 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800bc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af02      	add	r7, sp, #8
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	460b      	mov	r3, r1
 800bc46:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	331c      	adds	r3, #28
 800bc4c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bc4e:	887b      	ldrh	r3, [r7, #2]
 800bc50:	9300      	str	r3, [sp, #0]
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc58:	2100      	movs	r1, #0
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 f83d 	bl	800bcda <USBH_GetDescriptor>
 800bc60:	4603      	mov	r3, r0
 800bc62:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d107      	bne.n	800bc7a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bc6a:	887b      	ldrh	r3, [r7, #2]
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	68b9      	ldr	r1, [r7, #8]
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 f987 	bl	800bf84 <USBH_ParseCfgDesc>
 800bc76:	4603      	mov	r3, r0
 800bc78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b088      	sub	sp, #32
 800bc88:	af02      	add	r7, sp, #8
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	607a      	str	r2, [r7, #4]
 800bc8e:	461a      	mov	r2, r3
 800bc90:	460b      	mov	r3, r1
 800bc92:	72fb      	strb	r3, [r7, #11]
 800bc94:	4613      	mov	r3, r2
 800bc96:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800bc98:	7afb      	ldrb	r3, [r7, #11]
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bca0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800bca8:	893b      	ldrh	r3, [r7, #8]
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	460b      	mov	r3, r1
 800bcae:	2100      	movs	r1, #0
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f000 f812 	bl	800bcda <USBH_GetDescriptor>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800bcba:	7dfb      	ldrb	r3, [r7, #23]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d107      	bne.n	800bcd0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bcc6:	893a      	ldrh	r2, [r7, #8]
 800bcc8:	6879      	ldr	r1, [r7, #4]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 fb24 	bl	800c318 <USBH_ParseStringDesc>
  }

  return status;
 800bcd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3718      	adds	r7, #24
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b084      	sub	sp, #16
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	60f8      	str	r0, [r7, #12]
 800bce2:	607b      	str	r3, [r7, #4]
 800bce4:	460b      	mov	r3, r1
 800bce6:	72fb      	strb	r3, [r7, #11]
 800bce8:	4613      	mov	r3, r2
 800bcea:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	789b      	ldrb	r3, [r3, #2]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d11c      	bne.n	800bd2e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bcf4:	7afb      	ldrb	r3, [r7, #11]
 800bcf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bcfa:	b2da      	uxtb	r2, r3
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2206      	movs	r2, #6
 800bd04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	893a      	ldrh	r2, [r7, #8]
 800bd0a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bd0c:	893b      	ldrh	r3, [r7, #8]
 800bd0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bd12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd16:	d104      	bne.n	800bd22 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f240 4209 	movw	r2, #1033	; 0x409
 800bd1e:	829a      	strh	r2, [r3, #20]
 800bd20:	e002      	b.n	800bd28 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2200      	movs	r2, #0
 800bd26:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	8b3a      	ldrh	r2, [r7, #24]
 800bd2c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bd2e:	8b3b      	ldrh	r3, [r7, #24]
 800bd30:	461a      	mov	r2, r3
 800bd32:	6879      	ldr	r1, [r7, #4]
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f000 fb3d 	bl	800c3b4 <USBH_CtlReq>
 800bd3a:	4603      	mov	r3, r0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	789b      	ldrb	r3, [r3, #2]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d10f      	bne.n	800bd78 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2205      	movs	r2, #5
 800bd62:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bd64:	78fb      	ldrb	r3, [r7, #3]
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd78:	2200      	movs	r2, #0
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 fb19 	bl	800c3b4 <USBH_CtlReq>
 800bd82:	4603      	mov	r3, r0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	460b      	mov	r3, r1
 800bd96:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	789b      	ldrb	r3, [r3, #2]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d10e      	bne.n	800bdbe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2209      	movs	r2, #9
 800bdaa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	887a      	ldrh	r2, [r7, #2]
 800bdb0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 faf6 	bl	800c3b4 <USBH_CtlReq>
 800bdc8:	4603      	mov	r3, r0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b082      	sub	sp, #8
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	460b      	mov	r3, r1
 800bddc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	789b      	ldrb	r3, [r3, #2]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d10f      	bne.n	800be06 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2203      	movs	r2, #3
 800bdf0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bdf2:	78fb      	ldrb	r3, [r7, #3]
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800be06:	2200      	movs	r2, #0
 800be08:	2100      	movs	r1, #0
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fad2 	bl	800c3b4 <USBH_CtlReq>
 800be10:	4603      	mov	r3, r0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3708      	adds	r7, #8
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b082      	sub	sp, #8
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
 800be22:	460b      	mov	r3, r1
 800be24:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	789b      	ldrb	r3, [r3, #2]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d10f      	bne.n	800be4e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2202      	movs	r2, #2
 800be32:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2201      	movs	r2, #1
 800be38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800be40:	78fb      	ldrb	r3, [r7, #3]
 800be42:	b29a      	uxth	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800be4e:	2200      	movs	r2, #0
 800be50:	2100      	movs	r1, #0
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 faae 	bl	800c3b4 <USBH_CtlReq>
 800be58:	4603      	mov	r3, r0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3708      	adds	r7, #8
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800be62:	b480      	push	{r7}
 800be64:	b085      	sub	sp, #20
 800be66:	af00      	add	r7, sp, #0
 800be68:	60f8      	str	r0, [r7, #12]
 800be6a:	60b9      	str	r1, [r7, #8]
 800be6c:	4613      	mov	r3, r2
 800be6e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	781a      	ldrb	r2, [r3, #0]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	785a      	ldrb	r2, [r3, #1]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	3302      	adds	r3, #2
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	b29a      	uxth	r2, r3
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	3303      	adds	r3, #3
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	b29b      	uxth	r3, r3
 800be90:	021b      	lsls	r3, r3, #8
 800be92:	b29b      	uxth	r3, r3
 800be94:	4313      	orrs	r3, r2
 800be96:	b29a      	uxth	r2, r3
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	791a      	ldrb	r2, [r3, #4]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	795a      	ldrb	r2, [r3, #5]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	799a      	ldrb	r2, [r3, #6]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	79da      	ldrb	r2, [r3, #7]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	79db      	ldrb	r3, [r3, #7]
 800bec0:	2b20      	cmp	r3, #32
 800bec2:	dc11      	bgt.n	800bee8 <USBH_ParseDevDesc+0x86>
 800bec4:	2b08      	cmp	r3, #8
 800bec6:	db16      	blt.n	800bef6 <USBH_ParseDevDesc+0x94>
 800bec8:	3b08      	subs	r3, #8
 800beca:	2201      	movs	r2, #1
 800becc:	fa02 f303 	lsl.w	r3, r2, r3
 800bed0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800bed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bed8:	2b00      	cmp	r3, #0
 800beda:	bf14      	ite	ne
 800bedc:	2301      	movne	r3, #1
 800bede:	2300      	moveq	r3, #0
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d102      	bne.n	800beec <USBH_ParseDevDesc+0x8a>
 800bee6:	e006      	b.n	800bef6 <USBH_ParseDevDesc+0x94>
 800bee8:	2b40      	cmp	r3, #64	; 0x40
 800beea:	d104      	bne.n	800bef6 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	79da      	ldrb	r2, [r3, #7]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	71da      	strb	r2, [r3, #7]
      break;
 800bef4:	e003      	b.n	800befe <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2240      	movs	r2, #64	; 0x40
 800befa:	71da      	strb	r2, [r3, #7]
      break;
 800befc:	bf00      	nop
  }

  if (length > 8U)
 800befe:	88fb      	ldrh	r3, [r7, #6]
 800bf00:	2b08      	cmp	r3, #8
 800bf02:	d939      	bls.n	800bf78 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	3308      	adds	r3, #8
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	3309      	adds	r3, #9
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	021b      	lsls	r3, r3, #8
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	330a      	adds	r3, #10
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	330b      	adds	r3, #11
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	021b      	lsls	r3, r3, #8
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	4313      	orrs	r3, r2
 800bf36:	b29a      	uxth	r2, r3
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	330c      	adds	r3, #12
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	330d      	adds	r3, #13
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	021b      	lsls	r3, r3, #8
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	4313      	orrs	r3, r2
 800bf52:	b29a      	uxth	r2, r3
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	7b9a      	ldrb	r2, [r3, #14]
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	7bda      	ldrb	r2, [r3, #15]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	7c1a      	ldrb	r2, [r3, #16]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	7c5a      	ldrb	r2, [r3, #17]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	745a      	strb	r2, [r3, #17]
  }
}
 800bf78:	bf00      	nop
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b08c      	sub	sp, #48	; 0x30
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	4613      	mov	r3, r2
 800bf90:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bf98:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	781a      	ldrb	r2, [r3, #0]
 800bfb8:	6a3b      	ldr	r3, [r7, #32]
 800bfba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	785a      	ldrb	r2, [r3, #1]
 800bfc0:	6a3b      	ldr	r3, [r7, #32]
 800bfc2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	3302      	adds	r3, #2
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	b29a      	uxth	r2, r3
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	3303      	adds	r3, #3
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	021b      	lsls	r3, r3, #8
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfe0:	bf28      	it	cs
 800bfe2:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	6a3b      	ldr	r3, [r7, #32]
 800bfea:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	791a      	ldrb	r2, [r3, #4]
 800bff0:	6a3b      	ldr	r3, [r7, #32]
 800bff2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	795a      	ldrb	r2, [r3, #5]
 800bff8:	6a3b      	ldr	r3, [r7, #32]
 800bffa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	799a      	ldrb	r2, [r3, #6]
 800c000:	6a3b      	ldr	r3, [r7, #32]
 800c002:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	79da      	ldrb	r2, [r3, #7]
 800c008:	6a3b      	ldr	r3, [r7, #32]
 800c00a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	7a1a      	ldrb	r2, [r3, #8]
 800c010:	6a3b      	ldr	r3, [r7, #32]
 800c012:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c014:	6a3b      	ldr	r3, [r7, #32]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2b09      	cmp	r3, #9
 800c01a:	d002      	beq.n	800c022 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c01c:	6a3b      	ldr	r3, [r7, #32]
 800c01e:	2209      	movs	r2, #9
 800c020:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c022:	88fb      	ldrh	r3, [r7, #6]
 800c024:	2b09      	cmp	r3, #9
 800c026:	f240 809d 	bls.w	800c164 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c02a:	2309      	movs	r3, #9
 800c02c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c02e:	2300      	movs	r3, #0
 800c030:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c032:	e081      	b.n	800c138 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c034:	f107 0316 	add.w	r3, r7, #22
 800c038:	4619      	mov	r1, r3
 800c03a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c03c:	f000 f99f 	bl	800c37e <USBH_GetNextDesc>
 800c040:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c044:	785b      	ldrb	r3, [r3, #1]
 800c046:	2b04      	cmp	r3, #4
 800c048:	d176      	bne.n	800c138 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	2b09      	cmp	r3, #9
 800c050:	d002      	beq.n	800c058 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c054:	2209      	movs	r2, #9
 800c056:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c05c:	221a      	movs	r2, #26
 800c05e:	fb02 f303 	mul.w	r3, r2, r3
 800c062:	3308      	adds	r3, #8
 800c064:	6a3a      	ldr	r2, [r7, #32]
 800c066:	4413      	add	r3, r2
 800c068:	3302      	adds	r3, #2
 800c06a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c06c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c06e:	69f8      	ldr	r0, [r7, #28]
 800c070:	f000 f87e 	bl	800c170 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c074:	2300      	movs	r3, #0
 800c076:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c07a:	2300      	movs	r3, #0
 800c07c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c07e:	e043      	b.n	800c108 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c080:	f107 0316 	add.w	r3, r7, #22
 800c084:	4619      	mov	r1, r3
 800c086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c088:	f000 f979 	bl	800c37e <USBH_GetNextDesc>
 800c08c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c090:	785b      	ldrb	r3, [r3, #1]
 800c092:	2b05      	cmp	r3, #5
 800c094:	d138      	bne.n	800c108 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c096:	69fb      	ldr	r3, [r7, #28]
 800c098:	795b      	ldrb	r3, [r3, #5]
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d10f      	bne.n	800c0be <USBH_ParseCfgDesc+0x13a>
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	799b      	ldrb	r3, [r3, #6]
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d10b      	bne.n	800c0be <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	79db      	ldrb	r3, [r3, #7]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d10f      	bne.n	800c0ce <USBH_ParseCfgDesc+0x14a>
 800c0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	2b09      	cmp	r3, #9
 800c0b4:	d00b      	beq.n	800c0ce <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b8:	2209      	movs	r2, #9
 800c0ba:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c0bc:	e007      	b.n	800c0ce <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	2b07      	cmp	r3, #7
 800c0c4:	d004      	beq.n	800c0d0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c8:	2207      	movs	r2, #7
 800c0ca:	701a      	strb	r2, [r3, #0]
 800c0cc:	e000      	b.n	800c0d0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c0ce:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0d4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c0d8:	3201      	adds	r2, #1
 800c0da:	00d2      	lsls	r2, r2, #3
 800c0dc:	211a      	movs	r1, #26
 800c0de:	fb01 f303 	mul.w	r3, r1, r3
 800c0e2:	4413      	add	r3, r2
 800c0e4:	3308      	adds	r3, #8
 800c0e6:	6a3a      	ldr	r2, [r7, #32]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	3304      	adds	r3, #4
 800c0ec:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c0ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0f0:	69b9      	ldr	r1, [r7, #24]
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f000 f86b 	bl	800c1ce <USBH_ParseEPDesc>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c0fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c102:	3301      	adds	r3, #1
 800c104:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	791b      	ldrb	r3, [r3, #4]
 800c10c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c110:	429a      	cmp	r2, r3
 800c112:	d204      	bcs.n	800c11e <USBH_ParseCfgDesc+0x19a>
 800c114:	6a3b      	ldr	r3, [r7, #32]
 800c116:	885a      	ldrh	r2, [r3, #2]
 800c118:	8afb      	ldrh	r3, [r7, #22]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d8b0      	bhi.n	800c080 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	791b      	ldrb	r3, [r3, #4]
 800c122:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c126:	429a      	cmp	r2, r3
 800c128:	d201      	bcs.n	800c12e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c12a:	2303      	movs	r3, #3
 800c12c:	e01c      	b.n	800c168 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c12e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c132:	3301      	adds	r3, #1
 800c134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d805      	bhi.n	800c14c <USBH_ParseCfgDesc+0x1c8>
 800c140:	6a3b      	ldr	r3, [r7, #32]
 800c142:	885a      	ldrh	r2, [r3, #2]
 800c144:	8afb      	ldrh	r3, [r7, #22]
 800c146:	429a      	cmp	r2, r3
 800c148:	f63f af74 	bhi.w	800c034 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c14c:	6a3b      	ldr	r3, [r7, #32]
 800c14e:	791b      	ldrb	r3, [r3, #4]
 800c150:	2b02      	cmp	r3, #2
 800c152:	bf28      	it	cs
 800c154:	2302      	movcs	r3, #2
 800c156:	b2db      	uxtb	r3, r3
 800c158:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d201      	bcs.n	800c164 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c160:	2303      	movs	r3, #3
 800c162:	e001      	b.n	800c168 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3730      	adds	r7, #48	; 0x30
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	781a      	ldrb	r2, [r3, #0]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	785a      	ldrb	r2, [r3, #1]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	789a      	ldrb	r2, [r3, #2]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	78da      	ldrb	r2, [r3, #3]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	791a      	ldrb	r2, [r3, #4]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	795a      	ldrb	r2, [r3, #5]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	799a      	ldrb	r2, [r3, #6]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	79da      	ldrb	r2, [r3, #7]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	7a1a      	ldrb	r2, [r3, #8]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	721a      	strb	r2, [r3, #8]
}
 800c1c2:	bf00      	nop
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr

0800c1ce <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b087      	sub	sp, #28
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	60f8      	str	r0, [r7, #12]
 800c1d6:	60b9      	str	r1, [r7, #8]
 800c1d8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	781a      	ldrb	r2, [r3, #0]
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	785a      	ldrb	r2, [r3, #1]
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	789a      	ldrb	r2, [r3, #2]
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	78da      	ldrb	r2, [r3, #3]
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	3304      	adds	r3, #4
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	b29a      	uxth	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	3305      	adds	r3, #5
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	021b      	lsls	r3, r3, #8
 800c210:	b29b      	uxth	r3, r3
 800c212:	4313      	orrs	r3, r2
 800c214:	b29a      	uxth	r2, r3
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	799a      	ldrb	r2, [r3, #6]
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	889b      	ldrh	r3, [r3, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d102      	bne.n	800c230 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c22a:	2303      	movs	r3, #3
 800c22c:	75fb      	strb	r3, [r7, #23]
 800c22e:	e033      	b.n	800c298 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	889b      	ldrh	r3, [r3, #4]
 800c234:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c238:	f023 0307 	bic.w	r3, r3, #7
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	889b      	ldrh	r3, [r3, #4]
 800c246:	b21a      	sxth	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	3304      	adds	r3, #4
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	b299      	uxth	r1, r3
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	3305      	adds	r3, #5
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	b29b      	uxth	r3, r3
 800c258:	021b      	lsls	r3, r3, #8
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	430b      	orrs	r3, r1
 800c25e:	b29b      	uxth	r3, r3
 800c260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c264:	2b00      	cmp	r3, #0
 800c266:	d110      	bne.n	800c28a <USBH_ParseEPDesc+0xbc>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	3304      	adds	r3, #4
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	b299      	uxth	r1, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	3305      	adds	r3, #5
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	b29b      	uxth	r3, r3
 800c278:	021b      	lsls	r3, r3, #8
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	430b      	orrs	r3, r1
 800c27e:	b29b      	uxth	r3, r3
 800c280:	b21b      	sxth	r3, r3
 800c282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c286:	b21b      	sxth	r3, r3
 800c288:	e001      	b.n	800c28e <USBH_ParseEPDesc+0xc0>
 800c28a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c28e:	4313      	orrs	r3, r2
 800c290:	b21b      	sxth	r3, r3
 800c292:	b29a      	uxth	r2, r3
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d116      	bne.n	800c2d0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	78db      	ldrb	r3, [r3, #3]
 800c2a6:	f003 0303 	and.w	r3, r3, #3
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d005      	beq.n	800c2ba <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	78db      	ldrb	r3, [r3, #3]
 800c2b2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c2b6:	2b03      	cmp	r3, #3
 800c2b8:	d127      	bne.n	800c30a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	799b      	ldrb	r3, [r3, #6]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d003      	beq.n	800c2ca <USBH_ParseEPDesc+0xfc>
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	799b      	ldrb	r3, [r3, #6]
 800c2c6:	2b10      	cmp	r3, #16
 800c2c8:	d91f      	bls.n	800c30a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	75fb      	strb	r3, [r7, #23]
 800c2ce:	e01c      	b.n	800c30a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	78db      	ldrb	r3, [r3, #3]
 800c2d4:	f003 0303 	and.w	r3, r3, #3
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d10a      	bne.n	800c2f2 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	799b      	ldrb	r3, [r3, #6]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d003      	beq.n	800c2ec <USBH_ParseEPDesc+0x11e>
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	799b      	ldrb	r3, [r3, #6]
 800c2e8:	2b10      	cmp	r3, #16
 800c2ea:	d90e      	bls.n	800c30a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	75fb      	strb	r3, [r7, #23]
 800c2f0:	e00b      	b.n	800c30a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	78db      	ldrb	r3, [r3, #3]
 800c2f6:	f003 0303 	and.w	r3, r3, #3
 800c2fa:	2b03      	cmp	r3, #3
 800c2fc:	d105      	bne.n	800c30a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	799b      	ldrb	r3, [r3, #6]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d101      	bne.n	800c30a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c306:	2303      	movs	r3, #3
 800c308:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800c30a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	371c      	adds	r7, #28
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c318:	b480      	push	{r7}
 800c31a:	b087      	sub	sp, #28
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	4613      	mov	r3, r2
 800c324:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	3301      	adds	r3, #1
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	2b03      	cmp	r3, #3
 800c32e:	d120      	bne.n	800c372 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	1e9a      	subs	r2, r3, #2
 800c336:	88fb      	ldrh	r3, [r7, #6]
 800c338:	4293      	cmp	r3, r2
 800c33a:	bf28      	it	cs
 800c33c:	4613      	movcs	r3, r2
 800c33e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	3302      	adds	r3, #2
 800c344:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c346:	2300      	movs	r3, #0
 800c348:	82fb      	strh	r3, [r7, #22]
 800c34a:	e00b      	b.n	800c364 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c34c:	8afb      	ldrh	r3, [r7, #22]
 800c34e:	68fa      	ldr	r2, [r7, #12]
 800c350:	4413      	add	r3, r2
 800c352:	781a      	ldrb	r2, [r3, #0]
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	3301      	adds	r3, #1
 800c35c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c35e:	8afb      	ldrh	r3, [r7, #22]
 800c360:	3302      	adds	r3, #2
 800c362:	82fb      	strh	r3, [r7, #22]
 800c364:	8afa      	ldrh	r2, [r7, #22]
 800c366:	8abb      	ldrh	r3, [r7, #20]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d3ef      	bcc.n	800c34c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	2200      	movs	r2, #0
 800c370:	701a      	strb	r2, [r3, #0]
  }
}
 800c372:	bf00      	nop
 800c374:	371c      	adds	r7, #28
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c37e:	b480      	push	{r7}
 800c380:	b085      	sub	sp, #20
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	881a      	ldrh	r2, [r3, #0]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	b29b      	uxth	r3, r3
 800c392:	4413      	add	r3, r2
 800c394:	b29a      	uxth	r2, r3
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b086      	sub	sp, #24
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	789b      	ldrb	r3, [r3, #2]
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d002      	beq.n	800c3d4 <USBH_CtlReq+0x20>
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	d00f      	beq.n	800c3f2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c3d2:	e027      	b.n	800c424 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	68ba      	ldr	r2, [r7, #8]
 800c3d8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	88fa      	ldrh	r2, [r7, #6]
 800c3de:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2202      	movs	r2, #2
 800c3ea:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	75fb      	strb	r3, [r7, #23]
      break;
 800c3f0:	e018      	b.n	800c424 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f000 f81c 	bl	800c430 <USBH_HandleControl>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c3fc:	7dfb      	ldrb	r3, [r7, #23]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d002      	beq.n	800c408 <USBH_CtlReq+0x54>
 800c402:	7dfb      	ldrb	r3, [r7, #23]
 800c404:	2b03      	cmp	r3, #3
 800c406:	d106      	bne.n	800c416 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2201      	movs	r2, #1
 800c40c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2200      	movs	r2, #0
 800c412:	761a      	strb	r2, [r3, #24]
      break;
 800c414:	e005      	b.n	800c422 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c416:	7dfb      	ldrb	r3, [r7, #23]
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d102      	bne.n	800c422 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2201      	movs	r2, #1
 800c420:	709a      	strb	r2, [r3, #2]
      break;
 800c422:	bf00      	nop
  }
  return status;
 800c424:	7dfb      	ldrb	r3, [r7, #23]
}
 800c426:	4618      	mov	r0, r3
 800c428:	3718      	adds	r7, #24
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
	...

0800c430 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af02      	add	r7, sp, #8
 800c436:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c438:	2301      	movs	r3, #1
 800c43a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c43c:	2300      	movs	r3, #0
 800c43e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	7e1b      	ldrb	r3, [r3, #24]
 800c444:	3b01      	subs	r3, #1
 800c446:	2b0a      	cmp	r3, #10
 800c448:	f200 8156 	bhi.w	800c6f8 <USBH_HandleControl+0x2c8>
 800c44c:	a201      	add	r2, pc, #4	; (adr r2, 800c454 <USBH_HandleControl+0x24>)
 800c44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c452:	bf00      	nop
 800c454:	0800c481 	.word	0x0800c481
 800c458:	0800c49b 	.word	0x0800c49b
 800c45c:	0800c505 	.word	0x0800c505
 800c460:	0800c52b 	.word	0x0800c52b
 800c464:	0800c563 	.word	0x0800c563
 800c468:	0800c58d 	.word	0x0800c58d
 800c46c:	0800c5df 	.word	0x0800c5df
 800c470:	0800c601 	.word	0x0800c601
 800c474:	0800c63d 	.word	0x0800c63d
 800c478:	0800c663 	.word	0x0800c663
 800c47c:	0800c6a1 	.word	0x0800c6a1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f103 0110 	add.w	r1, r3, #16
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	795b      	ldrb	r3, [r3, #5]
 800c48a:	461a      	mov	r2, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 f943 	bl	800c718 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2202      	movs	r2, #2
 800c496:	761a      	strb	r2, [r3, #24]
      break;
 800c498:	e139      	b.n	800c70e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	795b      	ldrb	r3, [r3, #5]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 fccb 	bl	800ce3c <USBH_LL_GetURBState>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c4aa:	7bbb      	ldrb	r3, [r7, #14]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d11e      	bne.n	800c4ee <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	7c1b      	ldrb	r3, [r3, #16]
 800c4b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c4b8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	8adb      	ldrh	r3, [r3, #22]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00a      	beq.n	800c4d8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c4c2:	7b7b      	ldrb	r3, [r7, #13]
 800c4c4:	2b80      	cmp	r3, #128	; 0x80
 800c4c6:	d103      	bne.n	800c4d0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2203      	movs	r2, #3
 800c4cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c4ce:	e115      	b.n	800c6fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2205      	movs	r2, #5
 800c4d4:	761a      	strb	r2, [r3, #24]
      break;
 800c4d6:	e111      	b.n	800c6fc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c4d8:	7b7b      	ldrb	r3, [r7, #13]
 800c4da:	2b80      	cmp	r3, #128	; 0x80
 800c4dc:	d103      	bne.n	800c4e6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2209      	movs	r2, #9
 800c4e2:	761a      	strb	r2, [r3, #24]
      break;
 800c4e4:	e10a      	b.n	800c6fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2207      	movs	r2, #7
 800c4ea:	761a      	strb	r2, [r3, #24]
      break;
 800c4ec:	e106      	b.n	800c6fc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c4ee:	7bbb      	ldrb	r3, [r7, #14]
 800c4f0:	2b04      	cmp	r3, #4
 800c4f2:	d003      	beq.n	800c4fc <USBH_HandleControl+0xcc>
 800c4f4:	7bbb      	ldrb	r3, [r7, #14]
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	f040 8100 	bne.w	800c6fc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	220b      	movs	r2, #11
 800c500:	761a      	strb	r2, [r3, #24]
      break;
 800c502:	e0fb      	b.n	800c6fc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6899      	ldr	r1, [r3, #8]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	899a      	ldrh	r2, [r3, #12]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	791b      	ldrb	r3, [r3, #4]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 f93a 	bl	800c796 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2204      	movs	r2, #4
 800c526:	761a      	strb	r2, [r3, #24]
      break;
 800c528:	e0f1      	b.n	800c70e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	791b      	ldrb	r3, [r3, #4]
 800c52e:	4619      	mov	r1, r3
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 fc83 	bl	800ce3c <USBH_LL_GetURBState>
 800c536:	4603      	mov	r3, r0
 800c538:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c53a:	7bbb      	ldrb	r3, [r7, #14]
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d102      	bne.n	800c546 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2209      	movs	r2, #9
 800c544:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c546:	7bbb      	ldrb	r3, [r7, #14]
 800c548:	2b05      	cmp	r3, #5
 800c54a:	d102      	bne.n	800c552 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c54c:	2303      	movs	r3, #3
 800c54e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c550:	e0d6      	b.n	800c700 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c552:	7bbb      	ldrb	r3, [r7, #14]
 800c554:	2b04      	cmp	r3, #4
 800c556:	f040 80d3 	bne.w	800c700 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	220b      	movs	r2, #11
 800c55e:	761a      	strb	r2, [r3, #24]
      break;
 800c560:	e0ce      	b.n	800c700 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6899      	ldr	r1, [r3, #8]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	899a      	ldrh	r2, [r3, #12]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	795b      	ldrb	r3, [r3, #5]
 800c56e:	2001      	movs	r0, #1
 800c570:	9000      	str	r0, [sp, #0]
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 f8ea 	bl	800c74c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c57e:	b29a      	uxth	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2206      	movs	r2, #6
 800c588:	761a      	strb	r2, [r3, #24]
      break;
 800c58a:	e0c0      	b.n	800c70e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	795b      	ldrb	r3, [r3, #5]
 800c590:	4619      	mov	r1, r3
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 fc52 	bl	800ce3c <USBH_LL_GetURBState>
 800c598:	4603      	mov	r3, r0
 800c59a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c59c:	7bbb      	ldrb	r3, [r7, #14]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d103      	bne.n	800c5aa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2207      	movs	r2, #7
 800c5a6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c5a8:	e0ac      	b.n	800c704 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c5aa:	7bbb      	ldrb	r3, [r7, #14]
 800c5ac:	2b05      	cmp	r3, #5
 800c5ae:	d105      	bne.n	800c5bc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	220c      	movs	r2, #12
 800c5b4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c5b6:	2303      	movs	r3, #3
 800c5b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c5ba:	e0a3      	b.n	800c704 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c5bc:	7bbb      	ldrb	r3, [r7, #14]
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	d103      	bne.n	800c5ca <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2205      	movs	r2, #5
 800c5c6:	761a      	strb	r2, [r3, #24]
      break;
 800c5c8:	e09c      	b.n	800c704 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c5ca:	7bbb      	ldrb	r3, [r7, #14]
 800c5cc:	2b04      	cmp	r3, #4
 800c5ce:	f040 8099 	bne.w	800c704 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	220b      	movs	r2, #11
 800c5d6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c5d8:	2302      	movs	r3, #2
 800c5da:	73fb      	strb	r3, [r7, #15]
      break;
 800c5dc:	e092      	b.n	800c704 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	791b      	ldrb	r3, [r3, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f8d5 	bl	800c796 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2208      	movs	r2, #8
 800c5fc:	761a      	strb	r2, [r3, #24]

      break;
 800c5fe:	e086      	b.n	800c70e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	791b      	ldrb	r3, [r3, #4]
 800c604:	4619      	mov	r1, r3
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 fc18 	bl	800ce3c <USBH_LL_GetURBState>
 800c60c:	4603      	mov	r3, r0
 800c60e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c610:	7bbb      	ldrb	r3, [r7, #14]
 800c612:	2b01      	cmp	r3, #1
 800c614:	d105      	bne.n	800c622 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	220d      	movs	r2, #13
 800c61a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c61c:	2300      	movs	r3, #0
 800c61e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c620:	e072      	b.n	800c708 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c622:	7bbb      	ldrb	r3, [r7, #14]
 800c624:	2b04      	cmp	r3, #4
 800c626:	d103      	bne.n	800c630 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	220b      	movs	r2, #11
 800c62c:	761a      	strb	r2, [r3, #24]
      break;
 800c62e:	e06b      	b.n	800c708 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c630:	7bbb      	ldrb	r3, [r7, #14]
 800c632:	2b05      	cmp	r3, #5
 800c634:	d168      	bne.n	800c708 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c636:	2303      	movs	r3, #3
 800c638:	73fb      	strb	r3, [r7, #15]
      break;
 800c63a:	e065      	b.n	800c708 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	795b      	ldrb	r3, [r3, #5]
 800c640:	2201      	movs	r2, #1
 800c642:	9200      	str	r2, [sp, #0]
 800c644:	2200      	movs	r2, #0
 800c646:	2100      	movs	r1, #0
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 f87f 	bl	800c74c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c654:	b29a      	uxth	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	220a      	movs	r2, #10
 800c65e:	761a      	strb	r2, [r3, #24]
      break;
 800c660:	e055      	b.n	800c70e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	795b      	ldrb	r3, [r3, #5]
 800c666:	4619      	mov	r1, r3
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 fbe7 	bl	800ce3c <USBH_LL_GetURBState>
 800c66e:	4603      	mov	r3, r0
 800c670:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c672:	7bbb      	ldrb	r3, [r7, #14]
 800c674:	2b01      	cmp	r3, #1
 800c676:	d105      	bne.n	800c684 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c678:	2300      	movs	r3, #0
 800c67a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	220d      	movs	r2, #13
 800c680:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c682:	e043      	b.n	800c70c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c684:	7bbb      	ldrb	r3, [r7, #14]
 800c686:	2b02      	cmp	r3, #2
 800c688:	d103      	bne.n	800c692 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2209      	movs	r2, #9
 800c68e:	761a      	strb	r2, [r3, #24]
      break;
 800c690:	e03c      	b.n	800c70c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c692:	7bbb      	ldrb	r3, [r7, #14]
 800c694:	2b04      	cmp	r3, #4
 800c696:	d139      	bne.n	800c70c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	220b      	movs	r2, #11
 800c69c:	761a      	strb	r2, [r3, #24]
      break;
 800c69e:	e035      	b.n	800c70c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	7e5b      	ldrb	r3, [r3, #25]
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	b2da      	uxtb	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	765a      	strb	r2, [r3, #25]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	7e5b      	ldrb	r3, [r3, #25]
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	d806      	bhi.n	800c6c2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c6c0:	e025      	b.n	800c70e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c6c8:	2106      	movs	r1, #6
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	795b      	ldrb	r3, [r3, #5]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f90c 	bl	800c8f8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	791b      	ldrb	r3, [r3, #4]
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f906 	bl	800c8f8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c6f2:	2302      	movs	r3, #2
 800c6f4:	73fb      	strb	r3, [r7, #15]
      break;
 800c6f6:	e00a      	b.n	800c70e <USBH_HandleControl+0x2de>

    default:
      break;
 800c6f8:	bf00      	nop
 800c6fa:	e008      	b.n	800c70e <USBH_HandleControl+0x2de>
      break;
 800c6fc:	bf00      	nop
 800c6fe:	e006      	b.n	800c70e <USBH_HandleControl+0x2de>
      break;
 800c700:	bf00      	nop
 800c702:	e004      	b.n	800c70e <USBH_HandleControl+0x2de>
      break;
 800c704:	bf00      	nop
 800c706:	e002      	b.n	800c70e <USBH_HandleControl+0x2de>
      break;
 800c708:	bf00      	nop
 800c70a:	e000      	b.n	800c70e <USBH_HandleControl+0x2de>
      break;
 800c70c:	bf00      	nop
  }

  return status;
 800c70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b088      	sub	sp, #32
 800c71c:	af04      	add	r7, sp, #16
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	4613      	mov	r3, r2
 800c724:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c726:	79f9      	ldrb	r1, [r7, #7]
 800c728:	2300      	movs	r3, #0
 800c72a:	9303      	str	r3, [sp, #12]
 800c72c:	2308      	movs	r3, #8
 800c72e:	9302      	str	r3, [sp, #8]
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	9301      	str	r3, [sp, #4]
 800c734:	2300      	movs	r3, #0
 800c736:	9300      	str	r3, [sp, #0]
 800c738:	2300      	movs	r3, #0
 800c73a:	2200      	movs	r2, #0
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f000 fb4c 	bl	800cdda <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c742:	2300      	movs	r3, #0
}
 800c744:	4618      	mov	r0, r3
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b088      	sub	sp, #32
 800c750:	af04      	add	r7, sp, #16
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	4611      	mov	r1, r2
 800c758:	461a      	mov	r2, r3
 800c75a:	460b      	mov	r3, r1
 800c75c:	80fb      	strh	r3, [r7, #6]
 800c75e:	4613      	mov	r3, r2
 800c760:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d001      	beq.n	800c770 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c76c:	2300      	movs	r3, #0
 800c76e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c770:	7979      	ldrb	r1, [r7, #5]
 800c772:	7e3b      	ldrb	r3, [r7, #24]
 800c774:	9303      	str	r3, [sp, #12]
 800c776:	88fb      	ldrh	r3, [r7, #6]
 800c778:	9302      	str	r3, [sp, #8]
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	2301      	movs	r3, #1
 800c780:	9300      	str	r3, [sp, #0]
 800c782:	2300      	movs	r3, #0
 800c784:	2200      	movs	r2, #0
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f000 fb27 	bl	800cdda <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b088      	sub	sp, #32
 800c79a:	af04      	add	r7, sp, #16
 800c79c:	60f8      	str	r0, [r7, #12]
 800c79e:	60b9      	str	r1, [r7, #8]
 800c7a0:	4611      	mov	r1, r2
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	80fb      	strh	r3, [r7, #6]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c7ac:	7979      	ldrb	r1, [r7, #5]
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	9303      	str	r3, [sp, #12]
 800c7b2:	88fb      	ldrh	r3, [r7, #6]
 800c7b4:	9302      	str	r3, [sp, #8]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	9301      	str	r3, [sp, #4]
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	9300      	str	r3, [sp, #0]
 800c7be:	2300      	movs	r3, #0
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f000 fb09 	bl	800cdda <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c7c8:	2300      	movs	r3, #0

}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b088      	sub	sp, #32
 800c7d6:	af04      	add	r7, sp, #16
 800c7d8:	60f8      	str	r0, [r7, #12]
 800c7da:	60b9      	str	r1, [r7, #8]
 800c7dc:	4611      	mov	r1, r2
 800c7de:	461a      	mov	r2, r3
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	80fb      	strh	r3, [r7, #6]
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d001      	beq.n	800c7f6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c7f6:	7979      	ldrb	r1, [r7, #5]
 800c7f8:	7e3b      	ldrb	r3, [r7, #24]
 800c7fa:	9303      	str	r3, [sp, #12]
 800c7fc:	88fb      	ldrh	r3, [r7, #6]
 800c7fe:	9302      	str	r3, [sp, #8]
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	9301      	str	r3, [sp, #4]
 800c804:	2301      	movs	r3, #1
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	2302      	movs	r3, #2
 800c80a:	2200      	movs	r2, #0
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f000 fae4 	bl	800cdda <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c812:	2300      	movs	r3, #0
}
 800c814:	4618      	mov	r0, r3
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b088      	sub	sp, #32
 800c820:	af04      	add	r7, sp, #16
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	4611      	mov	r1, r2
 800c828:	461a      	mov	r2, r3
 800c82a:	460b      	mov	r3, r1
 800c82c:	80fb      	strh	r3, [r7, #6]
 800c82e:	4613      	mov	r3, r2
 800c830:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c832:	7979      	ldrb	r1, [r7, #5]
 800c834:	2300      	movs	r3, #0
 800c836:	9303      	str	r3, [sp, #12]
 800c838:	88fb      	ldrh	r3, [r7, #6]
 800c83a:	9302      	str	r3, [sp, #8]
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	9301      	str	r3, [sp, #4]
 800c840:	2301      	movs	r3, #1
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	2302      	movs	r3, #2
 800c846:	2201      	movs	r2, #1
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f000 fac6 	bl	800cdda <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c84e:	2300      	movs	r3, #0
}
 800c850:	4618      	mov	r0, r3
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af04      	add	r7, sp, #16
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	4608      	mov	r0, r1
 800c862:	4611      	mov	r1, r2
 800c864:	461a      	mov	r2, r3
 800c866:	4603      	mov	r3, r0
 800c868:	70fb      	strb	r3, [r7, #3]
 800c86a:	460b      	mov	r3, r1
 800c86c:	70bb      	strb	r3, [r7, #2]
 800c86e:	4613      	mov	r3, r2
 800c870:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c872:	7878      	ldrb	r0, [r7, #1]
 800c874:	78ba      	ldrb	r2, [r7, #2]
 800c876:	78f9      	ldrb	r1, [r7, #3]
 800c878:	8b3b      	ldrh	r3, [r7, #24]
 800c87a:	9302      	str	r3, [sp, #8]
 800c87c:	7d3b      	ldrb	r3, [r7, #20]
 800c87e:	9301      	str	r3, [sp, #4]
 800c880:	7c3b      	ldrb	r3, [r7, #16]
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	4603      	mov	r3, r0
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 fa59 	bl	800cd3e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c88c:	2300      	movs	r3, #0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}

0800c896 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b082      	sub	sp, #8
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	460b      	mov	r3, r1
 800c8a0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c8a2:	78fb      	ldrb	r3, [r7, #3]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 fa78 	bl	800cd9c <USBH_LL_ClosePipe>

  return USBH_OK;
 800c8ac:	2300      	movs	r3, #0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b084      	sub	sp, #16
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	460b      	mov	r3, r1
 800c8c0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f836 	bl	800c934 <USBH_GetFreePipe>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c8cc:	89fb      	ldrh	r3, [r7, #14]
 800c8ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d00a      	beq.n	800c8ec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c8d6:	78fa      	ldrb	r2, [r7, #3]
 800c8d8:	89fb      	ldrh	r3, [r7, #14]
 800c8da:	f003 030f 	and.w	r3, r3, #15
 800c8de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c8e2:	6879      	ldr	r1, [r7, #4]
 800c8e4:	33e0      	adds	r3, #224	; 0xe0
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	440b      	add	r3, r1
 800c8ea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c8ec:	89fb      	ldrh	r3, [r7, #14]
 800c8ee:	b2db      	uxtb	r3, r3
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c904:	78fb      	ldrb	r3, [r7, #3]
 800c906:	2b0f      	cmp	r3, #15
 800c908:	d80d      	bhi.n	800c926 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c90a:	78fb      	ldrb	r3, [r7, #3]
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	33e0      	adds	r3, #224	; 0xe0
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	4413      	add	r3, r2
 800c914:	685a      	ldr	r2, [r3, #4]
 800c916:	78fb      	ldrb	r3, [r7, #3]
 800c918:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c91c:	6879      	ldr	r1, [r7, #4]
 800c91e:	33e0      	adds	r3, #224	; 0xe0
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	440b      	add	r3, r1
 800c924:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c93c:	2300      	movs	r3, #0
 800c93e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c940:	2300      	movs	r3, #0
 800c942:	73fb      	strb	r3, [r7, #15]
 800c944:	e00f      	b.n	800c966 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c946:	7bfb      	ldrb	r3, [r7, #15]
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	33e0      	adds	r3, #224	; 0xe0
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	4413      	add	r3, r2
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c956:	2b00      	cmp	r3, #0
 800c958:	d102      	bne.n	800c960 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c95a:	7bfb      	ldrb	r3, [r7, #15]
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	e007      	b.n	800c970 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c960:	7bfb      	ldrb	r3, [r7, #15]
 800c962:	3301      	adds	r3, #1
 800c964:	73fb      	strb	r3, [r7, #15]
 800c966:	7bfb      	ldrb	r3, [r7, #15]
 800c968:	2b0f      	cmp	r3, #15
 800c96a:	d9ec      	bls.n	800c946 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c96c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c970:	4618      	mov	r0, r3
 800c972:	3714      	adds	r7, #20
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800c980:	2200      	movs	r2, #0
 800c982:	490e      	ldr	r1, [pc, #56]	; (800c9bc <MX_USB_HOST_Init+0x40>)
 800c984:	480e      	ldr	r0, [pc, #56]	; (800c9c0 <MX_USB_HOST_Init+0x44>)
 800c986:	f7fe fba7 	bl	800b0d8 <USBH_Init>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d001      	beq.n	800c994 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c990:	f7f5 f922 	bl	8001bd8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800c994:	490b      	ldr	r1, [pc, #44]	; (800c9c4 <MX_USB_HOST_Init+0x48>)
 800c996:	480a      	ldr	r0, [pc, #40]	; (800c9c0 <MX_USB_HOST_Init+0x44>)
 800c998:	f7fe fc2c 	bl	800b1f4 <USBH_RegisterClass>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d001      	beq.n	800c9a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c9a2:	f7f5 f919 	bl	8001bd8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800c9a6:	4806      	ldr	r0, [pc, #24]	; (800c9c0 <MX_USB_HOST_Init+0x44>)
 800c9a8:	f7fe fcb0 	bl	800b30c <USBH_Start>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d001      	beq.n	800c9b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c9b2:	f7f5 f911 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c9b6:	bf00      	nop
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	0800c9dd 	.word	0x0800c9dd
 800c9c0:	20000f18 	.word	0x20000f18
 800c9c4:	2000006c 	.word	0x2000006c

0800c9c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800c9cc:	4802      	ldr	r0, [pc, #8]	; (800c9d8 <MX_USB_HOST_Process+0x10>)
 800c9ce:	f7fe fcad 	bl	800b32c <USBH_Process>
}
 800c9d2:	bf00      	nop
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	20000f18 	.word	0x20000f18

0800c9dc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c9e8:	78fb      	ldrb	r3, [r7, #3]
 800c9ea:	3b01      	subs	r3, #1
 800c9ec:	2b04      	cmp	r3, #4
 800c9ee:	d819      	bhi.n	800ca24 <USBH_UserProcess+0x48>
 800c9f0:	a201      	add	r2, pc, #4	; (adr r2, 800c9f8 <USBH_UserProcess+0x1c>)
 800c9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f6:	bf00      	nop
 800c9f8:	0800ca25 	.word	0x0800ca25
 800c9fc:	0800ca15 	.word	0x0800ca15
 800ca00:	0800ca25 	.word	0x0800ca25
 800ca04:	0800ca1d 	.word	0x0800ca1d
 800ca08:	0800ca0d 	.word	0x0800ca0d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ca0c:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <USBH_UserProcess+0x58>)
 800ca0e:	2203      	movs	r2, #3
 800ca10:	701a      	strb	r2, [r3, #0]
  break;
 800ca12:	e008      	b.n	800ca26 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ca14:	4b07      	ldr	r3, [pc, #28]	; (800ca34 <USBH_UserProcess+0x58>)
 800ca16:	2202      	movs	r2, #2
 800ca18:	701a      	strb	r2, [r3, #0]
  break;
 800ca1a:	e004      	b.n	800ca26 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ca1c:	4b05      	ldr	r3, [pc, #20]	; (800ca34 <USBH_UserProcess+0x58>)
 800ca1e:	2201      	movs	r2, #1
 800ca20:	701a      	strb	r2, [r3, #0]
  break;
 800ca22:	e000      	b.n	800ca26 <USBH_UserProcess+0x4a>

  default:
  break;
 800ca24:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ca26:	bf00      	nop
 800ca28:	370c      	adds	r7, #12
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	200012f0 	.word	0x200012f0

0800ca38 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08a      	sub	sp, #40	; 0x28
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca40:	f107 0314 	add.w	r3, r7, #20
 800ca44:	2200      	movs	r2, #0
 800ca46:	601a      	str	r2, [r3, #0]
 800ca48:	605a      	str	r2, [r3, #4]
 800ca4a:	609a      	str	r2, [r3, #8]
 800ca4c:	60da      	str	r2, [r3, #12]
 800ca4e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a24      	ldr	r2, [pc, #144]	; (800cae8 <HAL_HCD_MspInit+0xb0>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d141      	bne.n	800cade <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	613b      	str	r3, [r7, #16]
 800ca5e:	4b23      	ldr	r3, [pc, #140]	; (800caec <HAL_HCD_MspInit+0xb4>)
 800ca60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca62:	4a22      	ldr	r2, [pc, #136]	; (800caec <HAL_HCD_MspInit+0xb4>)
 800ca64:	f043 0302 	orr.w	r3, r3, #2
 800ca68:	6313      	str	r3, [r2, #48]	; 0x30
 800ca6a:	4b20      	ldr	r3, [pc, #128]	; (800caec <HAL_HCD_MspInit+0xb4>)
 800ca6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca6e:	f003 0302 	and.w	r3, r3, #2
 800ca72:	613b      	str	r3, [r7, #16]
 800ca74:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800ca76:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800ca7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca7c:	2302      	movs	r3, #2
 800ca7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca80:	2300      	movs	r3, #0
 800ca82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca84:	2300      	movs	r3, #0
 800ca86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ca88:	230c      	movs	r3, #12
 800ca8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca8c:	f107 0314 	add.w	r3, r7, #20
 800ca90:	4619      	mov	r1, r3
 800ca92:	4817      	ldr	r0, [pc, #92]	; (800caf0 <HAL_HCD_MspInit+0xb8>)
 800ca94:	f7f7 fe18 	bl	80046c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800ca98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800caa2:	2300      	movs	r3, #0
 800caa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800caa6:	f107 0314 	add.w	r3, r7, #20
 800caaa:	4619      	mov	r1, r3
 800caac:	4810      	ldr	r0, [pc, #64]	; (800caf0 <HAL_HCD_MspInit+0xb8>)
 800caae:	f7f7 fe0b 	bl	80046c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cab2:	2300      	movs	r3, #0
 800cab4:	60fb      	str	r3, [r7, #12]
 800cab6:	4b0d      	ldr	r3, [pc, #52]	; (800caec <HAL_HCD_MspInit+0xb4>)
 800cab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caba:	4a0c      	ldr	r2, [pc, #48]	; (800caec <HAL_HCD_MspInit+0xb4>)
 800cabc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cac0:	6313      	str	r3, [r2, #48]	; 0x30
 800cac2:	4b0a      	ldr	r3, [pc, #40]	; (800caec <HAL_HCD_MspInit+0xb4>)
 800cac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800caca:	60fb      	str	r3, [r7, #12]
 800cacc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800cace:	2200      	movs	r2, #0
 800cad0:	2100      	movs	r1, #0
 800cad2:	204d      	movs	r0, #77	; 0x4d
 800cad4:	f7f7 f858 	bl	8003b88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cad8:	204d      	movs	r0, #77	; 0x4d
 800cada:	f7f7 f871 	bl	8003bc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cade:	bf00      	nop
 800cae0:	3728      	adds	r7, #40	; 0x28
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	40040000 	.word	0x40040000
 800caec:	40023800 	.word	0x40023800
 800caf0:	40020400 	.word	0x40020400

0800caf4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7fe fff1 	bl	800baea <USBH_LL_IncTimer>
}
 800cb08:	bf00      	nop
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7ff f829 	bl	800bb76 <USBH_LL_Connect>
}
 800cb24:	bf00      	nop
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7ff f832 	bl	800bba4 <USBH_LL_Disconnect>
}
 800cb40:	bf00      	nop
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	460b      	mov	r3, r1
 800cb52:	70fb      	strb	r3, [r7, #3]
 800cb54:	4613      	mov	r3, r2
 800cb56:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fe ffe3 	bl	800bb3e <USBH_LL_PortEnabled>
}
 800cb78:	bf00      	nop
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7fe ffe3 	bl	800bb5a <USBH_LL_PortDisabled>
}
 800cb94:	bf00      	nop
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d132      	bne.n	800cc14 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800cbae:	4a1c      	ldr	r2, [pc, #112]	; (800cc20 <USBH_LL_Init+0x84>)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a19      	ldr	r2, [pc, #100]	; (800cc20 <USBH_LL_Init+0x84>)
 800cbba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800cbbe:	4b18      	ldr	r3, [pc, #96]	; (800cc20 <USBH_LL_Init+0x84>)
 800cbc0:	4a18      	ldr	r2, [pc, #96]	; (800cc24 <USBH_LL_Init+0x88>)
 800cbc2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800cbc4:	4b16      	ldr	r3, [pc, #88]	; (800cc20 <USBH_LL_Init+0x84>)
 800cbc6:	220c      	movs	r2, #12
 800cbc8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800cbca:	4b15      	ldr	r3, [pc, #84]	; (800cc20 <USBH_LL_Init+0x84>)
 800cbcc:	2201      	movs	r2, #1
 800cbce:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800cbd0:	4b13      	ldr	r3, [pc, #76]	; (800cc20 <USBH_LL_Init+0x84>)
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800cbd6:	4b12      	ldr	r3, [pc, #72]	; (800cc20 <USBH_LL_Init+0x84>)
 800cbd8:	2202      	movs	r2, #2
 800cbda:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800cbdc:	4b10      	ldr	r3, [pc, #64]	; (800cc20 <USBH_LL_Init+0x84>)
 800cbde:	2200      	movs	r2, #0
 800cbe0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800cbe2:	4b0f      	ldr	r3, [pc, #60]	; (800cc20 <USBH_LL_Init+0x84>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800cbe8:	4b0d      	ldr	r3, [pc, #52]	; (800cc20 <USBH_LL_Init+0x84>)
 800cbea:	2200      	movs	r2, #0
 800cbec:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800cbee:	4b0c      	ldr	r3, [pc, #48]	; (800cc20 <USBH_LL_Init+0x84>)
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800cbf4:	480a      	ldr	r0, [pc, #40]	; (800cc20 <USBH_LL_Init+0x84>)
 800cbf6:	f7f8 f838 	bl	8004c6a <HAL_HCD_Init>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d001      	beq.n	800cc04 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800cc00:	f7f4 ffea 	bl	8001bd8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800cc04:	4806      	ldr	r0, [pc, #24]	; (800cc20 <USBH_LL_Init+0x84>)
 800cc06:	f7f8 fc1c 	bl	8005442 <HAL_HCD_GetCurrentFrame>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7fe ff5c 	bl	800bacc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cc14:	2300      	movs	r3, #0
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3708      	adds	r7, #8
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	200012f4 	.word	0x200012f4
 800cc24:	40040000 	.word	0x40040000

0800cc28 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc30:	2300      	movs	r3, #0
 800cc32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc34:	2300      	movs	r3, #0
 800cc36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7f8 fb89 	bl	8005356 <HAL_HCD_Start>
 800cc44:	4603      	mov	r3, r0
 800cc46:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc48:	7bfb      	ldrb	r3, [r7, #15]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f000 f95c 	bl	800cf08 <USBH_Get_USB_Status>
 800cc50:	4603      	mov	r3, r0
 800cc52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc54:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3710      	adds	r7, #16
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b084      	sub	sp, #16
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc66:	2300      	movs	r3, #0
 800cc68:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7f8 fb91 	bl	800539c <HAL_HCD_Stop>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc7e:	7bfb      	ldrb	r3, [r7, #15]
 800cc80:	4618      	mov	r0, r3
 800cc82:	f000 f941 	bl	800cf08 <USBH_Get_USB_Status>
 800cc86:	4603      	mov	r3, r0
 800cc88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7f8 fbd9 	bl	800545e <HAL_HCD_GetCurrentSpeed>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d00c      	beq.n	800cccc <USBH_LL_GetSpeed+0x38>
 800ccb2:	2b02      	cmp	r3, #2
 800ccb4:	d80d      	bhi.n	800ccd2 <USBH_LL_GetSpeed+0x3e>
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d002      	beq.n	800ccc0 <USBH_LL_GetSpeed+0x2c>
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d003      	beq.n	800ccc6 <USBH_LL_GetSpeed+0x32>
 800ccbe:	e008      	b.n	800ccd2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	73fb      	strb	r3, [r7, #15]
    break;
 800ccc4:	e008      	b.n	800ccd8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	73fb      	strb	r3, [r7, #15]
    break;
 800ccca:	e005      	b.n	800ccd8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cccc:	2302      	movs	r3, #2
 800ccce:	73fb      	strb	r3, [r7, #15]
    break;
 800ccd0:	e002      	b.n	800ccd8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	73fb      	strb	r3, [r7, #15]
    break;
 800ccd6:	bf00      	nop
  }
  return  speed;
 800ccd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b084      	sub	sp, #16
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccea:	2300      	movs	r3, #0
 800ccec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7f8 fb6c 	bl	80053d6 <HAL_HCD_ResetPort>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd02:	7bfb      	ldrb	r3, [r7, #15]
 800cd04:	4618      	mov	r0, r3
 800cd06:	f000 f8ff 	bl	800cf08 <USBH_Get_USB_Status>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	460b      	mov	r3, r1
 800cd22:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd2a:	78fa      	ldrb	r2, [r7, #3]
 800cd2c:	4611      	mov	r1, r2
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7f8 fb73 	bl	800541a <HAL_HCD_HC_GetXferCount>
 800cd34:	4603      	mov	r3, r0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cd3e:	b590      	push	{r4, r7, lr}
 800cd40:	b089      	sub	sp, #36	; 0x24
 800cd42:	af04      	add	r7, sp, #16
 800cd44:	6078      	str	r0, [r7, #4]
 800cd46:	4608      	mov	r0, r1
 800cd48:	4611      	mov	r1, r2
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	70fb      	strb	r3, [r7, #3]
 800cd50:	460b      	mov	r3, r1
 800cd52:	70bb      	strb	r3, [r7, #2]
 800cd54:	4613      	mov	r3, r2
 800cd56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cd66:	787c      	ldrb	r4, [r7, #1]
 800cd68:	78ba      	ldrb	r2, [r7, #2]
 800cd6a:	78f9      	ldrb	r1, [r7, #3]
 800cd6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cd6e:	9302      	str	r3, [sp, #8]
 800cd70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cd74:	9301      	str	r3, [sp, #4]
 800cd76:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd7a:	9300      	str	r3, [sp, #0]
 800cd7c:	4623      	mov	r3, r4
 800cd7e:	f7f7 ffd6 	bl	8004d2e <HAL_HCD_HC_Init>
 800cd82:	4603      	mov	r3, r0
 800cd84:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f000 f8bd 	bl	800cf08 <USBH_Get_USB_Status>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd92:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3714      	adds	r7, #20
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd90      	pop	{r4, r7, pc}

0800cd9c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	460b      	mov	r3, r1
 800cda6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdac:	2300      	movs	r3, #0
 800cdae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cdb6:	78fa      	ldrb	r2, [r7, #3]
 800cdb8:	4611      	mov	r1, r2
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7f8 f846 	bl	8004e4c <HAL_HCD_HC_Halt>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f000 f89e 	bl	800cf08 <USBH_Get_USB_Status>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cdda:	b590      	push	{r4, r7, lr}
 800cddc:	b089      	sub	sp, #36	; 0x24
 800cdde:	af04      	add	r7, sp, #16
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	4608      	mov	r0, r1
 800cde4:	4611      	mov	r1, r2
 800cde6:	461a      	mov	r2, r3
 800cde8:	4603      	mov	r3, r0
 800cdea:	70fb      	strb	r3, [r7, #3]
 800cdec:	460b      	mov	r3, r1
 800cdee:	70bb      	strb	r3, [r7, #2]
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ce02:	787c      	ldrb	r4, [r7, #1]
 800ce04:	78ba      	ldrb	r2, [r7, #2]
 800ce06:	78f9      	ldrb	r1, [r7, #3]
 800ce08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ce0c:	9303      	str	r3, [sp, #12]
 800ce0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ce10:	9302      	str	r3, [sp, #8]
 800ce12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce14:	9301      	str	r3, [sp, #4]
 800ce16:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce1a:	9300      	str	r3, [sp, #0]
 800ce1c:	4623      	mov	r3, r4
 800ce1e:	f7f8 f839 	bl	8004e94 <HAL_HCD_HC_SubmitRequest>
 800ce22:	4603      	mov	r3, r0
 800ce24:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ce26:	7bfb      	ldrb	r3, [r7, #15]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f000 f86d 	bl	800cf08 <USBH_Get_USB_Status>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce32:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3714      	adds	r7, #20
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd90      	pop	{r4, r7, pc}

0800ce3c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	460b      	mov	r3, r1
 800ce46:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce4e:	78fa      	ldrb	r2, [r7, #3]
 800ce50:	4611      	mov	r1, r2
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7f8 facd 	bl	80053f2 <HAL_HCD_HC_GetURBState>
 800ce58:	4603      	mov	r3, r0
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3708      	adds	r7, #8
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b082      	sub	sp, #8
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d103      	bne.n	800ce80 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800ce78:	78fb      	ldrb	r3, [r7, #3]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 f870 	bl	800cf60 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ce80:	20c8      	movs	r0, #200	; 0xc8
 800ce82:	f7f6 fda5 	bl	80039d0 <HAL_Delay>
  return USBH_OK;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	70fb      	strb	r3, [r7, #3]
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cea6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cea8:	78fb      	ldrb	r3, [r7, #3]
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	212c      	movs	r1, #44	; 0x2c
 800ceae:	fb01 f303 	mul.w	r3, r1, r3
 800ceb2:	4413      	add	r3, r2
 800ceb4:	333b      	adds	r3, #59	; 0x3b
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d009      	beq.n	800ced0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cebc:	78fb      	ldrb	r3, [r7, #3]
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	212c      	movs	r1, #44	; 0x2c
 800cec2:	fb01 f303 	mul.w	r3, r1, r3
 800cec6:	4413      	add	r3, r2
 800cec8:	3354      	adds	r3, #84	; 0x54
 800ceca:	78ba      	ldrb	r2, [r7, #2]
 800cecc:	701a      	strb	r2, [r3, #0]
 800cece:	e008      	b.n	800cee2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ced0:	78fb      	ldrb	r3, [r7, #3]
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	212c      	movs	r1, #44	; 0x2c
 800ced6:	fb01 f303 	mul.w	r3, r1, r3
 800ceda:	4413      	add	r3, r2
 800cedc:	3355      	adds	r3, #85	; 0x55
 800cede:	78ba      	ldrb	r2, [r7, #2]
 800cee0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3714      	adds	r7, #20
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7f6 fd69 	bl	80039d0 <HAL_Delay>
}
 800cefe:	bf00      	nop
 800cf00:	3708      	adds	r7, #8
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
	...

0800cf08 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	4603      	mov	r3, r0
 800cf10:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf12:	2300      	movs	r3, #0
 800cf14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf16:	79fb      	ldrb	r3, [r7, #7]
 800cf18:	2b03      	cmp	r3, #3
 800cf1a:	d817      	bhi.n	800cf4c <USBH_Get_USB_Status+0x44>
 800cf1c:	a201      	add	r2, pc, #4	; (adr r2, 800cf24 <USBH_Get_USB_Status+0x1c>)
 800cf1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf22:	bf00      	nop
 800cf24:	0800cf35 	.word	0x0800cf35
 800cf28:	0800cf3b 	.word	0x0800cf3b
 800cf2c:	0800cf41 	.word	0x0800cf41
 800cf30:	0800cf47 	.word	0x0800cf47
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cf34:	2300      	movs	r3, #0
 800cf36:	73fb      	strb	r3, [r7, #15]
    break;
 800cf38:	e00b      	b.n	800cf52 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cf3a:	2302      	movs	r3, #2
 800cf3c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf3e:	e008      	b.n	800cf52 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cf40:	2301      	movs	r3, #1
 800cf42:	73fb      	strb	r3, [r7, #15]
    break;
 800cf44:	e005      	b.n	800cf52 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cf46:	2302      	movs	r3, #2
 800cf48:	73fb      	strb	r3, [r7, #15]
    break;
 800cf4a:	e002      	b.n	800cf52 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf50:	bf00      	nop
  }
  return usb_status;
 800cf52:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3714      	adds	r7, #20
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	4603      	mov	r3, r0
 800cf68:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cf6a:	79fb      	ldrb	r3, [r7, #7]
 800cf6c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800cf6e:	79fb      	ldrb	r3, [r7, #7]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d102      	bne.n	800cf7a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800cf74:	2301      	movs	r3, #1
 800cf76:	73fb      	strb	r3, [r7, #15]
 800cf78:	e001      	b.n	800cf7e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800cf7e:	7bfb      	ldrb	r3, [r7, #15]
 800cf80:	461a      	mov	r2, r3
 800cf82:	2110      	movs	r1, #16
 800cf84:	4803      	ldr	r0, [pc, #12]	; (800cf94 <MX_DriverVbusHS+0x34>)
 800cf86:	f7f7 fe57 	bl	8004c38 <HAL_GPIO_WritePin>
}
 800cf8a:	bf00      	nop
 800cf8c:	3710      	adds	r7, #16
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	40020800 	.word	0x40020800

0800cf98 <__errno>:
 800cf98:	4b01      	ldr	r3, [pc, #4]	; (800cfa0 <__errno+0x8>)
 800cf9a:	6818      	ldr	r0, [r3, #0]
 800cf9c:	4770      	bx	lr
 800cf9e:	bf00      	nop
 800cfa0:	2000008c 	.word	0x2000008c

0800cfa4 <__libc_init_array>:
 800cfa4:	b570      	push	{r4, r5, r6, lr}
 800cfa6:	4d0d      	ldr	r5, [pc, #52]	; (800cfdc <__libc_init_array+0x38>)
 800cfa8:	4c0d      	ldr	r4, [pc, #52]	; (800cfe0 <__libc_init_array+0x3c>)
 800cfaa:	1b64      	subs	r4, r4, r5
 800cfac:	10a4      	asrs	r4, r4, #2
 800cfae:	2600      	movs	r6, #0
 800cfb0:	42a6      	cmp	r6, r4
 800cfb2:	d109      	bne.n	800cfc8 <__libc_init_array+0x24>
 800cfb4:	4d0b      	ldr	r5, [pc, #44]	; (800cfe4 <__libc_init_array+0x40>)
 800cfb6:	4c0c      	ldr	r4, [pc, #48]	; (800cfe8 <__libc_init_array+0x44>)
 800cfb8:	f000 fcd4 	bl	800d964 <_init>
 800cfbc:	1b64      	subs	r4, r4, r5
 800cfbe:	10a4      	asrs	r4, r4, #2
 800cfc0:	2600      	movs	r6, #0
 800cfc2:	42a6      	cmp	r6, r4
 800cfc4:	d105      	bne.n	800cfd2 <__libc_init_array+0x2e>
 800cfc6:	bd70      	pop	{r4, r5, r6, pc}
 800cfc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfcc:	4798      	blx	r3
 800cfce:	3601      	adds	r6, #1
 800cfd0:	e7ee      	b.n	800cfb0 <__libc_init_array+0xc>
 800cfd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfd6:	4798      	blx	r3
 800cfd8:	3601      	adds	r6, #1
 800cfda:	e7f2      	b.n	800cfc2 <__libc_init_array+0x1e>
 800cfdc:	08010664 	.word	0x08010664
 800cfe0:	08010664 	.word	0x08010664
 800cfe4:	08010664 	.word	0x08010664
 800cfe8:	08010668 	.word	0x08010668

0800cfec <malloc>:
 800cfec:	4b02      	ldr	r3, [pc, #8]	; (800cff8 <malloc+0xc>)
 800cfee:	4601      	mov	r1, r0
 800cff0:	6818      	ldr	r0, [r3, #0]
 800cff2:	f000 b89d 	b.w	800d130 <_malloc_r>
 800cff6:	bf00      	nop
 800cff8:	2000008c 	.word	0x2000008c

0800cffc <free>:
 800cffc:	4b02      	ldr	r3, [pc, #8]	; (800d008 <free+0xc>)
 800cffe:	4601      	mov	r1, r0
 800d000:	6818      	ldr	r0, [r3, #0]
 800d002:	f000 b829 	b.w	800d058 <_free_r>
 800d006:	bf00      	nop
 800d008:	2000008c 	.word	0x2000008c

0800d00c <memcmp>:
 800d00c:	b510      	push	{r4, lr}
 800d00e:	3901      	subs	r1, #1
 800d010:	4402      	add	r2, r0
 800d012:	4290      	cmp	r0, r2
 800d014:	d101      	bne.n	800d01a <memcmp+0xe>
 800d016:	2000      	movs	r0, #0
 800d018:	e005      	b.n	800d026 <memcmp+0x1a>
 800d01a:	7803      	ldrb	r3, [r0, #0]
 800d01c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d020:	42a3      	cmp	r3, r4
 800d022:	d001      	beq.n	800d028 <memcmp+0x1c>
 800d024:	1b18      	subs	r0, r3, r4
 800d026:	bd10      	pop	{r4, pc}
 800d028:	3001      	adds	r0, #1
 800d02a:	e7f2      	b.n	800d012 <memcmp+0x6>

0800d02c <memcpy>:
 800d02c:	440a      	add	r2, r1
 800d02e:	4291      	cmp	r1, r2
 800d030:	f100 33ff 	add.w	r3, r0, #4294967295
 800d034:	d100      	bne.n	800d038 <memcpy+0xc>
 800d036:	4770      	bx	lr
 800d038:	b510      	push	{r4, lr}
 800d03a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d03e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d042:	4291      	cmp	r1, r2
 800d044:	d1f9      	bne.n	800d03a <memcpy+0xe>
 800d046:	bd10      	pop	{r4, pc}

0800d048 <memset>:
 800d048:	4402      	add	r2, r0
 800d04a:	4603      	mov	r3, r0
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d100      	bne.n	800d052 <memset+0xa>
 800d050:	4770      	bx	lr
 800d052:	f803 1b01 	strb.w	r1, [r3], #1
 800d056:	e7f9      	b.n	800d04c <memset+0x4>

0800d058 <_free_r>:
 800d058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d05a:	2900      	cmp	r1, #0
 800d05c:	d044      	beq.n	800d0e8 <_free_r+0x90>
 800d05e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d062:	9001      	str	r0, [sp, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	f1a1 0404 	sub.w	r4, r1, #4
 800d06a:	bfb8      	it	lt
 800d06c:	18e4      	addlt	r4, r4, r3
 800d06e:	f000 f929 	bl	800d2c4 <__malloc_lock>
 800d072:	4a1e      	ldr	r2, [pc, #120]	; (800d0ec <_free_r+0x94>)
 800d074:	9801      	ldr	r0, [sp, #4]
 800d076:	6813      	ldr	r3, [r2, #0]
 800d078:	b933      	cbnz	r3, 800d088 <_free_r+0x30>
 800d07a:	6063      	str	r3, [r4, #4]
 800d07c:	6014      	str	r4, [r2, #0]
 800d07e:	b003      	add	sp, #12
 800d080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d084:	f000 b924 	b.w	800d2d0 <__malloc_unlock>
 800d088:	42a3      	cmp	r3, r4
 800d08a:	d908      	bls.n	800d09e <_free_r+0x46>
 800d08c:	6825      	ldr	r5, [r4, #0]
 800d08e:	1961      	adds	r1, r4, r5
 800d090:	428b      	cmp	r3, r1
 800d092:	bf01      	itttt	eq
 800d094:	6819      	ldreq	r1, [r3, #0]
 800d096:	685b      	ldreq	r3, [r3, #4]
 800d098:	1949      	addeq	r1, r1, r5
 800d09a:	6021      	streq	r1, [r4, #0]
 800d09c:	e7ed      	b.n	800d07a <_free_r+0x22>
 800d09e:	461a      	mov	r2, r3
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	b10b      	cbz	r3, 800d0a8 <_free_r+0x50>
 800d0a4:	42a3      	cmp	r3, r4
 800d0a6:	d9fa      	bls.n	800d09e <_free_r+0x46>
 800d0a8:	6811      	ldr	r1, [r2, #0]
 800d0aa:	1855      	adds	r5, r2, r1
 800d0ac:	42a5      	cmp	r5, r4
 800d0ae:	d10b      	bne.n	800d0c8 <_free_r+0x70>
 800d0b0:	6824      	ldr	r4, [r4, #0]
 800d0b2:	4421      	add	r1, r4
 800d0b4:	1854      	adds	r4, r2, r1
 800d0b6:	42a3      	cmp	r3, r4
 800d0b8:	6011      	str	r1, [r2, #0]
 800d0ba:	d1e0      	bne.n	800d07e <_free_r+0x26>
 800d0bc:	681c      	ldr	r4, [r3, #0]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	6053      	str	r3, [r2, #4]
 800d0c2:	4421      	add	r1, r4
 800d0c4:	6011      	str	r1, [r2, #0]
 800d0c6:	e7da      	b.n	800d07e <_free_r+0x26>
 800d0c8:	d902      	bls.n	800d0d0 <_free_r+0x78>
 800d0ca:	230c      	movs	r3, #12
 800d0cc:	6003      	str	r3, [r0, #0]
 800d0ce:	e7d6      	b.n	800d07e <_free_r+0x26>
 800d0d0:	6825      	ldr	r5, [r4, #0]
 800d0d2:	1961      	adds	r1, r4, r5
 800d0d4:	428b      	cmp	r3, r1
 800d0d6:	bf04      	itt	eq
 800d0d8:	6819      	ldreq	r1, [r3, #0]
 800d0da:	685b      	ldreq	r3, [r3, #4]
 800d0dc:	6063      	str	r3, [r4, #4]
 800d0de:	bf04      	itt	eq
 800d0e0:	1949      	addeq	r1, r1, r5
 800d0e2:	6021      	streq	r1, [r4, #0]
 800d0e4:	6054      	str	r4, [r2, #4]
 800d0e6:	e7ca      	b.n	800d07e <_free_r+0x26>
 800d0e8:	b003      	add	sp, #12
 800d0ea:	bd30      	pop	{r4, r5, pc}
 800d0ec:	200015f8 	.word	0x200015f8

0800d0f0 <sbrk_aligned>:
 800d0f0:	b570      	push	{r4, r5, r6, lr}
 800d0f2:	4e0e      	ldr	r6, [pc, #56]	; (800d12c <sbrk_aligned+0x3c>)
 800d0f4:	460c      	mov	r4, r1
 800d0f6:	6831      	ldr	r1, [r6, #0]
 800d0f8:	4605      	mov	r5, r0
 800d0fa:	b911      	cbnz	r1, 800d102 <sbrk_aligned+0x12>
 800d0fc:	f000 f88c 	bl	800d218 <_sbrk_r>
 800d100:	6030      	str	r0, [r6, #0]
 800d102:	4621      	mov	r1, r4
 800d104:	4628      	mov	r0, r5
 800d106:	f000 f887 	bl	800d218 <_sbrk_r>
 800d10a:	1c43      	adds	r3, r0, #1
 800d10c:	d00a      	beq.n	800d124 <sbrk_aligned+0x34>
 800d10e:	1cc4      	adds	r4, r0, #3
 800d110:	f024 0403 	bic.w	r4, r4, #3
 800d114:	42a0      	cmp	r0, r4
 800d116:	d007      	beq.n	800d128 <sbrk_aligned+0x38>
 800d118:	1a21      	subs	r1, r4, r0
 800d11a:	4628      	mov	r0, r5
 800d11c:	f000 f87c 	bl	800d218 <_sbrk_r>
 800d120:	3001      	adds	r0, #1
 800d122:	d101      	bne.n	800d128 <sbrk_aligned+0x38>
 800d124:	f04f 34ff 	mov.w	r4, #4294967295
 800d128:	4620      	mov	r0, r4
 800d12a:	bd70      	pop	{r4, r5, r6, pc}
 800d12c:	200015fc 	.word	0x200015fc

0800d130 <_malloc_r>:
 800d130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d134:	1ccd      	adds	r5, r1, #3
 800d136:	f025 0503 	bic.w	r5, r5, #3
 800d13a:	3508      	adds	r5, #8
 800d13c:	2d0c      	cmp	r5, #12
 800d13e:	bf38      	it	cc
 800d140:	250c      	movcc	r5, #12
 800d142:	2d00      	cmp	r5, #0
 800d144:	4607      	mov	r7, r0
 800d146:	db01      	blt.n	800d14c <_malloc_r+0x1c>
 800d148:	42a9      	cmp	r1, r5
 800d14a:	d905      	bls.n	800d158 <_malloc_r+0x28>
 800d14c:	230c      	movs	r3, #12
 800d14e:	603b      	str	r3, [r7, #0]
 800d150:	2600      	movs	r6, #0
 800d152:	4630      	mov	r0, r6
 800d154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d158:	4e2e      	ldr	r6, [pc, #184]	; (800d214 <_malloc_r+0xe4>)
 800d15a:	f000 f8b3 	bl	800d2c4 <__malloc_lock>
 800d15e:	6833      	ldr	r3, [r6, #0]
 800d160:	461c      	mov	r4, r3
 800d162:	bb34      	cbnz	r4, 800d1b2 <_malloc_r+0x82>
 800d164:	4629      	mov	r1, r5
 800d166:	4638      	mov	r0, r7
 800d168:	f7ff ffc2 	bl	800d0f0 <sbrk_aligned>
 800d16c:	1c43      	adds	r3, r0, #1
 800d16e:	4604      	mov	r4, r0
 800d170:	d14d      	bne.n	800d20e <_malloc_r+0xde>
 800d172:	6834      	ldr	r4, [r6, #0]
 800d174:	4626      	mov	r6, r4
 800d176:	2e00      	cmp	r6, #0
 800d178:	d140      	bne.n	800d1fc <_malloc_r+0xcc>
 800d17a:	6823      	ldr	r3, [r4, #0]
 800d17c:	4631      	mov	r1, r6
 800d17e:	4638      	mov	r0, r7
 800d180:	eb04 0803 	add.w	r8, r4, r3
 800d184:	f000 f848 	bl	800d218 <_sbrk_r>
 800d188:	4580      	cmp	r8, r0
 800d18a:	d13a      	bne.n	800d202 <_malloc_r+0xd2>
 800d18c:	6821      	ldr	r1, [r4, #0]
 800d18e:	3503      	adds	r5, #3
 800d190:	1a6d      	subs	r5, r5, r1
 800d192:	f025 0503 	bic.w	r5, r5, #3
 800d196:	3508      	adds	r5, #8
 800d198:	2d0c      	cmp	r5, #12
 800d19a:	bf38      	it	cc
 800d19c:	250c      	movcc	r5, #12
 800d19e:	4629      	mov	r1, r5
 800d1a0:	4638      	mov	r0, r7
 800d1a2:	f7ff ffa5 	bl	800d0f0 <sbrk_aligned>
 800d1a6:	3001      	adds	r0, #1
 800d1a8:	d02b      	beq.n	800d202 <_malloc_r+0xd2>
 800d1aa:	6823      	ldr	r3, [r4, #0]
 800d1ac:	442b      	add	r3, r5
 800d1ae:	6023      	str	r3, [r4, #0]
 800d1b0:	e00e      	b.n	800d1d0 <_malloc_r+0xa0>
 800d1b2:	6822      	ldr	r2, [r4, #0]
 800d1b4:	1b52      	subs	r2, r2, r5
 800d1b6:	d41e      	bmi.n	800d1f6 <_malloc_r+0xc6>
 800d1b8:	2a0b      	cmp	r2, #11
 800d1ba:	d916      	bls.n	800d1ea <_malloc_r+0xba>
 800d1bc:	1961      	adds	r1, r4, r5
 800d1be:	42a3      	cmp	r3, r4
 800d1c0:	6025      	str	r5, [r4, #0]
 800d1c2:	bf18      	it	ne
 800d1c4:	6059      	strne	r1, [r3, #4]
 800d1c6:	6863      	ldr	r3, [r4, #4]
 800d1c8:	bf08      	it	eq
 800d1ca:	6031      	streq	r1, [r6, #0]
 800d1cc:	5162      	str	r2, [r4, r5]
 800d1ce:	604b      	str	r3, [r1, #4]
 800d1d0:	4638      	mov	r0, r7
 800d1d2:	f104 060b 	add.w	r6, r4, #11
 800d1d6:	f000 f87b 	bl	800d2d0 <__malloc_unlock>
 800d1da:	f026 0607 	bic.w	r6, r6, #7
 800d1de:	1d23      	adds	r3, r4, #4
 800d1e0:	1af2      	subs	r2, r6, r3
 800d1e2:	d0b6      	beq.n	800d152 <_malloc_r+0x22>
 800d1e4:	1b9b      	subs	r3, r3, r6
 800d1e6:	50a3      	str	r3, [r4, r2]
 800d1e8:	e7b3      	b.n	800d152 <_malloc_r+0x22>
 800d1ea:	6862      	ldr	r2, [r4, #4]
 800d1ec:	42a3      	cmp	r3, r4
 800d1ee:	bf0c      	ite	eq
 800d1f0:	6032      	streq	r2, [r6, #0]
 800d1f2:	605a      	strne	r2, [r3, #4]
 800d1f4:	e7ec      	b.n	800d1d0 <_malloc_r+0xa0>
 800d1f6:	4623      	mov	r3, r4
 800d1f8:	6864      	ldr	r4, [r4, #4]
 800d1fa:	e7b2      	b.n	800d162 <_malloc_r+0x32>
 800d1fc:	4634      	mov	r4, r6
 800d1fe:	6876      	ldr	r6, [r6, #4]
 800d200:	e7b9      	b.n	800d176 <_malloc_r+0x46>
 800d202:	230c      	movs	r3, #12
 800d204:	603b      	str	r3, [r7, #0]
 800d206:	4638      	mov	r0, r7
 800d208:	f000 f862 	bl	800d2d0 <__malloc_unlock>
 800d20c:	e7a1      	b.n	800d152 <_malloc_r+0x22>
 800d20e:	6025      	str	r5, [r4, #0]
 800d210:	e7de      	b.n	800d1d0 <_malloc_r+0xa0>
 800d212:	bf00      	nop
 800d214:	200015f8 	.word	0x200015f8

0800d218 <_sbrk_r>:
 800d218:	b538      	push	{r3, r4, r5, lr}
 800d21a:	4d06      	ldr	r5, [pc, #24]	; (800d234 <_sbrk_r+0x1c>)
 800d21c:	2300      	movs	r3, #0
 800d21e:	4604      	mov	r4, r0
 800d220:	4608      	mov	r0, r1
 800d222:	602b      	str	r3, [r5, #0]
 800d224:	f7f5 f9a2 	bl	800256c <_sbrk>
 800d228:	1c43      	adds	r3, r0, #1
 800d22a:	d102      	bne.n	800d232 <_sbrk_r+0x1a>
 800d22c:	682b      	ldr	r3, [r5, #0]
 800d22e:	b103      	cbz	r3, 800d232 <_sbrk_r+0x1a>
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	bd38      	pop	{r3, r4, r5, pc}
 800d234:	20001600 	.word	0x20001600

0800d238 <siprintf>:
 800d238:	b40e      	push	{r1, r2, r3}
 800d23a:	b500      	push	{lr}
 800d23c:	b09c      	sub	sp, #112	; 0x70
 800d23e:	ab1d      	add	r3, sp, #116	; 0x74
 800d240:	9002      	str	r0, [sp, #8]
 800d242:	9006      	str	r0, [sp, #24]
 800d244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d248:	4809      	ldr	r0, [pc, #36]	; (800d270 <siprintf+0x38>)
 800d24a:	9107      	str	r1, [sp, #28]
 800d24c:	9104      	str	r1, [sp, #16]
 800d24e:	4909      	ldr	r1, [pc, #36]	; (800d274 <siprintf+0x3c>)
 800d250:	f853 2b04 	ldr.w	r2, [r3], #4
 800d254:	9105      	str	r1, [sp, #20]
 800d256:	6800      	ldr	r0, [r0, #0]
 800d258:	9301      	str	r3, [sp, #4]
 800d25a:	a902      	add	r1, sp, #8
 800d25c:	f000 f89a 	bl	800d394 <_svfiprintf_r>
 800d260:	9b02      	ldr	r3, [sp, #8]
 800d262:	2200      	movs	r2, #0
 800d264:	701a      	strb	r2, [r3, #0]
 800d266:	b01c      	add	sp, #112	; 0x70
 800d268:	f85d eb04 	ldr.w	lr, [sp], #4
 800d26c:	b003      	add	sp, #12
 800d26e:	4770      	bx	lr
 800d270:	2000008c 	.word	0x2000008c
 800d274:	ffff0208 	.word	0xffff0208

0800d278 <strcat>:
 800d278:	b510      	push	{r4, lr}
 800d27a:	4602      	mov	r2, r0
 800d27c:	7814      	ldrb	r4, [r2, #0]
 800d27e:	4613      	mov	r3, r2
 800d280:	3201      	adds	r2, #1
 800d282:	2c00      	cmp	r4, #0
 800d284:	d1fa      	bne.n	800d27c <strcat+0x4>
 800d286:	3b01      	subs	r3, #1
 800d288:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d28c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d290:	2a00      	cmp	r2, #0
 800d292:	d1f9      	bne.n	800d288 <strcat+0x10>
 800d294:	bd10      	pop	{r4, pc}

0800d296 <strstr>:
 800d296:	780a      	ldrb	r2, [r1, #0]
 800d298:	b570      	push	{r4, r5, r6, lr}
 800d29a:	b96a      	cbnz	r2, 800d2b8 <strstr+0x22>
 800d29c:	bd70      	pop	{r4, r5, r6, pc}
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d109      	bne.n	800d2b6 <strstr+0x20>
 800d2a2:	460c      	mov	r4, r1
 800d2a4:	4605      	mov	r5, r0
 800d2a6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d0f6      	beq.n	800d29c <strstr+0x6>
 800d2ae:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d2b2:	429e      	cmp	r6, r3
 800d2b4:	d0f7      	beq.n	800d2a6 <strstr+0x10>
 800d2b6:	3001      	adds	r0, #1
 800d2b8:	7803      	ldrb	r3, [r0, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1ef      	bne.n	800d29e <strstr+0x8>
 800d2be:	4618      	mov	r0, r3
 800d2c0:	e7ec      	b.n	800d29c <strstr+0x6>
	...

0800d2c4 <__malloc_lock>:
 800d2c4:	4801      	ldr	r0, [pc, #4]	; (800d2cc <__malloc_lock+0x8>)
 800d2c6:	f000 baf9 	b.w	800d8bc <__retarget_lock_acquire_recursive>
 800d2ca:	bf00      	nop
 800d2cc:	20001604 	.word	0x20001604

0800d2d0 <__malloc_unlock>:
 800d2d0:	4801      	ldr	r0, [pc, #4]	; (800d2d8 <__malloc_unlock+0x8>)
 800d2d2:	f000 baf4 	b.w	800d8be <__retarget_lock_release_recursive>
 800d2d6:	bf00      	nop
 800d2d8:	20001604 	.word	0x20001604

0800d2dc <__ssputs_r>:
 800d2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2e0:	688e      	ldr	r6, [r1, #8]
 800d2e2:	429e      	cmp	r6, r3
 800d2e4:	4682      	mov	sl, r0
 800d2e6:	460c      	mov	r4, r1
 800d2e8:	4690      	mov	r8, r2
 800d2ea:	461f      	mov	r7, r3
 800d2ec:	d838      	bhi.n	800d360 <__ssputs_r+0x84>
 800d2ee:	898a      	ldrh	r2, [r1, #12]
 800d2f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2f4:	d032      	beq.n	800d35c <__ssputs_r+0x80>
 800d2f6:	6825      	ldr	r5, [r4, #0]
 800d2f8:	6909      	ldr	r1, [r1, #16]
 800d2fa:	eba5 0901 	sub.w	r9, r5, r1
 800d2fe:	6965      	ldr	r5, [r4, #20]
 800d300:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d304:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d308:	3301      	adds	r3, #1
 800d30a:	444b      	add	r3, r9
 800d30c:	106d      	asrs	r5, r5, #1
 800d30e:	429d      	cmp	r5, r3
 800d310:	bf38      	it	cc
 800d312:	461d      	movcc	r5, r3
 800d314:	0553      	lsls	r3, r2, #21
 800d316:	d531      	bpl.n	800d37c <__ssputs_r+0xa0>
 800d318:	4629      	mov	r1, r5
 800d31a:	f7ff ff09 	bl	800d130 <_malloc_r>
 800d31e:	4606      	mov	r6, r0
 800d320:	b950      	cbnz	r0, 800d338 <__ssputs_r+0x5c>
 800d322:	230c      	movs	r3, #12
 800d324:	f8ca 3000 	str.w	r3, [sl]
 800d328:	89a3      	ldrh	r3, [r4, #12]
 800d32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d32e:	81a3      	strh	r3, [r4, #12]
 800d330:	f04f 30ff 	mov.w	r0, #4294967295
 800d334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d338:	6921      	ldr	r1, [r4, #16]
 800d33a:	464a      	mov	r2, r9
 800d33c:	f7ff fe76 	bl	800d02c <memcpy>
 800d340:	89a3      	ldrh	r3, [r4, #12]
 800d342:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d34a:	81a3      	strh	r3, [r4, #12]
 800d34c:	6126      	str	r6, [r4, #16]
 800d34e:	6165      	str	r5, [r4, #20]
 800d350:	444e      	add	r6, r9
 800d352:	eba5 0509 	sub.w	r5, r5, r9
 800d356:	6026      	str	r6, [r4, #0]
 800d358:	60a5      	str	r5, [r4, #8]
 800d35a:	463e      	mov	r6, r7
 800d35c:	42be      	cmp	r6, r7
 800d35e:	d900      	bls.n	800d362 <__ssputs_r+0x86>
 800d360:	463e      	mov	r6, r7
 800d362:	6820      	ldr	r0, [r4, #0]
 800d364:	4632      	mov	r2, r6
 800d366:	4641      	mov	r1, r8
 800d368:	f000 faaa 	bl	800d8c0 <memmove>
 800d36c:	68a3      	ldr	r3, [r4, #8]
 800d36e:	1b9b      	subs	r3, r3, r6
 800d370:	60a3      	str	r3, [r4, #8]
 800d372:	6823      	ldr	r3, [r4, #0]
 800d374:	4433      	add	r3, r6
 800d376:	6023      	str	r3, [r4, #0]
 800d378:	2000      	movs	r0, #0
 800d37a:	e7db      	b.n	800d334 <__ssputs_r+0x58>
 800d37c:	462a      	mov	r2, r5
 800d37e:	f000 fab9 	bl	800d8f4 <_realloc_r>
 800d382:	4606      	mov	r6, r0
 800d384:	2800      	cmp	r0, #0
 800d386:	d1e1      	bne.n	800d34c <__ssputs_r+0x70>
 800d388:	6921      	ldr	r1, [r4, #16]
 800d38a:	4650      	mov	r0, sl
 800d38c:	f7ff fe64 	bl	800d058 <_free_r>
 800d390:	e7c7      	b.n	800d322 <__ssputs_r+0x46>
	...

0800d394 <_svfiprintf_r>:
 800d394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d398:	4698      	mov	r8, r3
 800d39a:	898b      	ldrh	r3, [r1, #12]
 800d39c:	061b      	lsls	r3, r3, #24
 800d39e:	b09d      	sub	sp, #116	; 0x74
 800d3a0:	4607      	mov	r7, r0
 800d3a2:	460d      	mov	r5, r1
 800d3a4:	4614      	mov	r4, r2
 800d3a6:	d50e      	bpl.n	800d3c6 <_svfiprintf_r+0x32>
 800d3a8:	690b      	ldr	r3, [r1, #16]
 800d3aa:	b963      	cbnz	r3, 800d3c6 <_svfiprintf_r+0x32>
 800d3ac:	2140      	movs	r1, #64	; 0x40
 800d3ae:	f7ff febf 	bl	800d130 <_malloc_r>
 800d3b2:	6028      	str	r0, [r5, #0]
 800d3b4:	6128      	str	r0, [r5, #16]
 800d3b6:	b920      	cbnz	r0, 800d3c2 <_svfiprintf_r+0x2e>
 800d3b8:	230c      	movs	r3, #12
 800d3ba:	603b      	str	r3, [r7, #0]
 800d3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c0:	e0d1      	b.n	800d566 <_svfiprintf_r+0x1d2>
 800d3c2:	2340      	movs	r3, #64	; 0x40
 800d3c4:	616b      	str	r3, [r5, #20]
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d3ca:	2320      	movs	r3, #32
 800d3cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3d4:	2330      	movs	r3, #48	; 0x30
 800d3d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d580 <_svfiprintf_r+0x1ec>
 800d3da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3de:	f04f 0901 	mov.w	r9, #1
 800d3e2:	4623      	mov	r3, r4
 800d3e4:	469a      	mov	sl, r3
 800d3e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3ea:	b10a      	cbz	r2, 800d3f0 <_svfiprintf_r+0x5c>
 800d3ec:	2a25      	cmp	r2, #37	; 0x25
 800d3ee:	d1f9      	bne.n	800d3e4 <_svfiprintf_r+0x50>
 800d3f0:	ebba 0b04 	subs.w	fp, sl, r4
 800d3f4:	d00b      	beq.n	800d40e <_svfiprintf_r+0x7a>
 800d3f6:	465b      	mov	r3, fp
 800d3f8:	4622      	mov	r2, r4
 800d3fa:	4629      	mov	r1, r5
 800d3fc:	4638      	mov	r0, r7
 800d3fe:	f7ff ff6d 	bl	800d2dc <__ssputs_r>
 800d402:	3001      	adds	r0, #1
 800d404:	f000 80aa 	beq.w	800d55c <_svfiprintf_r+0x1c8>
 800d408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d40a:	445a      	add	r2, fp
 800d40c:	9209      	str	r2, [sp, #36]	; 0x24
 800d40e:	f89a 3000 	ldrb.w	r3, [sl]
 800d412:	2b00      	cmp	r3, #0
 800d414:	f000 80a2 	beq.w	800d55c <_svfiprintf_r+0x1c8>
 800d418:	2300      	movs	r3, #0
 800d41a:	f04f 32ff 	mov.w	r2, #4294967295
 800d41e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d422:	f10a 0a01 	add.w	sl, sl, #1
 800d426:	9304      	str	r3, [sp, #16]
 800d428:	9307      	str	r3, [sp, #28]
 800d42a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d42e:	931a      	str	r3, [sp, #104]	; 0x68
 800d430:	4654      	mov	r4, sl
 800d432:	2205      	movs	r2, #5
 800d434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d438:	4851      	ldr	r0, [pc, #324]	; (800d580 <_svfiprintf_r+0x1ec>)
 800d43a:	f7f2 fef1 	bl	8000220 <memchr>
 800d43e:	9a04      	ldr	r2, [sp, #16]
 800d440:	b9d8      	cbnz	r0, 800d47a <_svfiprintf_r+0xe6>
 800d442:	06d0      	lsls	r0, r2, #27
 800d444:	bf44      	itt	mi
 800d446:	2320      	movmi	r3, #32
 800d448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d44c:	0711      	lsls	r1, r2, #28
 800d44e:	bf44      	itt	mi
 800d450:	232b      	movmi	r3, #43	; 0x2b
 800d452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d456:	f89a 3000 	ldrb.w	r3, [sl]
 800d45a:	2b2a      	cmp	r3, #42	; 0x2a
 800d45c:	d015      	beq.n	800d48a <_svfiprintf_r+0xf6>
 800d45e:	9a07      	ldr	r2, [sp, #28]
 800d460:	4654      	mov	r4, sl
 800d462:	2000      	movs	r0, #0
 800d464:	f04f 0c0a 	mov.w	ip, #10
 800d468:	4621      	mov	r1, r4
 800d46a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d46e:	3b30      	subs	r3, #48	; 0x30
 800d470:	2b09      	cmp	r3, #9
 800d472:	d94e      	bls.n	800d512 <_svfiprintf_r+0x17e>
 800d474:	b1b0      	cbz	r0, 800d4a4 <_svfiprintf_r+0x110>
 800d476:	9207      	str	r2, [sp, #28]
 800d478:	e014      	b.n	800d4a4 <_svfiprintf_r+0x110>
 800d47a:	eba0 0308 	sub.w	r3, r0, r8
 800d47e:	fa09 f303 	lsl.w	r3, r9, r3
 800d482:	4313      	orrs	r3, r2
 800d484:	9304      	str	r3, [sp, #16]
 800d486:	46a2      	mov	sl, r4
 800d488:	e7d2      	b.n	800d430 <_svfiprintf_r+0x9c>
 800d48a:	9b03      	ldr	r3, [sp, #12]
 800d48c:	1d19      	adds	r1, r3, #4
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	9103      	str	r1, [sp, #12]
 800d492:	2b00      	cmp	r3, #0
 800d494:	bfbb      	ittet	lt
 800d496:	425b      	neglt	r3, r3
 800d498:	f042 0202 	orrlt.w	r2, r2, #2
 800d49c:	9307      	strge	r3, [sp, #28]
 800d49e:	9307      	strlt	r3, [sp, #28]
 800d4a0:	bfb8      	it	lt
 800d4a2:	9204      	strlt	r2, [sp, #16]
 800d4a4:	7823      	ldrb	r3, [r4, #0]
 800d4a6:	2b2e      	cmp	r3, #46	; 0x2e
 800d4a8:	d10c      	bne.n	800d4c4 <_svfiprintf_r+0x130>
 800d4aa:	7863      	ldrb	r3, [r4, #1]
 800d4ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d4ae:	d135      	bne.n	800d51c <_svfiprintf_r+0x188>
 800d4b0:	9b03      	ldr	r3, [sp, #12]
 800d4b2:	1d1a      	adds	r2, r3, #4
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	9203      	str	r2, [sp, #12]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	bfb8      	it	lt
 800d4bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4c0:	3402      	adds	r4, #2
 800d4c2:	9305      	str	r3, [sp, #20]
 800d4c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d590 <_svfiprintf_r+0x1fc>
 800d4c8:	7821      	ldrb	r1, [r4, #0]
 800d4ca:	2203      	movs	r2, #3
 800d4cc:	4650      	mov	r0, sl
 800d4ce:	f7f2 fea7 	bl	8000220 <memchr>
 800d4d2:	b140      	cbz	r0, 800d4e6 <_svfiprintf_r+0x152>
 800d4d4:	2340      	movs	r3, #64	; 0x40
 800d4d6:	eba0 000a 	sub.w	r0, r0, sl
 800d4da:	fa03 f000 	lsl.w	r0, r3, r0
 800d4de:	9b04      	ldr	r3, [sp, #16]
 800d4e0:	4303      	orrs	r3, r0
 800d4e2:	3401      	adds	r4, #1
 800d4e4:	9304      	str	r3, [sp, #16]
 800d4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ea:	4826      	ldr	r0, [pc, #152]	; (800d584 <_svfiprintf_r+0x1f0>)
 800d4ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4f0:	2206      	movs	r2, #6
 800d4f2:	f7f2 fe95 	bl	8000220 <memchr>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d038      	beq.n	800d56c <_svfiprintf_r+0x1d8>
 800d4fa:	4b23      	ldr	r3, [pc, #140]	; (800d588 <_svfiprintf_r+0x1f4>)
 800d4fc:	bb1b      	cbnz	r3, 800d546 <_svfiprintf_r+0x1b2>
 800d4fe:	9b03      	ldr	r3, [sp, #12]
 800d500:	3307      	adds	r3, #7
 800d502:	f023 0307 	bic.w	r3, r3, #7
 800d506:	3308      	adds	r3, #8
 800d508:	9303      	str	r3, [sp, #12]
 800d50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d50c:	4433      	add	r3, r6
 800d50e:	9309      	str	r3, [sp, #36]	; 0x24
 800d510:	e767      	b.n	800d3e2 <_svfiprintf_r+0x4e>
 800d512:	fb0c 3202 	mla	r2, ip, r2, r3
 800d516:	460c      	mov	r4, r1
 800d518:	2001      	movs	r0, #1
 800d51a:	e7a5      	b.n	800d468 <_svfiprintf_r+0xd4>
 800d51c:	2300      	movs	r3, #0
 800d51e:	3401      	adds	r4, #1
 800d520:	9305      	str	r3, [sp, #20]
 800d522:	4619      	mov	r1, r3
 800d524:	f04f 0c0a 	mov.w	ip, #10
 800d528:	4620      	mov	r0, r4
 800d52a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d52e:	3a30      	subs	r2, #48	; 0x30
 800d530:	2a09      	cmp	r2, #9
 800d532:	d903      	bls.n	800d53c <_svfiprintf_r+0x1a8>
 800d534:	2b00      	cmp	r3, #0
 800d536:	d0c5      	beq.n	800d4c4 <_svfiprintf_r+0x130>
 800d538:	9105      	str	r1, [sp, #20]
 800d53a:	e7c3      	b.n	800d4c4 <_svfiprintf_r+0x130>
 800d53c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d540:	4604      	mov	r4, r0
 800d542:	2301      	movs	r3, #1
 800d544:	e7f0      	b.n	800d528 <_svfiprintf_r+0x194>
 800d546:	ab03      	add	r3, sp, #12
 800d548:	9300      	str	r3, [sp, #0]
 800d54a:	462a      	mov	r2, r5
 800d54c:	4b0f      	ldr	r3, [pc, #60]	; (800d58c <_svfiprintf_r+0x1f8>)
 800d54e:	a904      	add	r1, sp, #16
 800d550:	4638      	mov	r0, r7
 800d552:	f3af 8000 	nop.w
 800d556:	1c42      	adds	r2, r0, #1
 800d558:	4606      	mov	r6, r0
 800d55a:	d1d6      	bne.n	800d50a <_svfiprintf_r+0x176>
 800d55c:	89ab      	ldrh	r3, [r5, #12]
 800d55e:	065b      	lsls	r3, r3, #25
 800d560:	f53f af2c 	bmi.w	800d3bc <_svfiprintf_r+0x28>
 800d564:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d566:	b01d      	add	sp, #116	; 0x74
 800d568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d56c:	ab03      	add	r3, sp, #12
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	462a      	mov	r2, r5
 800d572:	4b06      	ldr	r3, [pc, #24]	; (800d58c <_svfiprintf_r+0x1f8>)
 800d574:	a904      	add	r1, sp, #16
 800d576:	4638      	mov	r0, r7
 800d578:	f000 f87a 	bl	800d670 <_printf_i>
 800d57c:	e7eb      	b.n	800d556 <_svfiprintf_r+0x1c2>
 800d57e:	bf00      	nop
 800d580:	08010628 	.word	0x08010628
 800d584:	08010632 	.word	0x08010632
 800d588:	00000000 	.word	0x00000000
 800d58c:	0800d2dd 	.word	0x0800d2dd
 800d590:	0801062e 	.word	0x0801062e

0800d594 <_printf_common>:
 800d594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d598:	4616      	mov	r6, r2
 800d59a:	4699      	mov	r9, r3
 800d59c:	688a      	ldr	r2, [r1, #8]
 800d59e:	690b      	ldr	r3, [r1, #16]
 800d5a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	bfb8      	it	lt
 800d5a8:	4613      	movlt	r3, r2
 800d5aa:	6033      	str	r3, [r6, #0]
 800d5ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d5b0:	4607      	mov	r7, r0
 800d5b2:	460c      	mov	r4, r1
 800d5b4:	b10a      	cbz	r2, 800d5ba <_printf_common+0x26>
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	6033      	str	r3, [r6, #0]
 800d5ba:	6823      	ldr	r3, [r4, #0]
 800d5bc:	0699      	lsls	r1, r3, #26
 800d5be:	bf42      	ittt	mi
 800d5c0:	6833      	ldrmi	r3, [r6, #0]
 800d5c2:	3302      	addmi	r3, #2
 800d5c4:	6033      	strmi	r3, [r6, #0]
 800d5c6:	6825      	ldr	r5, [r4, #0]
 800d5c8:	f015 0506 	ands.w	r5, r5, #6
 800d5cc:	d106      	bne.n	800d5dc <_printf_common+0x48>
 800d5ce:	f104 0a19 	add.w	sl, r4, #25
 800d5d2:	68e3      	ldr	r3, [r4, #12]
 800d5d4:	6832      	ldr	r2, [r6, #0]
 800d5d6:	1a9b      	subs	r3, r3, r2
 800d5d8:	42ab      	cmp	r3, r5
 800d5da:	dc26      	bgt.n	800d62a <_printf_common+0x96>
 800d5dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d5e0:	1e13      	subs	r3, r2, #0
 800d5e2:	6822      	ldr	r2, [r4, #0]
 800d5e4:	bf18      	it	ne
 800d5e6:	2301      	movne	r3, #1
 800d5e8:	0692      	lsls	r2, r2, #26
 800d5ea:	d42b      	bmi.n	800d644 <_printf_common+0xb0>
 800d5ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5f0:	4649      	mov	r1, r9
 800d5f2:	4638      	mov	r0, r7
 800d5f4:	47c0      	blx	r8
 800d5f6:	3001      	adds	r0, #1
 800d5f8:	d01e      	beq.n	800d638 <_printf_common+0xa4>
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	68e5      	ldr	r5, [r4, #12]
 800d5fe:	6832      	ldr	r2, [r6, #0]
 800d600:	f003 0306 	and.w	r3, r3, #6
 800d604:	2b04      	cmp	r3, #4
 800d606:	bf08      	it	eq
 800d608:	1aad      	subeq	r5, r5, r2
 800d60a:	68a3      	ldr	r3, [r4, #8]
 800d60c:	6922      	ldr	r2, [r4, #16]
 800d60e:	bf0c      	ite	eq
 800d610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d614:	2500      	movne	r5, #0
 800d616:	4293      	cmp	r3, r2
 800d618:	bfc4      	itt	gt
 800d61a:	1a9b      	subgt	r3, r3, r2
 800d61c:	18ed      	addgt	r5, r5, r3
 800d61e:	2600      	movs	r6, #0
 800d620:	341a      	adds	r4, #26
 800d622:	42b5      	cmp	r5, r6
 800d624:	d11a      	bne.n	800d65c <_printf_common+0xc8>
 800d626:	2000      	movs	r0, #0
 800d628:	e008      	b.n	800d63c <_printf_common+0xa8>
 800d62a:	2301      	movs	r3, #1
 800d62c:	4652      	mov	r2, sl
 800d62e:	4649      	mov	r1, r9
 800d630:	4638      	mov	r0, r7
 800d632:	47c0      	blx	r8
 800d634:	3001      	adds	r0, #1
 800d636:	d103      	bne.n	800d640 <_printf_common+0xac>
 800d638:	f04f 30ff 	mov.w	r0, #4294967295
 800d63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d640:	3501      	adds	r5, #1
 800d642:	e7c6      	b.n	800d5d2 <_printf_common+0x3e>
 800d644:	18e1      	adds	r1, r4, r3
 800d646:	1c5a      	adds	r2, r3, #1
 800d648:	2030      	movs	r0, #48	; 0x30
 800d64a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d64e:	4422      	add	r2, r4
 800d650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d658:	3302      	adds	r3, #2
 800d65a:	e7c7      	b.n	800d5ec <_printf_common+0x58>
 800d65c:	2301      	movs	r3, #1
 800d65e:	4622      	mov	r2, r4
 800d660:	4649      	mov	r1, r9
 800d662:	4638      	mov	r0, r7
 800d664:	47c0      	blx	r8
 800d666:	3001      	adds	r0, #1
 800d668:	d0e6      	beq.n	800d638 <_printf_common+0xa4>
 800d66a:	3601      	adds	r6, #1
 800d66c:	e7d9      	b.n	800d622 <_printf_common+0x8e>
	...

0800d670 <_printf_i>:
 800d670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d674:	7e0f      	ldrb	r7, [r1, #24]
 800d676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d678:	2f78      	cmp	r7, #120	; 0x78
 800d67a:	4691      	mov	r9, r2
 800d67c:	4680      	mov	r8, r0
 800d67e:	460c      	mov	r4, r1
 800d680:	469a      	mov	sl, r3
 800d682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d686:	d807      	bhi.n	800d698 <_printf_i+0x28>
 800d688:	2f62      	cmp	r7, #98	; 0x62
 800d68a:	d80a      	bhi.n	800d6a2 <_printf_i+0x32>
 800d68c:	2f00      	cmp	r7, #0
 800d68e:	f000 80d8 	beq.w	800d842 <_printf_i+0x1d2>
 800d692:	2f58      	cmp	r7, #88	; 0x58
 800d694:	f000 80a3 	beq.w	800d7de <_printf_i+0x16e>
 800d698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d69c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d6a0:	e03a      	b.n	800d718 <_printf_i+0xa8>
 800d6a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d6a6:	2b15      	cmp	r3, #21
 800d6a8:	d8f6      	bhi.n	800d698 <_printf_i+0x28>
 800d6aa:	a101      	add	r1, pc, #4	; (adr r1, 800d6b0 <_printf_i+0x40>)
 800d6ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d6b0:	0800d709 	.word	0x0800d709
 800d6b4:	0800d71d 	.word	0x0800d71d
 800d6b8:	0800d699 	.word	0x0800d699
 800d6bc:	0800d699 	.word	0x0800d699
 800d6c0:	0800d699 	.word	0x0800d699
 800d6c4:	0800d699 	.word	0x0800d699
 800d6c8:	0800d71d 	.word	0x0800d71d
 800d6cc:	0800d699 	.word	0x0800d699
 800d6d0:	0800d699 	.word	0x0800d699
 800d6d4:	0800d699 	.word	0x0800d699
 800d6d8:	0800d699 	.word	0x0800d699
 800d6dc:	0800d829 	.word	0x0800d829
 800d6e0:	0800d74d 	.word	0x0800d74d
 800d6e4:	0800d80b 	.word	0x0800d80b
 800d6e8:	0800d699 	.word	0x0800d699
 800d6ec:	0800d699 	.word	0x0800d699
 800d6f0:	0800d84b 	.word	0x0800d84b
 800d6f4:	0800d699 	.word	0x0800d699
 800d6f8:	0800d74d 	.word	0x0800d74d
 800d6fc:	0800d699 	.word	0x0800d699
 800d700:	0800d699 	.word	0x0800d699
 800d704:	0800d813 	.word	0x0800d813
 800d708:	682b      	ldr	r3, [r5, #0]
 800d70a:	1d1a      	adds	r2, r3, #4
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	602a      	str	r2, [r5, #0]
 800d710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d718:	2301      	movs	r3, #1
 800d71a:	e0a3      	b.n	800d864 <_printf_i+0x1f4>
 800d71c:	6820      	ldr	r0, [r4, #0]
 800d71e:	6829      	ldr	r1, [r5, #0]
 800d720:	0606      	lsls	r6, r0, #24
 800d722:	f101 0304 	add.w	r3, r1, #4
 800d726:	d50a      	bpl.n	800d73e <_printf_i+0xce>
 800d728:	680e      	ldr	r6, [r1, #0]
 800d72a:	602b      	str	r3, [r5, #0]
 800d72c:	2e00      	cmp	r6, #0
 800d72e:	da03      	bge.n	800d738 <_printf_i+0xc8>
 800d730:	232d      	movs	r3, #45	; 0x2d
 800d732:	4276      	negs	r6, r6
 800d734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d738:	485e      	ldr	r0, [pc, #376]	; (800d8b4 <_printf_i+0x244>)
 800d73a:	230a      	movs	r3, #10
 800d73c:	e019      	b.n	800d772 <_printf_i+0x102>
 800d73e:	680e      	ldr	r6, [r1, #0]
 800d740:	602b      	str	r3, [r5, #0]
 800d742:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d746:	bf18      	it	ne
 800d748:	b236      	sxthne	r6, r6
 800d74a:	e7ef      	b.n	800d72c <_printf_i+0xbc>
 800d74c:	682b      	ldr	r3, [r5, #0]
 800d74e:	6820      	ldr	r0, [r4, #0]
 800d750:	1d19      	adds	r1, r3, #4
 800d752:	6029      	str	r1, [r5, #0]
 800d754:	0601      	lsls	r1, r0, #24
 800d756:	d501      	bpl.n	800d75c <_printf_i+0xec>
 800d758:	681e      	ldr	r6, [r3, #0]
 800d75a:	e002      	b.n	800d762 <_printf_i+0xf2>
 800d75c:	0646      	lsls	r6, r0, #25
 800d75e:	d5fb      	bpl.n	800d758 <_printf_i+0xe8>
 800d760:	881e      	ldrh	r6, [r3, #0]
 800d762:	4854      	ldr	r0, [pc, #336]	; (800d8b4 <_printf_i+0x244>)
 800d764:	2f6f      	cmp	r7, #111	; 0x6f
 800d766:	bf0c      	ite	eq
 800d768:	2308      	moveq	r3, #8
 800d76a:	230a      	movne	r3, #10
 800d76c:	2100      	movs	r1, #0
 800d76e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d772:	6865      	ldr	r5, [r4, #4]
 800d774:	60a5      	str	r5, [r4, #8]
 800d776:	2d00      	cmp	r5, #0
 800d778:	bfa2      	ittt	ge
 800d77a:	6821      	ldrge	r1, [r4, #0]
 800d77c:	f021 0104 	bicge.w	r1, r1, #4
 800d780:	6021      	strge	r1, [r4, #0]
 800d782:	b90e      	cbnz	r6, 800d788 <_printf_i+0x118>
 800d784:	2d00      	cmp	r5, #0
 800d786:	d04d      	beq.n	800d824 <_printf_i+0x1b4>
 800d788:	4615      	mov	r5, r2
 800d78a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d78e:	fb03 6711 	mls	r7, r3, r1, r6
 800d792:	5dc7      	ldrb	r7, [r0, r7]
 800d794:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d798:	4637      	mov	r7, r6
 800d79a:	42bb      	cmp	r3, r7
 800d79c:	460e      	mov	r6, r1
 800d79e:	d9f4      	bls.n	800d78a <_printf_i+0x11a>
 800d7a0:	2b08      	cmp	r3, #8
 800d7a2:	d10b      	bne.n	800d7bc <_printf_i+0x14c>
 800d7a4:	6823      	ldr	r3, [r4, #0]
 800d7a6:	07de      	lsls	r6, r3, #31
 800d7a8:	d508      	bpl.n	800d7bc <_printf_i+0x14c>
 800d7aa:	6923      	ldr	r3, [r4, #16]
 800d7ac:	6861      	ldr	r1, [r4, #4]
 800d7ae:	4299      	cmp	r1, r3
 800d7b0:	bfde      	ittt	le
 800d7b2:	2330      	movle	r3, #48	; 0x30
 800d7b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d7b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d7bc:	1b52      	subs	r2, r2, r5
 800d7be:	6122      	str	r2, [r4, #16]
 800d7c0:	f8cd a000 	str.w	sl, [sp]
 800d7c4:	464b      	mov	r3, r9
 800d7c6:	aa03      	add	r2, sp, #12
 800d7c8:	4621      	mov	r1, r4
 800d7ca:	4640      	mov	r0, r8
 800d7cc:	f7ff fee2 	bl	800d594 <_printf_common>
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	d14c      	bne.n	800d86e <_printf_i+0x1fe>
 800d7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d8:	b004      	add	sp, #16
 800d7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7de:	4835      	ldr	r0, [pc, #212]	; (800d8b4 <_printf_i+0x244>)
 800d7e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d7e4:	6829      	ldr	r1, [r5, #0]
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d7ec:	6029      	str	r1, [r5, #0]
 800d7ee:	061d      	lsls	r5, r3, #24
 800d7f0:	d514      	bpl.n	800d81c <_printf_i+0x1ac>
 800d7f2:	07df      	lsls	r7, r3, #31
 800d7f4:	bf44      	itt	mi
 800d7f6:	f043 0320 	orrmi.w	r3, r3, #32
 800d7fa:	6023      	strmi	r3, [r4, #0]
 800d7fc:	b91e      	cbnz	r6, 800d806 <_printf_i+0x196>
 800d7fe:	6823      	ldr	r3, [r4, #0]
 800d800:	f023 0320 	bic.w	r3, r3, #32
 800d804:	6023      	str	r3, [r4, #0]
 800d806:	2310      	movs	r3, #16
 800d808:	e7b0      	b.n	800d76c <_printf_i+0xfc>
 800d80a:	6823      	ldr	r3, [r4, #0]
 800d80c:	f043 0320 	orr.w	r3, r3, #32
 800d810:	6023      	str	r3, [r4, #0]
 800d812:	2378      	movs	r3, #120	; 0x78
 800d814:	4828      	ldr	r0, [pc, #160]	; (800d8b8 <_printf_i+0x248>)
 800d816:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d81a:	e7e3      	b.n	800d7e4 <_printf_i+0x174>
 800d81c:	0659      	lsls	r1, r3, #25
 800d81e:	bf48      	it	mi
 800d820:	b2b6      	uxthmi	r6, r6
 800d822:	e7e6      	b.n	800d7f2 <_printf_i+0x182>
 800d824:	4615      	mov	r5, r2
 800d826:	e7bb      	b.n	800d7a0 <_printf_i+0x130>
 800d828:	682b      	ldr	r3, [r5, #0]
 800d82a:	6826      	ldr	r6, [r4, #0]
 800d82c:	6961      	ldr	r1, [r4, #20]
 800d82e:	1d18      	adds	r0, r3, #4
 800d830:	6028      	str	r0, [r5, #0]
 800d832:	0635      	lsls	r5, r6, #24
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	d501      	bpl.n	800d83c <_printf_i+0x1cc>
 800d838:	6019      	str	r1, [r3, #0]
 800d83a:	e002      	b.n	800d842 <_printf_i+0x1d2>
 800d83c:	0670      	lsls	r0, r6, #25
 800d83e:	d5fb      	bpl.n	800d838 <_printf_i+0x1c8>
 800d840:	8019      	strh	r1, [r3, #0]
 800d842:	2300      	movs	r3, #0
 800d844:	6123      	str	r3, [r4, #16]
 800d846:	4615      	mov	r5, r2
 800d848:	e7ba      	b.n	800d7c0 <_printf_i+0x150>
 800d84a:	682b      	ldr	r3, [r5, #0]
 800d84c:	1d1a      	adds	r2, r3, #4
 800d84e:	602a      	str	r2, [r5, #0]
 800d850:	681d      	ldr	r5, [r3, #0]
 800d852:	6862      	ldr	r2, [r4, #4]
 800d854:	2100      	movs	r1, #0
 800d856:	4628      	mov	r0, r5
 800d858:	f7f2 fce2 	bl	8000220 <memchr>
 800d85c:	b108      	cbz	r0, 800d862 <_printf_i+0x1f2>
 800d85e:	1b40      	subs	r0, r0, r5
 800d860:	6060      	str	r0, [r4, #4]
 800d862:	6863      	ldr	r3, [r4, #4]
 800d864:	6123      	str	r3, [r4, #16]
 800d866:	2300      	movs	r3, #0
 800d868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d86c:	e7a8      	b.n	800d7c0 <_printf_i+0x150>
 800d86e:	6923      	ldr	r3, [r4, #16]
 800d870:	462a      	mov	r2, r5
 800d872:	4649      	mov	r1, r9
 800d874:	4640      	mov	r0, r8
 800d876:	47d0      	blx	sl
 800d878:	3001      	adds	r0, #1
 800d87a:	d0ab      	beq.n	800d7d4 <_printf_i+0x164>
 800d87c:	6823      	ldr	r3, [r4, #0]
 800d87e:	079b      	lsls	r3, r3, #30
 800d880:	d413      	bmi.n	800d8aa <_printf_i+0x23a>
 800d882:	68e0      	ldr	r0, [r4, #12]
 800d884:	9b03      	ldr	r3, [sp, #12]
 800d886:	4298      	cmp	r0, r3
 800d888:	bfb8      	it	lt
 800d88a:	4618      	movlt	r0, r3
 800d88c:	e7a4      	b.n	800d7d8 <_printf_i+0x168>
 800d88e:	2301      	movs	r3, #1
 800d890:	4632      	mov	r2, r6
 800d892:	4649      	mov	r1, r9
 800d894:	4640      	mov	r0, r8
 800d896:	47d0      	blx	sl
 800d898:	3001      	adds	r0, #1
 800d89a:	d09b      	beq.n	800d7d4 <_printf_i+0x164>
 800d89c:	3501      	adds	r5, #1
 800d89e:	68e3      	ldr	r3, [r4, #12]
 800d8a0:	9903      	ldr	r1, [sp, #12]
 800d8a2:	1a5b      	subs	r3, r3, r1
 800d8a4:	42ab      	cmp	r3, r5
 800d8a6:	dcf2      	bgt.n	800d88e <_printf_i+0x21e>
 800d8a8:	e7eb      	b.n	800d882 <_printf_i+0x212>
 800d8aa:	2500      	movs	r5, #0
 800d8ac:	f104 0619 	add.w	r6, r4, #25
 800d8b0:	e7f5      	b.n	800d89e <_printf_i+0x22e>
 800d8b2:	bf00      	nop
 800d8b4:	08010639 	.word	0x08010639
 800d8b8:	0801064a 	.word	0x0801064a

0800d8bc <__retarget_lock_acquire_recursive>:
 800d8bc:	4770      	bx	lr

0800d8be <__retarget_lock_release_recursive>:
 800d8be:	4770      	bx	lr

0800d8c0 <memmove>:
 800d8c0:	4288      	cmp	r0, r1
 800d8c2:	b510      	push	{r4, lr}
 800d8c4:	eb01 0402 	add.w	r4, r1, r2
 800d8c8:	d902      	bls.n	800d8d0 <memmove+0x10>
 800d8ca:	4284      	cmp	r4, r0
 800d8cc:	4623      	mov	r3, r4
 800d8ce:	d807      	bhi.n	800d8e0 <memmove+0x20>
 800d8d0:	1e43      	subs	r3, r0, #1
 800d8d2:	42a1      	cmp	r1, r4
 800d8d4:	d008      	beq.n	800d8e8 <memmove+0x28>
 800d8d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8de:	e7f8      	b.n	800d8d2 <memmove+0x12>
 800d8e0:	4402      	add	r2, r0
 800d8e2:	4601      	mov	r1, r0
 800d8e4:	428a      	cmp	r2, r1
 800d8e6:	d100      	bne.n	800d8ea <memmove+0x2a>
 800d8e8:	bd10      	pop	{r4, pc}
 800d8ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d8ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d8f2:	e7f7      	b.n	800d8e4 <memmove+0x24>

0800d8f4 <_realloc_r>:
 800d8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f8:	4680      	mov	r8, r0
 800d8fa:	4614      	mov	r4, r2
 800d8fc:	460e      	mov	r6, r1
 800d8fe:	b921      	cbnz	r1, 800d90a <_realloc_r+0x16>
 800d900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d904:	4611      	mov	r1, r2
 800d906:	f7ff bc13 	b.w	800d130 <_malloc_r>
 800d90a:	b92a      	cbnz	r2, 800d918 <_realloc_r+0x24>
 800d90c:	f7ff fba4 	bl	800d058 <_free_r>
 800d910:	4625      	mov	r5, r4
 800d912:	4628      	mov	r0, r5
 800d914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d918:	f000 f81b 	bl	800d952 <_malloc_usable_size_r>
 800d91c:	4284      	cmp	r4, r0
 800d91e:	4607      	mov	r7, r0
 800d920:	d802      	bhi.n	800d928 <_realloc_r+0x34>
 800d922:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d926:	d812      	bhi.n	800d94e <_realloc_r+0x5a>
 800d928:	4621      	mov	r1, r4
 800d92a:	4640      	mov	r0, r8
 800d92c:	f7ff fc00 	bl	800d130 <_malloc_r>
 800d930:	4605      	mov	r5, r0
 800d932:	2800      	cmp	r0, #0
 800d934:	d0ed      	beq.n	800d912 <_realloc_r+0x1e>
 800d936:	42bc      	cmp	r4, r7
 800d938:	4622      	mov	r2, r4
 800d93a:	4631      	mov	r1, r6
 800d93c:	bf28      	it	cs
 800d93e:	463a      	movcs	r2, r7
 800d940:	f7ff fb74 	bl	800d02c <memcpy>
 800d944:	4631      	mov	r1, r6
 800d946:	4640      	mov	r0, r8
 800d948:	f7ff fb86 	bl	800d058 <_free_r>
 800d94c:	e7e1      	b.n	800d912 <_realloc_r+0x1e>
 800d94e:	4635      	mov	r5, r6
 800d950:	e7df      	b.n	800d912 <_realloc_r+0x1e>

0800d952 <_malloc_usable_size_r>:
 800d952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d956:	1f18      	subs	r0, r3, #4
 800d958:	2b00      	cmp	r3, #0
 800d95a:	bfbc      	itt	lt
 800d95c:	580b      	ldrlt	r3, [r1, r0]
 800d95e:	18c0      	addlt	r0, r0, r3
 800d960:	4770      	bx	lr
	...

0800d964 <_init>:
 800d964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d966:	bf00      	nop
 800d968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d96a:	bc08      	pop	{r3}
 800d96c:	469e      	mov	lr, r3
 800d96e:	4770      	bx	lr

0800d970 <_fini>:
 800d970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d972:	bf00      	nop
 800d974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d976:	bc08      	pop	{r3}
 800d978:	469e      	mov	lr, r3
 800d97a:	4770      	bx	lr
